{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"cfd0242702c46d6927070100766493fb2d3f4324","modified":1527820155905},{"_id":"source/_posts/Android-Studio布局加载器不显示的问题.md","hash":"0b7d9ff8493af3dddd70d9cf6c36b51f0388c4ff","modified":1529673666595},{"_id":"source/_posts/JS模拟bind方法实现.md","hash":"2187e1a2c2831e8ac5dd3918dd9309b1983b7661","modified":1527863971038},{"_id":"source/_posts/JS对select动态添加options操作（主流浏览器兼容）.md","hash":"cb56be7134fdeb9b4612707713c9468586bb59d6","modified":1527818393345},{"_id":"source/_posts/Vue在项目中使用的一些心得（一）.md","hash":"394d403dfd05e12799f1e11fcd85b69c21fa816b","modified":1552830453404},{"_id":"source/_posts/better-scroll使用中的一个问题.md","hash":"24079fc741f6e74e1d7840e275592239211f25d1","modified":1534252237648},{"_id":"source/_posts/css相关技巧总结-二.md","hash":"fb454568d483729d177d53fdbc489a96303031e9","modified":1529502788336},{"_id":"source/_posts/css相关技巧总结.md","hash":"62f9221295588bd6f21088bc1e88646bdc65a528","modified":1542028993678},{"_id":"source/_posts/css设置居中方案总结.md","hash":"9405fe13f160b07516b9872a4d65fc7dd577fa8f","modified":1527817777121},{"_id":"source/_posts/flex元素定宽.md","hash":"f9a43edb6351b79c0c8a3335ab14c9793040b30e","modified":1532439147704},{"_id":"source/_posts/flex在文本自适应中的一个小应用.md","hash":"419c1d1e9b02c88b867ee1b7e35f13df67815781","modified":1540728935144},{"_id":"source/_posts/flex布局.md","hash":"c09d55535d58fcf269d5da05bc101e97f9b181b3","modified":1527815845430},{"_id":"source/_posts/h5中data-属性的使用介绍.md","hash":"689c66e6287196a0b3d8ca9287611d78ef71942a","modified":1578322764501},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1610155545798},{"_id":"source/_posts/img-标签-访问图片-返回403-forbidden问题.md","hash":"a842bc821e79342401757e67134b779ffd13c6f8","modified":1527818782168},{"_id":"source/_posts/input-focus在iOS上失效的解决方法.md","hash":"0e3762c8656fe43f83f59cc0679fc7aefdb7dc18","modified":1528726939728},{"_id":"source/_posts/ios移动端部分手机不支持background-attachment-fixed-的解决办法.md","hash":"c2a8860ff1ce3c4151a6eb96fba850bd0d16309c","modified":1527815743191},{"_id":"source/_posts/js中高德百度地图坐标转换.md","hash":"6e83bd2e9ec414ca87cc506c93071edf6ccd42e8","modified":1529503030702},{"_id":"source/_posts/max-width在单行文字中的小技巧.md","hash":"8bfcd919044b70733deae32c7dade17f6532558f","modified":1531491333168},{"_id":"source/_posts/vue-awesome-swiper如何竖向展示多条数据.md","hash":"588d63cdcb1bd91fea204f9f5ea431dd55e8e2df","modified":1545564287132},{"_id":"source/_posts/vue中面包屑使用心得.md","hash":"a404f9308d0a7d6c4ed2ac1085bf0fe5aa741f10","modified":1562378630206},{"_id":"source/_posts/vue-validate使用心得.md","hash":"470aca4066ec0320500faea6fc842c14a4400732","modified":1546246057738},{"_id":"source/_posts/vue单页面新建tab页跳转的方法.md","hash":"29f29f140c8ffec9f587dedba9644f430e274ea9","modified":1547468393828},{"_id":"source/_posts/vue项目使用分页组件的心得.md","hash":"2786a2000372b5b61a398820b02c42c23570ae08","modified":1545313318900},{"_id":"source/_posts/vue项目总结.md","hash":"5b868585eea02a950bf9740bb6fe934bc9de41bd","modified":1549591703480},{"_id":"source/_posts/交叉观察者IntersectionObserver介绍.md","hash":"e4a497c30e85e67a866778176e0ebc0f71baed1f","modified":1569038262822},{"_id":"source/_posts/全景框架krpano-js介绍分享.md","hash":"fb9d32cf3bdceaf6e5c3cbef44db95f64095fc32","modified":1564153581755},{"_id":"source/_posts/关于input的一些问题解决方法分享.md","hash":"6ea356ba1e0b9d981fff47e6c43b33e51c68b549","modified":1527815836310},{"_id":"source/_posts/关于js中-toFixed-的一个小坑.md","hash":"c6cc49135b645c571f4a50f07275bc9fe8e3cedc","modified":1528035029598},{"_id":"source/_posts/关于在一体机中浏览器手势缩放导致百度地图失效的问题.md","hash":"33547a74b0b192bc2fcd65a8c5dae97493f272bc","modified":1539955425501},{"_id":"source/_posts/关于移动端click事件延迟.md","hash":"b536738f8c7d3ff7355057efb6ecf69342ab4c66","modified":1528982419878},{"_id":"source/_posts/如何正确的在微信小程序里使用iconfont.md","hash":"88a24a170821b2ed27c05f79336003087ea5b7b0","modified":1540131125587},{"_id":"source/_posts/如何用vue手写一个拼图滑块验证的组件.md","hash":"835245862100764d9c4eaf843faffc135d95f451","modified":1573901550491},{"_id":"source/_posts/完美的深拷贝实现思路.md","hash":"be2692aa8d98becb403f07b91ad53b7585913d19","modified":1586660066158},{"_id":"source/_posts/微信小程序富文本样式处理.md","hash":"7f9a8426a3820eb1774250feb9c195b0b6f47828","modified":1562505630085},{"_id":"source/_posts/最近项目遇到的问题解决记录.md","hash":"7bd2a7dee2e8f11e4dfed203b4ac6a31cff150ca","modified":1560176533075},{"_id":"source/_posts/浅析DOM事件.md","hash":"488eea100d68ba17efc6c63fcab44f30eddc6d25","modified":1529670608722},{"_id":"source/_posts/浅析swiper初始化遇到的一个问题.md","hash":"76777bcf7c37ce49cfe52947bb41541d7214f038","modified":1530536903454},{"_id":"source/_posts/浅析图片的懒加载.md","hash":"99ff588e88cd9278b62e881bfc8850ab6b7348f3","modified":1528078183543},{"_id":"source/_posts/浅析浏览器的回流与重绘.md","hash":"771e2a7c2d23ab35aff8694eaca9c068087cbace","modified":1527815827861},{"_id":"source/_posts/浅谈JS中的浅拷贝与深拷贝.md","hash":"dff96baa4e290a258b115731cd044c8a8b209094","modified":1527815850219},{"_id":"source/_posts/浅谈JS中的闭包.md","hash":"ba87849ce901dc8033e8cecf53878667b88ea097","modified":1527815847823},{"_id":"source/_posts/浏览器调用摄像头生成照片.md","hash":"2cf8e548c0ac9ddf11c762af3a892deca7b866ab","modified":1566739999542},{"_id":"source/_posts/百度地图信息窗口如何添加事件.md","hash":"e3e564ecdfa266b07cf08834d47e48482639d678","modified":1529503039124},{"_id":"source/_posts/百度地图在移动端页面点击事件失效的解决.md","hash":"a40aec60acd3d228dbeb26dd7b18a9ff93718145","modified":1534080436529},{"_id":"source/_posts/百度地图在项目中使用的js小优化.md","hash":"b1cb77b986b1e311b104a7fd4bd34c512f523da4","modified":1531404965786},{"_id":"source/_posts/移动端页面遮罩层禁止页面滚动.md","hash":"d4f5ac28391b07c542c7d78e0d9621a06c152920","modified":1532874348918},{"_id":"source/_posts/解决js中onclick与ondblclick事件绑定冲突的问题.md","hash":"91e2413f49c964f3258299d535bf2a72c934a09c","modified":1530110314981},{"_id":"source/_posts/解决transition过度在height-auto失效的问题.md","hash":"e78c7b161c9209ba29017a83e4fc0f0cc16c408e","modified":1561472154690},{"_id":"source/_posts/解决vue-awesome-swiper-loop属性失效的问题.md","hash":"409446c90e3e3d26b775c310811822ed5340d5b2","modified":1545742627765},{"_id":"source/_posts/让a链接失效的那点事儿.md","hash":"e2c9aa4a6c448f1a912a7eab7acd0643253bf1e1","modified":1536154519181},{"_id":"source/_posts/记一次百度地图容器父级position定位产生的bug.md","hash":"4b6e8311732363e6789c10db22cb9f560fe47b1d","modified":1578742919788},{"_id":"source/_posts/记一次Transform属性导致的z-index失效问题.md","hash":"7f628caab3102e32be46d55e4544390e862b45c9","modified":1535897130611},{"_id":"source/_posts/记一次项目里关于el-scrollbar的使用.md","hash":"20d5a62d92d30a8f8a65aa48e0b5f0ba4e5aa9fe","modified":1573566230670},{"_id":"source/_posts/记录better-scroll滚动错位的一个问题.md","hash":"348bab14c729bcf36441499df2e8b73e5aeea17c","modified":1535811595376},{"_id":"source/_posts/记录一个页面width导致的bug.md","hash":"e3d083f9f42327f6a4083b41e8b2ef7747fa70f3","modified":1542115464378},{"_id":"source/_posts/铜陵城市超脑前端技术梳理.md","hash":"627ad200326b7e9d483468acffa71ff04dd9c563","modified":1568985480592},{"_id":"source/_posts/音频文件在vue中动态src绑定的问题.md","hash":"5c4a623910526802f8f7649681fb9e24e7a85381","modified":1540390208930},{"_id":"source/categories/index.md","hash":"b2700c77afdf2d7a814e7a76b44412bdf54fb861","modified":1527819252912},{"_id":"source/project/index.md","hash":"d2bce8214653b5b03f7233b68cbb5150428ea39a","modified":1576323292255},{"_id":"source/tags/index.md","hash":"9e5e9b124cc33dc0f66cef8beb99387c32d16ceb","modified":1527819260852},{"_id":"source/image/avatar.jpg","hash":"5320eed022d42f6cff4b3744689de45d90650893","modified":1527729186000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564215},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564160},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564160},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564205},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564205},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564206},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564214},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527745564215},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1527745564137},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1527745564137},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1527745564137},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1527745564139},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1527745564140},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1527745564141},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1527745564141},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1527745564140},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1527745564141},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1527745564139},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1527745564142},{"_id":"themes/next/_config.yml","hash":"40e386440fa1681162850bfc5f2a509dcb7d5060","modified":1527820673886},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1527745564140},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1527745564142},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1527745564143},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1527745564175},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1527745564138},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1527745564138},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1527745564138},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527745564139},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1527745564143},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1527745564144},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1527745564143},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1527745564144},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1527745564144},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1527745564145},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1527745564145},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1527745564146},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1527745564146},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1527745564146},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1527745564147},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1527745564147},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1527745564148},{"_id":"themes/next/languages/zh-CN.yml","hash":"d21da76ebd13f5c5ce3116f003027b20a1290b26","modified":1527820721286},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1527745564148},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1527745564149},{"_id":"themes/next/layout/_layout.swig","hash":"88b89ab7feef24170d3ff2d4cd39164766ba5fde","modified":1527752019231},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1527745564173},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1527745564173},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1527745564174},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1527745564174},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1527745564174},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1527745564175},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1527745564176},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1527745564175},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1527745564177},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1527745564281},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1527745564281},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1527745564281},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1527745564149},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1527745564149},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"21f2eda699a7ef990fedb6f623ce6395f0a7e52d","modified":1527751238494},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1527745564151},{"_id":"themes/next/layout/_macro/post.swig","hash":"b7b7f1af446ade67157dce3f5a9a52a6056ad24b","modified":1527756230639},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1527745564151},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1527745564152},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1527745564153},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1527745564153},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1527745564154},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c6db501df0778f8686ebf2adf19cc8eb3ed3091f","modified":1527750382185},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1527745564154},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1527745564155},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1527745564156},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1527745564156},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1527745564156},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1527745564159},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1527745564159},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1527745564161},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1527745564169},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1527745564169},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1527745564169},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1527745564170},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1527745564170},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1527745564170},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1527745564171},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1527745564177},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1527745564177},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1527745564178},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1527745564178},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1527745564179},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1527745564178},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1527745564179},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1527745564179},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1527745564180},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1527745564215},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1527745564216},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527745564217},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527745564217},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1527745564218},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1527745564218},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1527745564219},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1527745564220},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1527745564220},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1527745564221},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1527745564221},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527745564221},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527745564222},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1527745564222},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527745564222},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527745564222},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1527745564223},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1527745564223},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527745564223},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1527745564155},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1527745564155},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1527745564157},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1527745564157},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1527745564157},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1527745564158},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1527745564158},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1527745564158},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1527745564159},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1527745564160},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1527745564160},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1527745564160},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1527745564161},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1527745564162},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1527745564162},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1527745564162},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1527745564163},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1527745564163},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1527745564163},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1527745564164},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1527745564164},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1527745564164},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1527745564165},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1527745564165},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1527745564165},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1527745564166},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1527745564166},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1527745564166},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1527745564167},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1527745564167},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1527745564167},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1527745564168},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1527745564168},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1527745564168},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1527745564172},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1527745564172},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1527745564172},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1527745564173},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c79054975760a1fb88af1a29efc3bb84792c39df","modified":1527749820776},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1527745564205},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1527745564205},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1527745564206},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1527745564213},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1527745564214},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1527745564214},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1527745564215},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1527745564224},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1527745564224},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1527745564224},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1527745564225},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1527745564225},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1527745564225},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1527751987737},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1527745564226},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1527745564226},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1527745564227},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1527745564227},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1527745564228},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527745564234},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527745564237},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1527745564238},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1527745564238},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1527745564238},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1527745564244},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1527745564245},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1527745564245},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1527745564245},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1527745564247},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1527745564247},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1527745564247},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1527745564248},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1527745564248},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1527745564261},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1527745564263},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1527745564263},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1527745564263},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1527745564263},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1527745564264},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1527745564265},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1527745564266},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1527745564266},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1527745564266},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527745564267},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527745564267},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527745564268},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527745564268},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527745564268},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527745564269},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527745564269},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527745564269},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527745564269},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527745564270},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527745564270},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527745564270},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527745564271},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1527745564271},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1527745564271},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1527745564272},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1527745564272},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1527745564277},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1527745564277},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1527745564279},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1527745564280},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1527745564280},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1527745564171},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1527745564171},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1527745564180},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1527745564181},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1527745564181},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1527745564181},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1527745564181},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1527745564187},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1527745564195},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1527745564202},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1527745564202},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1527745564203},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1527745564203},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1527745564203},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1527745564204},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1527745564204},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1527745564206},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1527745564207},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1527745564207},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1527745564207},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1527745564208},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1527745564208},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1527745564208},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1527745564209},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1527745564210},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1527745564210},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1527745564210},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1527745564211},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1527745564211},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1527745564212},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1527745564212},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1527745564212},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1527745564212},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1527745564213},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1527745564213},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1527745564227},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1527745564231},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1527745564232},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1527745564233},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527745564239},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527745564239},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527745564239},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527745564240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527745564240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527745564240},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1527745564243},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1527745564244},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1527745564244},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1527745564246},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527745564246},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1527745564249},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1527745564249},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1527745564250},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1527745564276},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1527745564277},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1527745564182},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1527753395487},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1527745564183},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1527745564183},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1527745564184},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1527745564184},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1527745564185},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1527745564185},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1527745564185},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1527745564186},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1527745564186},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1527745564186},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1527745564186},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1527745564187},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1527745564188},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1527745564187},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1527745564188},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1527745564188},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1527745564188},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1527745564189},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1527745564189},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1527745564189},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1527745564190},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1527745564190},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1527745564191},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1527745564191},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1527745564191},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1527745564191},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1527745564192},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1527745564192},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"63e717ffe04354857b4a4e98718655735d0ce170","modified":1527753693323},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1527745564193},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1527745564193},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1527745564193},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1527745564194},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1527745564194},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1527745564194},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1527745564195},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1527745564195},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1527745564196},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1527745564196},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1527745564196},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1527745564196},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1527745564197},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1527745564197},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1527745564197},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1527745564198},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1527745564198},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1527745564199},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1527745564199},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1527745564200},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1527745564200},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1527745564200},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1527745564201},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1527745564201},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1527745564201},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1527745564201},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1527745564202},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1527745564209},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1527745564210},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1527745564211},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527745564229},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527745564229},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527745564229},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527745564230},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527745564230},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527745564241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1527745564241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1527745564241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1527745564242},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1527745564242},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1527745564243},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1527745564262},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1527745564231},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527745564260},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527745564261},{"_id":"themes/next/source/images/avatar.jpg","hash":"5320eed022d42f6cff4b3744689de45d90650893","modified":1527729186000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527745564252},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527745564254},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527745564259},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1527745564279},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1527745564237},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1527745564275},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1527745564257},{"_id":"public/about/index.html","hash":"fdf91d05ea63d0fd10a9dfdd67b77a246f7214f3","modified":1610157016306},{"_id":"public/categories/index.html","hash":"2f877f5f265977d38085a9b8108ea6c00ffb74c2","modified":1610157016306},{"_id":"public/tags/index.html","hash":"7c64bb817079b646a200b0147a1cf5a8ced44c81","modified":1610157016306},{"_id":"public/project/index.html","hash":"bbd442c13555535e655566b30071118f8a423adf","modified":1610157016306},{"_id":"public/2021/01/09/hello-world/index.html","hash":"4950a7f372d67d4c5ffdc40ec53fc8e9da689d80","modified":1610157016306},{"_id":"public/2020/04/12/完美的深拷贝实现思路/index.html","hash":"4fdfb50bddc73fc207c0cd8529709f7e6dec5912","modified":1610157016306},{"_id":"public/2020/01/11/记一次百度地图容器父级position定位产生的bug/index.html","hash":"b2a975c90b793d6789c54532dd61c5392f04811e","modified":1610157016306},{"_id":"public/2020/01/06/h5中data-属性的使用介绍/index.html","hash":"68c136108eeb6e1c2ba061e2697642c249ae01f8","modified":1610157016306},{"_id":"public/2019/11/16/如何用vue手写一个拼图滑块验证的组件/index.html","hash":"d2a7f2c7d1106ec12132f0f9004172ed08c1a91d","modified":1610157016306},{"_id":"public/2019/11/12/记一次项目里关于el-scrollbar的使用/index.html","hash":"6ccf671094f0895e49f15116205ac3c43bbd61d5","modified":1610157016306},{"_id":"public/2019/09/20/交叉观察者IntersectionObserver介绍/index.html","hash":"2bf92af0d37375bd89a28f6f68b3136683eddccd","modified":1610157016306},{"_id":"public/2019/09/20/铜陵城市超脑前端技术梳理/index.html","hash":"e1ab6de5e34721dbbca0c0fd5ca3afbb1bbac729","modified":1610157016306},{"_id":"public/2019/08/25/浏览器调用摄像头生成照片/index.html","hash":"2858a27bc4225927b8376f22d3087b2698cb4ae4","modified":1610157016306},{"_id":"public/2019/07/26/全景框架krpano-js介绍分享/index.html","hash":"f339fc5d4a21bb89f478a65f25d3d19d655aafd8","modified":1610157016306},{"_id":"public/2019/07/07/微信小程序富文本样式处理/index.html","hash":"16d883ec775b2c68a2688eb5d6087507e2d3e4df","modified":1610157016306},{"_id":"public/2019/07/06/vue中面包屑使用心得/index.html","hash":"71f2f4c85a91de6743c3c254ae1e14fea433363a","modified":1610157016306},{"_id":"public/2019/06/25/解决transition过度在height-auto失效的问题/index.html","hash":"ecb56019d12faaa4a9fdcc07435dc6b387875c8e","modified":1610157016306},{"_id":"public/2019/06/10/最近项目遇到的问题解决记录/index.html","hash":"208531f55aacc894014c2d3a6e72617d0dd42fe6","modified":1610157016306},{"_id":"public/2019/03/17/Vue在项目中使用的一些心得（一）/index.html","hash":"aed9e10e65f54bb6f92588e13e823bc39bf2a185","modified":1610157016306},{"_id":"public/2019/01/31/vue项目总结/index.html","hash":"a31f57c0ad189667d9bcae2e319eaf69a74d6f8c","modified":1610157016306},{"_id":"public/2019/01/14/vue单页面新建tab页跳转的方法/index.html","hash":"a643e091d0ae242dfed644a60b4b2dfbaf281feb","modified":1610157016306},{"_id":"public/2018/12/31/vue-validate使用心得/index.html","hash":"bc39fedb6dc2394479b83811affe2b7c4b09a391","modified":1610157016306},{"_id":"public/2018/12/25/解决vue-awesome-swiper-loop属性失效的问题/index.html","hash":"d5adcfa7fc8147ab81edb28905b92c1ab7b6df82","modified":1610157016306},{"_id":"public/2018/12/23/vue-awesome-swiper如何竖向展示多条数据/index.html","hash":"90f8f971e58b52e1393b92daecd67ec855cbb18c","modified":1610157016306},{"_id":"public/2018/12/20/vue项目使用分页组件的心得/index.html","hash":"1ea1798a37a61b99c0129911d8aad3fff99655b1","modified":1610157016306},{"_id":"public/2018/11/13/记录一个页面width导致的bug/index.html","hash":"9c6b115d6c544f8d5840e13d4169846f86e03fba","modified":1610157016306},{"_id":"public/2018/10/28/flex在文本自适应中的一个小应用/index.html","hash":"aa41fb7c19c6c11664dafda7f5b2c94fdc4b581a","modified":1610157016306},{"_id":"public/2018/10/24/音频文件在vue中动态src绑定的问题/index.html","hash":"8295dc9d30b4d7ca3fb9eda2b6fceef3cf4d85bf","modified":1610157016306},{"_id":"public/2018/10/21/如何正确的在微信小程序里使用iconfont/index.html","hash":"a74225296143093a4b0a86e81dce7661339c1667","modified":1610157016306},{"_id":"public/2018/10/19/关于在一体机中浏览器手势缩放导致百度地图失效的问题/index.html","hash":"6d4a35fb9e3e6f9606a5b72ef4fcd516f7083e64","modified":1610157016306},{"_id":"public/2018/09/05/让a链接失效的那点事儿/index.html","hash":"9d15a503435eb6348158eecc5f3f2f3e36a6b8b2","modified":1610157016306},{"_id":"public/2018/09/02/记一次Transform属性导致的z-index失效问题/index.html","hash":"b82e988d9768031ac3e36e9113cc03fe2b246468","modified":1610157016306},{"_id":"public/2018/09/01/记录better-scroll滚动错位的一个问题/index.html","hash":"ecc4a3fd0ca7dade858b76b5112a6be984dfb46d","modified":1610157016306},{"_id":"public/2018/08/14/better-scroll使用中的一个问题/index.html","hash":"8f7ce098b96d3eb35ec99f2f61062fb8206bee8c","modified":1610157016306},{"_id":"public/2018/08/09/百度地图在移动端页面点击事件失效的解决/index.html","hash":"46a0126e0a94d0d1681b9664588cee7cb973b1b5","modified":1610157016306},{"_id":"public/2018/07/29/移动端页面遮罩层禁止页面滚动/index.html","hash":"14cc26c6463a5de084fabd40c11e458120322aab","modified":1610157016306},{"_id":"public/2018/07/24/flex元素定宽/index.html","hash":"fc2aeaab2ba1e53e509fb44f6311beebef84ca00","modified":1610157016306},{"_id":"public/2018/07/13/max-width在单行文字中的小技巧/index.html","hash":"7ce37743681746a0034b5997e8eaee9659051db8","modified":1610157016306},{"_id":"public/2018/07/12/百度地图在项目中使用的js小优化/index.html","hash":"13b59f3f8a758942063283b4277a8352cc0bdb31","modified":1610157016306},{"_id":"public/2018/07/02/浅析swiper初始化遇到的一个问题/index.html","hash":"08da339b11611e3572fdbf1ceb71a840e3fd31d5","modified":1610157016306},{"_id":"public/2018/06/27/解决js中onclick与ondblclick事件绑定冲突的问题/index.html","hash":"6220d067ceff1bbdbf43ccf758d0d5294beae0ab","modified":1610157016306},{"_id":"public/2018/06/22/Android-Studio布局加载器不显示的问题/index.html","hash":"af8cad0fdb9788d725ce6a3a0c445b1ba00567bb","modified":1610157016306},{"_id":"public/2018/06/22/浅析DOM事件/index.html","hash":"7adad2cd1875b62d5bf926705d96d253a3309406","modified":1610157016306},{"_id":"public/2018/06/20/百度地图信息窗口如何添加事件/index.html","hash":"b3b4e053dc2cde17f660dbf317a9447fc66c44b1","modified":1610157016306},{"_id":"public/2018/06/20/js中高德百度地图坐标转换/index.html","hash":"eec14e4372d174376cbb0e584f0230b3926a37da","modified":1610157016306},{"_id":"public/2018/06/19/css相关技巧总结-二/index.html","hash":"36246cb53953e27a93658a39fc809aa916faf5b2","modified":1610157016306},{"_id":"public/2018/06/16/css相关技巧总结/index.html","hash":"b150926772c8fcf81254d8820932c9c3667a8fde","modified":1610157016306},{"_id":"public/2018/06/14/关于移动端click事件延迟/index.html","hash":"54484cff4d9573f3b4a9cfc8e0b9a6062d7f5d41","modified":1610157016306},{"_id":"public/2018/06/11/input-focus在iOS上失效的解决方法/index.html","hash":"95d04b507895b9e8091990771d4b132ed9193a2a","modified":1610157016306},{"_id":"public/2018/06/04/浅析图片的懒加载/index.html","hash":"4cc16fa997d609109d7941aeb301216cd55c2256","modified":1610157016306},{"_id":"public/2018/06/01/JS模拟bind方法实现/index.html","hash":"27928a3166531de2ea29017d11881e5b9a1d05b1","modified":1610157016306},{"_id":"public/2018/05/31/浅析浏览器的回流与重绘/index.html","hash":"3b8966dbf5fadd4431648e5f30764d362f399a00","modified":1610157016306},{"_id":"public/2018/05/29/flex布局/index.html","hash":"40753d94bb6da56fdfb8425b086e009aa20a341e","modified":1610157016306},{"_id":"public/2018/05/22/关于input的一些问题解决方法分享/index.html","hash":"82df760b90148d23e0c38a7e2f7bd46447e47f68","modified":1610157016306},{"_id":"public/2018/05/16/关于js中-toFixed-的一个小坑/index.html","hash":"fd87f26729b025821af60c174a7763f2609c90f0","modified":1610157016306},{"_id":"public/2018/04/30/ios移动端部分手机不支持background-attachment-fixed-的解决办法/index.html","hash":"ee9676d6c8bb42c2d43999aa3f4e7431c43a516a","modified":1610157016306},{"_id":"public/2018/04/13/浅谈JS中的浅拷贝与深拷贝/index.html","hash":"744942e34c68b0ad08e4fe1442c6f208c7904dc1","modified":1610157016306},{"_id":"public/2018/04/02/css设置居中方案总结/index.html","hash":"eb5720c845fb92ce34186735170f20b080daa484","modified":1610157016306},{"_id":"public/2018/03/23/JS对select动态添加options操作（主流浏览器兼容）/index.html","hash":"bf8e0ae85cbad2692ef104374ee4f44bcaab1342","modified":1610157016306},{"_id":"public/2018/03/06/img-标签-访问图片-返回403-forbidden问题/index.html","hash":"0e96916c42e01e505aa8aa11696d7041d15b5b46","modified":1610157016306},{"_id":"public/2018/02/16/浅谈JS中的闭包/index.html","hash":"8b113c7977102f763ef8e62973efb5c78db3a53f","modified":1610157016306},{"_id":"public/archives/index.html","hash":"3b731c5ef211cabdceeea6200d57d74729b81404","modified":1610157016306},{"_id":"public/archives/page/2/index.html","hash":"e78c327075aee8e6bca689a0d197d26148ea5805","modified":1610157016306},{"_id":"public/archives/page/3/index.html","hash":"6127b8607c814abf60bb58f58773baad3e7f64f8","modified":1610157016306},{"_id":"public/archives/page/4/index.html","hash":"2e62634a58c02687adb63c2d2b0fed64c7c1e134","modified":1610157016306},{"_id":"public/archives/page/5/index.html","hash":"d3fa8e24309f9b82143d7b6faa2662cc1b8b43e8","modified":1610157016306},{"_id":"public/archives/page/6/index.html","hash":"4c1f0eb567f5e2c22cf5b742a1369d9ba8c8ea6a","modified":1610157016306},{"_id":"public/archives/2018/index.html","hash":"b61411275771a5b3392f25caf2584cfab3d3002f","modified":1610157016306},{"_id":"public/archives/2018/page/2/index.html","hash":"50293544d0a0666f4983ef684dbc937eb62055b6","modified":1610157016306},{"_id":"public/archives/2018/page/3/index.html","hash":"27cd1a8a0727f760b7aa2fef78cd6ce49622e168","modified":1610157016306},{"_id":"public/archives/2018/page/4/index.html","hash":"9384accc8cafde88b21fcd6afd3fe29b55f19dfc","modified":1610157016306},{"_id":"public/archives/2018/02/index.html","hash":"c27cfbe57b7d48e6f6e368f9f0876e06556f27c0","modified":1610157016306},{"_id":"public/archives/2018/03/index.html","hash":"6d328794d5a0179b10288e2bcd935a590a751ecf","modified":1610157016306},{"_id":"public/archives/2018/04/index.html","hash":"da00b9856ca498b1f6ba82d11ea3026a07d9eb94","modified":1610157016306},{"_id":"public/archives/2018/05/index.html","hash":"676c453ba360cbec140e448fa8ff4ea5717226ba","modified":1610157016306},{"_id":"public/archives/2018/06/index.html","hash":"ac76043a677316c84ee70462a31959ee386a845b","modified":1610157016306},{"_id":"public/archives/2018/06/page/2/index.html","hash":"830726805791e46081edc39c5ee4c21c13b593bf","modified":1610157016306},{"_id":"public/archives/2018/07/index.html","hash":"93063d64030a7a263ab9240b74ef200a54f76ce1","modified":1610157016306},{"_id":"public/archives/2018/08/index.html","hash":"dd5d3299423490ffb033b7d0f682a7a5b947b9a7","modified":1610157016306},{"_id":"public/archives/2018/09/index.html","hash":"895f70d79358436df1be4fe486d422e8e2a68adf","modified":1610157016306},{"_id":"public/archives/2018/10/index.html","hash":"3c4e60fb323054e64576e414fd21c34323be3b44","modified":1610157016306},{"_id":"public/archives/2018/11/index.html","hash":"c6d654b5c93a928379d2dd92f66893118a07bdd8","modified":1610157016306},{"_id":"public/archives/2018/12/index.html","hash":"16aa4d78e006043eda9aa9301185581735f98205","modified":1610157016306},{"_id":"public/archives/2019/index.html","hash":"ce4715c0dd2267ab19f98dc4f26de9472fb3ba0d","modified":1610157016306},{"_id":"public/archives/2019/page/2/index.html","hash":"1f7db9b14e61d5c05d615712a6ca9e65d1f46ea3","modified":1610157016306},{"_id":"public/archives/2019/01/index.html","hash":"0d18e3f36fa7dc291d3c3b569592f5431a20b467","modified":1610157016306},{"_id":"public/archives/2019/03/index.html","hash":"f765ec0024efbebdcc76a817471a503b604c15ab","modified":1610157016306},{"_id":"public/archives/2019/06/index.html","hash":"e81f937659ea7b221d71c1bd5726b028249d7a3e","modified":1610157016306},{"_id":"public/archives/2019/07/index.html","hash":"4dd00ce7c6a5871a63ec06f86be0b2e804619f64","modified":1610157016306},{"_id":"public/archives/2019/08/index.html","hash":"256b2dcd7f8d33fbbc561d7fb8e682d29b010b83","modified":1610157016306},{"_id":"public/archives/2019/09/index.html","hash":"690e37cd59a5081be83c71ac3ef20653c80c1501","modified":1610157016306},{"_id":"public/archives/2019/11/index.html","hash":"1341387201761530afa13de5bc2693f5997e9ad6","modified":1610157016306},{"_id":"public/archives/2020/index.html","hash":"7e62b7dace261a16a1d7a8f336d7709fe3dfd57a","modified":1610157016306},{"_id":"public/archives/2020/01/index.html","hash":"e03b5a0ca3a05e3840653490f0051d7195a05ced","modified":1610157016306},{"_id":"public/archives/2020/04/index.html","hash":"cb5066656d8f5ad981cd76c5fa3ed7802a511e51","modified":1610157016306},{"_id":"public/archives/2021/index.html","hash":"fc4b369658ce2809010519d00a01de650671850d","modified":1610157016306},{"_id":"public/archives/2021/01/index.html","hash":"7a76d86bded820efa7b058861222464d98e14dfa","modified":1610157016306},{"_id":"public/categories/Android/index.html","hash":"cfb36b45a1a8d97bfb374b16cc2370a7960d4e97","modified":1610157016306},{"_id":"public/categories/js/index.html","hash":"c5ae22e928ca5f434f4773794335e6a52b1b5902","modified":1610157016306},{"_id":"public/categories/js/page/2/index.html","hash":"24925b65a3529d874992e20c9f18d1ee11928b42","modified":1610157016306},{"_id":"public/categories/vue/index.html","hash":"0bf7c6606c520e5efb26fa27d4c5cc0be0c55b36","modified":1610157016306},{"_id":"public/categories/css/index.html","hash":"2aa46c81e8b3c3e28ccddc4e3afe35a9a3ab0fa2","modified":1610157016306},{"_id":"public/categories/html/index.html","hash":"426c317cce7f460f33f2c246a091f5de61bc7212","modified":1610157016306},{"_id":"public/categories/img/index.html","hash":"3c839f22ca0f4e1cfe9956cb99d89178f0bb1445","modified":1610157016306},{"_id":"public/categories/input/index.html","hash":"046150a29008e162362f91f961fc1c126e2bc739","modified":1610157016306},{"_id":"public/categories/vue/vue-awesome-swiper/index.html","hash":"a505dd5a167f940336011359321ea3405bc8db9d","modified":1610157016306},{"_id":"public/categories/css/flex/index.html","hash":"f04ed5388e78dd12fceb0871850d901be316907b","modified":1610157016306},{"_id":"public/categories/css/页面布局/index.html","hash":"34467eb162a2650f292337f354205edf12fdf209","modified":1610157016306},{"_id":"public/categories/vue/vue-router/index.html","hash":"6076a7a8243f194510a977fa047358a41f10d689","modified":1610157016306},{"_id":"public/categories/vue/vue-validate/index.html","hash":"49fefafb5694b66d63b83d2cbceed93484b766a2","modified":1610157016306},{"_id":"public/categories/vue/pagination/index.html","hash":"7e445b14c959b51c2d5ff117434f0226009c22e7","modified":1610157016306},{"_id":"public/categories/krpano-js/index.html","hash":"4d6c3e35db297ec9b16dfcdd211fa8df4756923f","modified":1610157016306},{"_id":"public/categories/IntersectionObserver/index.html","hash":"025b489748f4e93414ec6c4b4fb58f16fc71d373","modified":1610157016306},{"_id":"public/categories/html/data/index.html","hash":"a3ea707e4d9ddd54ee4c5ca58cdb0cd7acecbb20","modified":1610157016306},{"_id":"public/categories/Mobile-click/index.html","hash":"8ed0c039dd2e515dd6d7e0401008f15cf4e3d463","modified":1610157016306},{"_id":"public/categories/一体机/index.html","hash":"b2e690fccd7717b5782ad33045bd0bb682fc2574","modified":1610157016306},{"_id":"public/categories/微信小程序/index.html","hash":"9b268f204c54a57c366a99e4b1ad6941053c39bc","modified":1610157016306},{"_id":"public/categories/js/deepCopy/index.html","hash":"2cbbac06055ca27059fd16059021be6f2c6e0c38","modified":1610157016306},{"_id":"public/categories/vue/components/index.html","hash":"8f846709e1f37bf0b7e3fe41713ad12abadb82dd","modified":1610157016306},{"_id":"public/categories/uni-app/index.html","hash":"7d71b6efb4ad1ed7546eab95e3b99c1b6af13a43","modified":1610157016306},{"_id":"public/categories/browser/index.html","hash":"71a80e7296f2773997494fb72c8b9cb8d24b8188","modified":1610157016306},{"_id":"public/categories/chrome/index.html","hash":"6f4811262739cdf45d206700099a3a5dff32b3c6","modified":1610157016306},{"_id":"public/categories/css/transition/index.html","hash":"eefe487e451501a8519e0adaa08fb21bc790be2f","modified":1610157016306},{"_id":"public/categories/问题解决/index.html","hash":"85f5fe262f98d1baba4ed68cacd1b02fcb876036","modified":1610157016306},{"_id":"public/categories/a/index.html","hash":"18ca64392d797db2657464c447dd040e3a5cf36a","modified":1610157016306},{"_id":"public/categories/百度地图/index.html","hash":"550d764073c836c539848d22dd69205b8e90f9cd","modified":1610157016306},{"_id":"public/categories/krpano-js/全景漫游/index.html","hash":"c739f7be561cd5a5979b81c679cab2ca8b86ed53","modified":1610157016306},{"_id":"public/categories/elementUI/index.html","hash":"a66fcf99e13dde8febb62b3e897c33408e05a2e8","modified":1610157016306},{"_id":"public/categories/IntersectionObserver/BOM/index.html","hash":"9d10e9fb02b098cf99441b9635b3eddd2ca2ac1b","modified":1610157016306},{"_id":"public/categories/Vue/index.html","hash":"13231834db66b790ad0adf6ee7be0623d79217a0","modified":1610157016306},{"_id":"public/categories/html/data/jq/index.html","hash":"69d76e10ad4707a41ec4ee0ba0b0a0bc36dec39e","modified":1610157016306},{"_id":"public/categories/vue/h5-audio/index.html","hash":"d0df8476377d5a3f180e2a5f7faf9f0f931a7790","modified":1610157016306},{"_id":"public/categories/一体机/win7触摸屏/index.html","hash":"aab9258f1d63cef5f2839d039a4ecf7b19acec62","modified":1610157016306},{"_id":"public/categories/微信小程序/css3字体/index.html","hash":"103558063a36a392e5387e885ab774d856d0d5ad","modified":1610157016306},{"_id":"public/categories/uni-app/微信小程序/index.html","hash":"b8f0995d449c2f3e2844efb76b6341b775c6963a","modified":1610157016306},{"_id":"public/categories/chrome/navigator/index.html","hash":"2e842152702d2c004c827d8646e4e4b8cf901a0a","modified":1610157016306},{"_id":"public/categories/a/html/index.html","hash":"2393a925e5354b9a008e3ba76819f290d11a25bb","modified":1610157016306},{"_id":"public/categories/百度地图/css/index.html","hash":"60dfa5a7e6a4a88f0948cb8c3952f4177fd51ec9","modified":1610157016306},{"_id":"public/categories/elementUI/scroll/index.html","hash":"afdc964cd618da1eebe7a21f2038d652ca1040b7","modified":1610157016306},{"_id":"public/categories/Vue/前端技术栈/index.html","hash":"89011e74aac55396c32a4bb6dcaa15062434f019","modified":1610157016306},{"_id":"public/index.html","hash":"c45900b284190be2a05ce24cd757b2db93a3c995","modified":1610157016306},{"_id":"public/page/2/index.html","hash":"3cf77aa4bcba9c1fec4865eab79223cddbbe09ef","modified":1610157016306},{"_id":"public/page/3/index.html","hash":"4e9f60e2c3025eeecc32a00aeab7aed06665d97d","modified":1610157016306},{"_id":"public/page/4/index.html","hash":"69fafa71edb483ba6f348cadd937500b946a8978","modified":1610157016306},{"_id":"public/page/5/index.html","hash":"cd8cfd9896eab2329cd1e7f3bd4c2d2930f3fcec","modified":1610157016306},{"_id":"public/page/6/index.html","hash":"60c266faa3cc008421f9c0271ce319bcb74033fb","modified":1610157016306},{"_id":"public/tags/Android-Studio/index.html","hash":"f0640c2e86fef3ee87843b4a243873bd278e6d51","modified":1610157016306},{"_id":"public/tags/原生js/index.html","hash":"0258d675982443283c19fe498eecfa3a846140b5","modified":1610157016306},{"_id":"public/tags/js/index.html","hash":"b4b24581d35ecc8cb31a6fec24c28b11528b1b4d","modified":1610157016306},{"_id":"public/tags/js/page/2/index.html","hash":"c8926f65067b2160bfae56a2082028dd77eec8c0","modified":1610157016306},{"_id":"public/tags/vue/index.html","hash":"da46f2ba79e82fa01213747400d189762aa3eea4","modified":1610157016306},{"_id":"public/tags/better-scroll/index.html","hash":"37a19a78eb6bebaa432b8c97a097a58b91f06df8","modified":1610157016306},{"_id":"public/tags/css/index.html","hash":"7890038485cd57557aee923de0a67e48f78647bb","modified":1610157016306},{"_id":"public/tags/flex/index.html","hash":"e616669f5fdd00d094682c663d5334be3dec0271","modified":1610157016306},{"_id":"public/tags/html/index.html","hash":"9c6806a447503cb120acbd42f77ebb6f7569054c","modified":1610157016306},{"_id":"public/tags/data/index.html","hash":"ce7922de00e3b34774f5e4ac637cbf5aaa26e642","modified":1610157016306},{"_id":"public/tags/jq/index.html","hash":"08a874036aac9b9e916caa50127308c3f2fa584f","modified":1610157016306},{"_id":"public/tags/静态资源/index.html","hash":"2b4989b5c4b7e238ce954f312dd6b6deff9903e9","modified":1610157016306},{"_id":"public/tags/移动端页面/index.html","hash":"f0f667f9b1a8b1f82a2ec4f86d955ae0b01a87fc","modified":1610157016306},{"_id":"public/tags/css3/index.html","hash":"6aebc07d794fbe2b24ea7ee55d96d88206846e2c","modified":1610157016306},{"_id":"public/tags/百度地图API/index.html","hash":"d9f788556d76ba5a95914ebe5c8cbde5e7536ef4","modified":1610157016306},{"_id":"public/tags/vue-awesome-swiper/index.html","hash":"9cfd28d8a899486b7217d94276760504ca1df9e2","modified":1610157016306},{"_id":"public/tags/vue-router/index.html","hash":"c59ebe158d52f1a48c6da393fbebf3eb6240f534","modified":1610157016306},{"_id":"public/tags/vue-validate/index.html","hash":"04f7f6cf1dbf167589ed03bfa6e9722873cb18c7","modified":1610157016306},{"_id":"public/tags/vuejs-paginate/index.html","hash":"5b154076827d777667b01bbc944e896e7b8b1fa5","modified":1610157016306},{"_id":"public/tags/input/index.html","hash":"2637fb276a9a56e01b8aa7565495ea49a14bd083","modified":1610157016306},{"_id":"public/tags/bug/index.html","hash":"915ff883c8894d600d5951a2f91f0b790d9399b9","modified":1610157016306},{"_id":"public/tags/krpano-js/index.html","hash":"be8c9fc6696fa11f4112896d063d7af002281ba3","modified":1610157016306},{"_id":"public/tags/全景漫游/index.html","hash":"e4fda95cb492a0471764ab9230cc38bff9dd2045","modified":1610157016306},{"_id":"public/tags/IntersectionObserver/index.html","hash":"f2618e8a9e6c244943784c89f7e4484f75eb9285","modified":1610157016306},{"_id":"public/tags/浏览器API/index.html","hash":"f1482d3cfce8b466bc94c4f1f4d64c3a273e4ef3","modified":1610157016306},{"_id":"public/tags/js基础/index.html","hash":"a69c24482a0db264627bb744c4d84f38ccdea29b","modified":1610157016306},{"_id":"public/tags/交互-手势缩放/index.html","hash":"807b1d5edf1c429da18a55d94d4acf372dec7952","modified":1610157016306},{"_id":"public/tags/微信小程序-iconfont/index.html","hash":"e76eb6ca11ddb21f8c0e8131578452f3187ddd94","modified":1610157016306},{"_id":"public/tags/deepCopy/index.html","hash":"8aa4a0483dce193f8d6394d3c047cabebddea688","modified":1610157016306},{"_id":"public/tags/components/index.html","hash":"79a99cedf5fafb00f4af37725f85d41660b74083","modified":1610157016306},{"_id":"public/tags/uni-app/index.html","hash":"91f24c0847301519a2cfc005ee10d7f719ace5e7","modified":1610157016306},{"_id":"public/tags/微信小程序/index.html","hash":"4427c66892f6f8aba04172d5f8a5897581b3e9b4","modified":1610157016306},{"_id":"public/tags/DOM/index.html","hash":"0dff4341323e07ee7b5821e89571e67fed30c052","modified":1610157016306},{"_id":"public/tags/问题解决/index.html","hash":"b32adfc2f1484e8cfabfba0d5cde894b9a8a7d1c","modified":1610157016306},{"_id":"public/tags/swiper/index.html","hash":"b06ed09b6024f33ae9610766bf44a1a5e6c9b6b0","modified":1610157016306},{"_id":"public/tags/页面优化/index.html","hash":"a65782c08c782f8342bd6cd7b9c20a4d2ccb8743","modified":1610157016306},{"_id":"public/tags/browser/index.html","hash":"071dd491d6901927ff4f0abdf8e885127f502ec2","modified":1610157016306},{"_id":"public/tags/closure/index.html","hash":"ed72d29e5d2ddffc76b312ade3556ad3770acfaa","modified":1610157016306},{"_id":"public/tags/js特性/index.html","hash":"44a2b750f7a17a8fa41a25ff1e90e0a5ef214d3e","modified":1610157016306},{"_id":"public/tags/chrome/index.html","hash":"0c833e380d5e4479e268db37b29120abfa5429e3","modified":1610157016306},{"_id":"public/tags/navigator/index.html","hash":"09f2698dada71fec6c607882bf91851bc326fdd3","modified":1610157016306},{"_id":"public/tags/百度地图/index.html","hash":"6549950628ee1606ba4d17abe37df617ecd27a45","modified":1610157016306},{"_id":"public/tags/移动端/index.html","hash":"ce74b932937ed28e13b22508a005250b1c1383f2","modified":1610157016306},{"_id":"public/tags/事件绑定/index.html","hash":"cf0609edb30d428c5bba71809d791bddb2ac1e9c","modified":1610157016306},{"_id":"public/tags/transition/index.html","hash":"9b4583068647fa018d3a910fe622258742de05bd","modified":1610157016306},{"_id":"public/tags/elementUI/index.html","hash":"96e956bc15090b9bc76ac8c5fda0e43f0f54cd0e","modified":1610157016306},{"_id":"public/tags/scroll/index.html","hash":"75cd1432dcbba147669ec5cd0bd8017ad1bb06f7","modified":1610157016306},{"_id":"public/tags/Vue/index.html","hash":"a095843e17d6a2bd35046c7fa14698b8c32c5416","modified":1610157016306},{"_id":"public/tags/前端技术栈/index.html","hash":"59701f7809448e5c9d1be26d699926612b87aa63","modified":1610157016306},{"_id":"public/tags/h5-audio/index.html","hash":"c0dead3326c6328975e3c1689e2c253f62a64f43","modified":1610157016306},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610157016306},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610157016306},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1610157016306},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610157016306},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610157016306},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610157016306},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610157016306},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610157016306},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610157016306},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610157016306},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610157016306},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610157016306},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610157016306},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610157016306},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610157016306},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1610157016306},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1610157016306},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1610157016306},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1610157016306},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1610157016306},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610157016306},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610157016306},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610157016306},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610157016306},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610157016306},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610157016306},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1610157016306},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1610157016306},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1610157016306},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1610157016306},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1610157016306},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610157016306},{"_id":"public/image/avatar.jpg","hash":"5320eed022d42f6cff4b3744689de45d90650893","modified":1610157016306},{"_id":"public/images/avatar.jpg","hash":"5320eed022d42f6cff4b3744689de45d90650893","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1610157016306},{"_id":"public/css/main.css","hash":"99b0766b260a39c753cec67427706cd3832501c1","modified":1610157016306},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1610157016306},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1610157016306},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1610157016306},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1610157016306},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1610157016306},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1610157016306},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1610157016306},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1610157016306},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1610157016306},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1610157016306},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1610157016306},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1610157016306},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1610157016306},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1610157016306},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1610157016306},{"_id":"public/lib/fastclick/README.html","hash":"2eae5746ab336ee9cbf465e50c3fd0c24f2d894c","modified":1610157016306},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1610157016306},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1610157016306},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a3bb9caee25c163fa20a156ee9235d1603d79b28","modified":1610157016306},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"ba3f2d68b551001c4dac5f9c9f21955b0fb3158f","modified":1610157016306},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1610157016306},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1610157016306},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1610157016306},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1610157016306},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1610157016306},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1610157016306},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1610157016306},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610157016306},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1610157016306},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1610157016306},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1610157016306},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1610157016306},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1610157016306},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1610157016306},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1610157016306},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1610157016306},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1610157016306},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610157016306},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1610157016306},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1610157016306},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1610157016306},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1610157016306},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610157016306},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1610157016306},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1610157016306},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1610157016306},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1610157016306},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1610157016306},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1610157016306},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1610157016306},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1610157016306},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1610157016306},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1610157016306},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1610157016306},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1610157016306}],"Category":[{"name":"Android","_id":"ckjp1wxl70004msvi90ooe7fm"},{"name":"js","_id":"ckjp1wxlc000bmsvi3p5c3026"},{"name":"vue","_id":"ckjp1wxlk000mmsvigeb39pjq"},{"name":"css","_id":"ckjp1wxlp000ymsvigft56yz5"},{"name":"html","_id":"ckjp1wxm90020msviby1ngso2"},{"name":"img","_id":"ckjp1wxmd0029msvi4x2zavta"},{"name":"input","_id":"ckjp1wxmi002fmsvi7byg1c5w"},{"name":"vue-awesome-swiper","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxmk002nmsvia05985z5"},{"name":"flex","parent":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxmm002umsvi25c75ma0"},{"name":"页面布局","parent":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxmq0032msvievsiajd7"},{"name":"vue-router","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxms0038msvi9k0ldf81"},{"name":"vue-validate","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxmu003emsviev6e48g5"},{"name":"pagination","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxn10041msvi0cidhmav"},{"name":"krpano.js","_id":"ckjp1wxn4004bmsvif2xs1rxi"},{"name":"IntersectionObserver","_id":"ckjp1wxn6004jmsvi2klv9mw4"},{"name":"data-","parent":"ckjp1wxm90020msviby1ngso2","_id":"ckjp1wxn9004rmsvi2uv58fqj"},{"name":"Mobile-click","_id":"ckjp1wxnb004zmsvi6ltucqhq"},{"name":"一体机","_id":"ckjp1wxnd0057msvi5vq92v5e"},{"name":"微信小程序","_id":"ckjp1wxne005emsvi8v7x4wm3"},{"name":"deepCopy","parent":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxnf005kmsvif28vczun"},{"name":"components","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxng005qmsvi6z6k2vgu"},{"name":"uni-app","_id":"ckjp1wxnj005xmsvi8pkr3rdv"},{"name":"问题解决","_id":"ckjp1wxnk0062msvifhgrbqx8"},{"name":"browser","_id":"ckjp1wxnl0067msvibaqc4389"},{"name":"chrome","_id":"ckjp1wxno006amsvi3lmy2rc7"},{"name":"transition","parent":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxnp006fmsvi34qjbecg"},{"name":"a","_id":"ckjp1wxnr006imsvigoxg8b7a"},{"name":"百度地图","_id":"ckjp1wxnt006mmsvi7cywdgt3"},{"name":"全景漫游","parent":"ckjp1wxn4004bmsvif2xs1rxi","_id":"ckjp1wxnu006qmsvih03mdm51"},{"name":"elementUI","_id":"ckjp1wxnv006umsvi4qibdqij"},{"name":"BOM","parent":"ckjp1wxn6004jmsvi2klv9mw4","_id":"ckjp1wxnw006zmsvi09rmekeh"},{"name":"Vue","_id":"ckjp1wxnx0072msvib876b5rg"},{"name":"jq","parent":"ckjp1wxn9004rmsvi2uv58fqj","_id":"ckjp1wxny0077msvi58643418"},{"name":"h5 audio","parent":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxny007cmsvi42wzgwkh"},{"name":"win7触摸屏","parent":"ckjp1wxnd0057msvi5vq92v5e","_id":"ckjp1wxnz007gmsviawom5vbl"},{"name":"css3字体","parent":"ckjp1wxne005emsvi8v7x4wm3","_id":"ckjp1wxo0007mmsvi4fzu1ioh"},{"name":"微信小程序","parent":"ckjp1wxnj005xmsvi8pkr3rdv","_id":"ckjp1wxo2007smsvi8j54ahg0"},{"name":"navigator","parent":"ckjp1wxno006amsvi3lmy2rc7","_id":"ckjp1wxo3007xmsvi9oxmcbb7"},{"name":"html","parent":"ckjp1wxnr006imsvigoxg8b7a","_id":"ckjp1wxo30082msvi8ftg61sg"},{"name":"css","parent":"ckjp1wxnt006mmsvi7cywdgt3","_id":"ckjp1wxo40088msviavbi5ib0"},{"name":"scroll","parent":"ckjp1wxnv006umsvi4qibdqij","_id":"ckjp1wxo5008cmsvi8yhr0n4d"},{"name":"前端技术栈","parent":"ckjp1wxnx0072msvib876b5rg","_id":"ckjp1wxo6008jmsvi09v84ymd"}],"Data":[],"Page":[{"title":"个人技能树","date":"2018-06-01T02:19:54.000Z","_content":"\n# 前端技能\n\n## HTML\n* 符合兼容规范的文档声明\n\n* 熟悉语义化标签的使用\n* 熟悉canvas、websocket、web本地存储、以及H5元素相关的新特性和新技术\n* 规范整洁的页面布局结构代码\n\n\n## CSS\n* 符合相关规范的样式表申明\n* 熟悉CSS样式表normalize，按前端规范统一命名以及初始化\n\n* 熟练掌握css2.0的相关选择器，以及相关样式属性的表现，也能在移动端项目中，熟练运用CSS3相关的新属性，简单直接的解决问题\n* 掌握常见的页面布局，熟悉项目开发中页面布局相关的一些坑点\n* 熟悉css动画的运用，了解浏览器对于CSS动画的渲染优化，以及与js动画的性能差异\n\n\n## 原生js\n\n### BOM\n\n* 了解浏览器如何进行js脚本的解析，dom文档的加载过程，简单的渲染过程的优化\n\n* 了解常见的请求和响应如何处理,熟悉与后台接口的数据通信与交互，熟悉浏览器与服务器交互语言json的使用\n\n### DOM\n\n* 熟练使用原生js操作dom，熟悉相关交互事件的特性以及处理\n\n* 了解浏览器之间对于dom API 的实现差异，以及相关的兼容特性\n* 熟练使用chrome浏览器的debug功能 能够对于开发中遇到的问题 及时的进行调试 迅速定位到问题发生的位置  及时处理\n\n### ECMAscript\n\n* 了解ECMAscript的发展历史，以及各个版本的新增功能\n\n* 掌握js语言的语法基础以及相关内置api的使用\n* 熟悉js相关的语法特性，函数、this指向、作用域、以及由对象原型引申的继承相关特性\n* 熟悉js运行特点，单线程，异步操作，回调函数的不简洁，使用Promise以同步编写的方式，异步获取数据的实质来简化数据渲染的操作\n* 了解ES6相关语法知识，对于新的API，空闲时间也进行尝试，拥抱趋势和未来\n\n\n## js流行框架\n\n* 熟练使用jquery，包括适合PC端的1.X版本以及移动端的2.X版本，轻量级的相似框架zepto，对于其源码实现，也有涉猎，使用过jq周边的UI框架如jqUI和easyui\n\n* 目前项目中后台管理的前端开发框架layui，因为辅助过开发，前台页面里也有用过它的相关独立组件，如分页和弹层，所以也能熟练使用\n* 人生中使用的第一个双向绑定的框架 knockout 在池州旅游上报里用到过，当时表单数量众多，双向绑定的特性帮助开发解决了很大的效率问题\n* weui 在周边好旅游项目里使用到的一款基于jq的微信定制的ui框架 好旅游的项目目前一直在运行并且维护，框架对于业务的支撑能起到稳定的作用，其中遇到的一个有问题的地方就是，日期选择组件的样式需要自己定制，不然容易出现布局紊乱。\n* vue和react 目前很火的 周边生态区域稳定的前端框架，且均涉及native端，平时项目开发中不太涉及，但自己平时私下里有深入学习过，二者比较类似，都有虚拟dom，都有状态管理架构，只是vue比较还原传统的前端开发方式，而react则全是在写js，前期写起来会有些不太习惯，但据说写熟练了以后会特别爽。学习是个持续的过程，自己空余的时间也会保持对这两个框架的关注，自己平时利用空闲时间，尝试用vue vue-router vux axios相关技术，仿写了一个cnode的论坛小demo，详情戳[这里](https://github.com/bettermu/CNode-vue-project)\n\n\n## nodeJS\n* 熟悉nvm npm 相关的node生态，能够搭建一个简易的node服务器，平时开发调试的过程中，所见即所得，提升开发效率\n\n* 了解node相关框架的使用 express 到koa 到阿里的egg 都有所涉猎，兴趣所趋 会使用node进行简单的爬虫数据处理\n* 最近在学习Node作为java后端和传统前端中间数据处理层的知识，利用Node的特性，将获取来的后台数据，按照前台需要的方式进行加工，能够更好地进行前后端分离式开发的体验\n\n\n## 其他\n* 了解java语言 java springMVC相关的技术 增强前后端联调的效率\n\n* 熟悉使用相关开发的IDE 如sublime vscode eclipse idea 能够简单配置开发所需环境，遇到问题能够自主搜索答案，独立解决\n* 了解mysql等相关数据库的语言，能进行简单的增删改查操作 了解linux nginx相关配置\n\n","source":"about/index.md","raw":"---\ntitle: 个人技能树\ndate: 2018-06-01 10:19:54\n---\n\n# 前端技能\n\n## HTML\n* 符合兼容规范的文档声明\n\n* 熟悉语义化标签的使用\n* 熟悉canvas、websocket、web本地存储、以及H5元素相关的新特性和新技术\n* 规范整洁的页面布局结构代码\n\n\n## CSS\n* 符合相关规范的样式表申明\n* 熟悉CSS样式表normalize，按前端规范统一命名以及初始化\n\n* 熟练掌握css2.0的相关选择器，以及相关样式属性的表现，也能在移动端项目中，熟练运用CSS3相关的新属性，简单直接的解决问题\n* 掌握常见的页面布局，熟悉项目开发中页面布局相关的一些坑点\n* 熟悉css动画的运用，了解浏览器对于CSS动画的渲染优化，以及与js动画的性能差异\n\n\n## 原生js\n\n### BOM\n\n* 了解浏览器如何进行js脚本的解析，dom文档的加载过程，简单的渲染过程的优化\n\n* 了解常见的请求和响应如何处理,熟悉与后台接口的数据通信与交互，熟悉浏览器与服务器交互语言json的使用\n\n### DOM\n\n* 熟练使用原生js操作dom，熟悉相关交互事件的特性以及处理\n\n* 了解浏览器之间对于dom API 的实现差异，以及相关的兼容特性\n* 熟练使用chrome浏览器的debug功能 能够对于开发中遇到的问题 及时的进行调试 迅速定位到问题发生的位置  及时处理\n\n### ECMAscript\n\n* 了解ECMAscript的发展历史，以及各个版本的新增功能\n\n* 掌握js语言的语法基础以及相关内置api的使用\n* 熟悉js相关的语法特性，函数、this指向、作用域、以及由对象原型引申的继承相关特性\n* 熟悉js运行特点，单线程，异步操作，回调函数的不简洁，使用Promise以同步编写的方式，异步获取数据的实质来简化数据渲染的操作\n* 了解ES6相关语法知识，对于新的API，空闲时间也进行尝试，拥抱趋势和未来\n\n\n## js流行框架\n\n* 熟练使用jquery，包括适合PC端的1.X版本以及移动端的2.X版本，轻量级的相似框架zepto，对于其源码实现，也有涉猎，使用过jq周边的UI框架如jqUI和easyui\n\n* 目前项目中后台管理的前端开发框架layui，因为辅助过开发，前台页面里也有用过它的相关独立组件，如分页和弹层，所以也能熟练使用\n* 人生中使用的第一个双向绑定的框架 knockout 在池州旅游上报里用到过，当时表单数量众多，双向绑定的特性帮助开发解决了很大的效率问题\n* weui 在周边好旅游项目里使用到的一款基于jq的微信定制的ui框架 好旅游的项目目前一直在运行并且维护，框架对于业务的支撑能起到稳定的作用，其中遇到的一个有问题的地方就是，日期选择组件的样式需要自己定制，不然容易出现布局紊乱。\n* vue和react 目前很火的 周边生态区域稳定的前端框架，且均涉及native端，平时项目开发中不太涉及，但自己平时私下里有深入学习过，二者比较类似，都有虚拟dom，都有状态管理架构，只是vue比较还原传统的前端开发方式，而react则全是在写js，前期写起来会有些不太习惯，但据说写熟练了以后会特别爽。学习是个持续的过程，自己空余的时间也会保持对这两个框架的关注，自己平时利用空闲时间，尝试用vue vue-router vux axios相关技术，仿写了一个cnode的论坛小demo，详情戳[这里](https://github.com/bettermu/CNode-vue-project)\n\n\n## nodeJS\n* 熟悉nvm npm 相关的node生态，能够搭建一个简易的node服务器，平时开发调试的过程中，所见即所得，提升开发效率\n\n* 了解node相关框架的使用 express 到koa 到阿里的egg 都有所涉猎，兴趣所趋 会使用node进行简单的爬虫数据处理\n* 最近在学习Node作为java后端和传统前端中间数据处理层的知识，利用Node的特性，将获取来的后台数据，按照前台需要的方式进行加工，能够更好地进行前后端分离式开发的体验\n\n\n## 其他\n* 了解java语言 java springMVC相关的技术 增强前后端联调的效率\n\n* 熟悉使用相关开发的IDE 如sublime vscode eclipse idea 能够简单配置开发所需环境，遇到问题能够自主搜索答案，独立解决\n* 了解mysql等相关数据库的语言，能进行简单的增删改查操作 了解linux nginx相关配置\n\n","updated":"2018-06-01T02:29:15.905Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckjp1wxky0000msvi1ejkebun","content":"<h1 id=\"前端技能\"><a href=\"#前端技能\" class=\"headerlink\" title=\"前端技能\"></a>前端技能</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li><p>符合兼容规范的文档声明</p>\n</li>\n<li><p>熟悉语义化标签的使用</p>\n</li>\n<li><p>熟悉canvas、websocket、web本地存储、以及H5元素相关的新特性和新技术</p>\n</li>\n<li><p>规范整洁的页面布局结构代码</p>\n</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><p>符合相关规范的样式表申明</p>\n</li>\n<li><p>熟悉CSS样式表normalize，按前端规范统一命名以及初始化</p>\n</li>\n<li><p>熟练掌握css2.0的相关选择器，以及相关样式属性的表现，也能在移动端项目中，熟练运用CSS3相关的新属性，简单直接的解决问题</p>\n</li>\n<li><p>掌握常见的页面布局，熟悉项目开发中页面布局相关的一些坑点</p>\n</li>\n<li><p>熟悉css动画的运用，了解浏览器对于CSS动画的渲染优化，以及与js动画的性能差异</p>\n</li>\n</ul>\n<h2 id=\"原生js\"><a href=\"#原生js\" class=\"headerlink\" title=\"原生js\"></a>原生js</h2><h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><ul>\n<li><p>了解浏览器如何进行js脚本的解析，dom文档的加载过程，简单的渲染过程的优化</p>\n</li>\n<li><p>了解常见的请求和响应如何处理,熟悉与后台接口的数据通信与交互，熟悉浏览器与服务器交互语言json的使用</p>\n</li>\n</ul>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><ul>\n<li><p>熟练使用原生js操作dom，熟悉相关交互事件的特性以及处理</p>\n</li>\n<li><p>了解浏览器之间对于dom API 的实现差异，以及相关的兼容特性</p>\n</li>\n<li><p>熟练使用chrome浏览器的debug功能 能够对于开发中遇到的问题 及时的进行调试 迅速定位到问题发生的位置  及时处理</p>\n</li>\n</ul>\n<h3 id=\"ECMAscript\"><a href=\"#ECMAscript\" class=\"headerlink\" title=\"ECMAscript\"></a>ECMAscript</h3><ul>\n<li><p>了解ECMAscript的发展历史，以及各个版本的新增功能</p>\n</li>\n<li><p>掌握js语言的语法基础以及相关内置api的使用</p>\n</li>\n<li><p>熟悉js相关的语法特性，函数、this指向、作用域、以及由对象原型引申的继承相关特性</p>\n</li>\n<li><p>熟悉js运行特点，单线程，异步操作，回调函数的不简洁，使用Promise以同步编写的方式，异步获取数据的实质来简化数据渲染的操作</p>\n</li>\n<li><p>了解ES6相关语法知识，对于新的API，空闲时间也进行尝试，拥抱趋势和未来</p>\n</li>\n</ul>\n<h2 id=\"js流行框架\"><a href=\"#js流行框架\" class=\"headerlink\" title=\"js流行框架\"></a>js流行框架</h2><ul>\n<li><p>熟练使用jquery，包括适合PC端的1.X版本以及移动端的2.X版本，轻量级的相似框架zepto，对于其源码实现，也有涉猎，使用过jq周边的UI框架如jqUI和easyui</p>\n</li>\n<li><p>目前项目中后台管理的前端开发框架layui，因为辅助过开发，前台页面里也有用过它的相关独立组件，如分页和弹层，所以也能熟练使用</p>\n</li>\n<li><p>人生中使用的第一个双向绑定的框架 knockout 在池州旅游上报里用到过，当时表单数量众多，双向绑定的特性帮助开发解决了很大的效率问题</p>\n</li>\n<li><p>weui 在周边好旅游项目里使用到的一款基于jq的微信定制的ui框架 好旅游的项目目前一直在运行并且维护，框架对于业务的支撑能起到稳定的作用，其中遇到的一个有问题的地方就是，日期选择组件的样式需要自己定制，不然容易出现布局紊乱。</p>\n</li>\n<li><p>vue和react 目前很火的 周边生态区域稳定的前端框架，且均涉及native端，平时项目开发中不太涉及，但自己平时私下里有深入学习过，二者比较类似，都有虚拟dom，都有状态管理架构，只是vue比较还原传统的前端开发方式，而react则全是在写js，前期写起来会有些不太习惯，但据说写熟练了以后会特别爽。学习是个持续的过程，自己空余的时间也会保持对这两个框架的关注，自己平时利用空闲时间，尝试用vue vue-router vux axios相关技术，仿写了一个cnode的论坛小demo，详情戳<a href=\"https://github.com/bettermu/CNode-vue-project\">这里</a></p>\n</li>\n</ul>\n<h2 id=\"nodeJS\"><a href=\"#nodeJS\" class=\"headerlink\" title=\"nodeJS\"></a>nodeJS</h2><ul>\n<li><p>熟悉nvm npm 相关的node生态，能够搭建一个简易的node服务器，平时开发调试的过程中，所见即所得，提升开发效率</p>\n</li>\n<li><p>了解node相关框架的使用 express 到koa 到阿里的egg 都有所涉猎，兴趣所趋 会使用node进行简单的爬虫数据处理</p>\n</li>\n<li><p>最近在学习Node作为java后端和传统前端中间数据处理层的知识，利用Node的特性，将获取来的后台数据，按照前台需要的方式进行加工，能够更好地进行前后端分离式开发的体验</p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><p>了解java语言 java springMVC相关的技术 增强前后端联调的效率</p>\n</li>\n<li><p>熟悉使用相关开发的IDE 如sublime vscode eclipse idea 能够简单配置开发所需环境，遇到问题能够自主搜索答案，独立解决</p>\n</li>\n<li><p>了解mysql等相关数据库的语言，能进行简单的增删改查操作 了解linux nginx相关配置</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端技能\"><a href=\"#前端技能\" class=\"headerlink\" title=\"前端技能\"></a>前端技能</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li><p>符合兼容规范的文档声明</p>\n</li>\n<li><p>熟悉语义化标签的使用</p>\n</li>\n<li><p>熟悉canvas、websocket、web本地存储、以及H5元素相关的新特性和新技术</p>\n</li>\n<li><p>规范整洁的页面布局结构代码</p>\n</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><p>符合相关规范的样式表申明</p>\n</li>\n<li><p>熟悉CSS样式表normalize，按前端规范统一命名以及初始化</p>\n</li>\n<li><p>熟练掌握css2.0的相关选择器，以及相关样式属性的表现，也能在移动端项目中，熟练运用CSS3相关的新属性，简单直接的解决问题</p>\n</li>\n<li><p>掌握常见的页面布局，熟悉项目开发中页面布局相关的一些坑点</p>\n</li>\n<li><p>熟悉css动画的运用，了解浏览器对于CSS动画的渲染优化，以及与js动画的性能差异</p>\n</li>\n</ul>\n<h2 id=\"原生js\"><a href=\"#原生js\" class=\"headerlink\" title=\"原生js\"></a>原生js</h2><h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><ul>\n<li><p>了解浏览器如何进行js脚本的解析，dom文档的加载过程，简单的渲染过程的优化</p>\n</li>\n<li><p>了解常见的请求和响应如何处理,熟悉与后台接口的数据通信与交互，熟悉浏览器与服务器交互语言json的使用</p>\n</li>\n</ul>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><ul>\n<li><p>熟练使用原生js操作dom，熟悉相关交互事件的特性以及处理</p>\n</li>\n<li><p>了解浏览器之间对于dom API 的实现差异，以及相关的兼容特性</p>\n</li>\n<li><p>熟练使用chrome浏览器的debug功能 能够对于开发中遇到的问题 及时的进行调试 迅速定位到问题发生的位置  及时处理</p>\n</li>\n</ul>\n<h3 id=\"ECMAscript\"><a href=\"#ECMAscript\" class=\"headerlink\" title=\"ECMAscript\"></a>ECMAscript</h3><ul>\n<li><p>了解ECMAscript的发展历史，以及各个版本的新增功能</p>\n</li>\n<li><p>掌握js语言的语法基础以及相关内置api的使用</p>\n</li>\n<li><p>熟悉js相关的语法特性，函数、this指向、作用域、以及由对象原型引申的继承相关特性</p>\n</li>\n<li><p>熟悉js运行特点，单线程，异步操作，回调函数的不简洁，使用Promise以同步编写的方式，异步获取数据的实质来简化数据渲染的操作</p>\n</li>\n<li><p>了解ES6相关语法知识，对于新的API，空闲时间也进行尝试，拥抱趋势和未来</p>\n</li>\n</ul>\n<h2 id=\"js流行框架\"><a href=\"#js流行框架\" class=\"headerlink\" title=\"js流行框架\"></a>js流行框架</h2><ul>\n<li><p>熟练使用jquery，包括适合PC端的1.X版本以及移动端的2.X版本，轻量级的相似框架zepto，对于其源码实现，也有涉猎，使用过jq周边的UI框架如jqUI和easyui</p>\n</li>\n<li><p>目前项目中后台管理的前端开发框架layui，因为辅助过开发，前台页面里也有用过它的相关独立组件，如分页和弹层，所以也能熟练使用</p>\n</li>\n<li><p>人生中使用的第一个双向绑定的框架 knockout 在池州旅游上报里用到过，当时表单数量众多，双向绑定的特性帮助开发解决了很大的效率问题</p>\n</li>\n<li><p>weui 在周边好旅游项目里使用到的一款基于jq的微信定制的ui框架 好旅游的项目目前一直在运行并且维护，框架对于业务的支撑能起到稳定的作用，其中遇到的一个有问题的地方就是，日期选择组件的样式需要自己定制，不然容易出现布局紊乱。</p>\n</li>\n<li><p>vue和react 目前很火的 周边生态区域稳定的前端框架，且均涉及native端，平时项目开发中不太涉及，但自己平时私下里有深入学习过，二者比较类似，都有虚拟dom，都有状态管理架构，只是vue比较还原传统的前端开发方式，而react则全是在写js，前期写起来会有些不太习惯，但据说写熟练了以后会特别爽。学习是个持续的过程，自己空余的时间也会保持对这两个框架的关注，自己平时利用空闲时间，尝试用vue vue-router vux axios相关技术，仿写了一个cnode的论坛小demo，详情戳<a href=\"https://github.com/bettermu/CNode-vue-project\">这里</a></p>\n</li>\n</ul>\n<h2 id=\"nodeJS\"><a href=\"#nodeJS\" class=\"headerlink\" title=\"nodeJS\"></a>nodeJS</h2><ul>\n<li><p>熟悉nvm npm 相关的node生态，能够搭建一个简易的node服务器，平时开发调试的过程中，所见即所得，提升开发效率</p>\n</li>\n<li><p>了解node相关框架的使用 express 到koa 到阿里的egg 都有所涉猎，兴趣所趋 会使用node进行简单的爬虫数据处理</p>\n</li>\n<li><p>最近在学习Node作为java后端和传统前端中间数据处理层的知识，利用Node的特性，将获取来的后台数据，按照前台需要的方式进行加工，能够更好地进行前后端分离式开发的体验</p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><p>了解java语言 java springMVC相关的技术 增强前后端联调的效率</p>\n</li>\n<li><p>熟悉使用相关开发的IDE 如sublime vscode eclipse idea 能够简单配置开发所需环境，遇到问题能够自主搜索答案，独立解决</p>\n</li>\n<li><p>了解mysql等相关数据库的语言，能进行简单的增删改查操作 了解linux nginx相关配置</p>\n</li>\n</ul>\n"},{"title":"分类","date":"2018-05-31T08:38:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-05-31 16:38:24\ntype: \"categories\"\n---\n","updated":"2018-06-01T02:14:12.912Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckjp1wxl50002msvicako75jr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-05-31T08:33:43.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-05-31 16:33:43\ntype: \"tags\"\n---\n","updated":"2018-06-01T02:14:20.852Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckjp1wxl90006msvi7tshb6ym","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"项目经验","date":"2018-06-01T02:32:31.000Z","_content":"\n## 十七、AI+慧云智慧场景\n[项目预览地址](https://aiscenes.iflysec.com:8098/hy-aio/#/login) weiwang 1111\n\n## 十六、泾县电商平台\n\n[项目预览地址](http://223.214.194.230:8081/st-shopPortal/#/)\n\n## 十五、泾县旅游资讯网\n\n[项目预览地址](http://223.214.194.201:8081/st-news/news/#/)\n\n## 十四、泾县智慧旅游一体机项目\n\n### 语音导览\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/voice/)\n\n### 全景导游\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/panorama/)\n\n### 交通时刻\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/schedule/)\n\n### 门票预订\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/reserve/)\n\n\n## 十三、河南栾川旅游资讯网项目（微信端）（2018.12）\n\n### 预览扫码\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E8%B5%84%E8%AE%AF%E7%BD%91%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true)\n1、首页\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n2、地图语音导览\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%9C%B0%E5%9B%BE.png?raw=true)\n\n3、vr全景模块\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%85%A8%E6%99%AF1.png?raw=true)\n\n4、景点详情\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%851.png?raw=true)\n\n## 十二、河南栾川旅游资讯网项目（PC端）（2018.12）\n\n\n[项目预览地址](http://www.luanchuanwenlv.com/vr-news/index.html#/)\n\n### 前端技术栈\n\n* vue-cli构建 Vue全家桶 单页应用\n* vee-validate表单验证框架\n* axios 接口请求\n* vuex 状态管理\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%99%AF%E7%82%B9%E5%AF%BC%E8%A7%881.png?raw=true)\n\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%A0%BE%E5%B7%9D%E5%85%A8%E6%99%AF.png?raw=true)\n\n\n## 十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9B%BE.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%88%97%E8%A1%A8.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85-%E4%B8%AD%E6%96%87.png?raw=true)\n\n## 十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E5%AD%A6%E7%94%9F%E7%AB%AF-%E5%88%9B%E5%BB%BA%E8%A1%8C%E7%A8%8B.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E6%95%99%E5%B8%88%E7%AB%AF%E4%BD%9C%E4%B8%9A%E8%AF%A6%E6%83%85.png?raw=true)\n\n\n## 九、黄山学院旅游智慧助手APP（2018.8-2018.9）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E6%99%AF%E7%82%B9.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%BB%84%E5%B1%B1%E6%99%AF%E7%82%B9.png?raw=true)\n\n## 八、黄山旅游资源产业链展示系统（2018.7-2018.8）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%AF%BC%E8%88%AA%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%88%97%E8%A1%A8%E6%A8%A1%E5%BC%8F.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%9C%B0%E5%9B%BE%E6%A8%A1%E5%BC%8F.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85.png?raw=true)\n\n\n## 七、黄山旅游智慧语音导览系统（2018.6-2018.7）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%881.png?raw=true)     \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%882.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%883.png?raw=true)\n\n## 六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）\n* 概述   \n  pc端和h5手机端的全景旅游系统的开发，主要是通过木垒旅游门户的地图锚点进来，对相关景点进行的全景浏览，相关效果可见720云，以及公司之前开发过得一个[demo项目](http://vr.iflyota.com/) ，手机端可以扫下方二维码进入  \n  ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E7%88%B1%E9%80%94%E8%99%9A%E6%8B%9F%E6%97%85%E6%B8%B8.png?raw=true) \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery   \n    * krpano  krpano是一款全景漫游制作软件和工具。使用专用的krpano xml代码编写全景漫游，可开发出高定制化的项目，也可利用krpano工具开发在线全景制作及展示平台\n  * 后端：\n    * layui 后台管理页面开发框架\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n## 五、惟悠旅行服务评价系统（2017.11-2017.12）\n* 概述   \n  黄山爱途国际旅行社微信公众号内置浏览器web页面系统，游客通过导游给定的二维码，扫码进入，对于旅行期间相关的服务，如酒店，景点，车队，以及行程安排进行评分以及评价的系统  \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery2.1  移动端web适用的jquery版本  \n    * layui   轻量级定制化页面框架，在项目里用到了弹层组件\n  * 后端：\n    * layui 后台管理页面开发框架\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n\n## 四、周边好旅游线下营销系统（2017.7-2017.10）\n* 概述   \n  新零售形态下的 旅游线下营销系统，将黄山本地的旅游资源，景点，酒店，当地特产，以及相关商户信息进行整合，并进行代理营销的基于微信内置页面的销售系统  \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery2.1  移动端web适用的jquery版本  \n    * weui   微信定制化的UI框架，交互和样式与微信相似\n  * 后端：\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n* 查看详情请扫下面二维码图片  \n  ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%91%A8%E8%BE%B9%E5%A5%BD%E6%97%85%E6%B8%B8.png?raw=true)\n\n\n## 三、池州旅游上报系统（2017.3-2017-6） \n* 概述  \n  池州市境内的旅游资源相关信息的收集以及上报，审核系统，对于池州市旅游资源的整合，包括景点，酒店，住宿，旅行社，汽车火车站等相关分类  \n\n* 主要技术  \n  * 前端： \n    * html,css\n    * jqueryUI  表单上传界面的Tab栏切换，方便将大量的上报字段进行分类处理\n    * knockout.js  主要用于大量的form表单的双向绑定以及方便与后台数据的通信\n    * volidform.js  表单的字段规范验证，对于大量的表单字段，提高开发效率\n    * echarts  上报数据项的数据可视化框架\n    * layui  上报列表以及审核列表的分页插件\n    * 百度地图javascript版本  在上报表单以及审核中，可以提供目标的地点选择以及地理位置的展示\n  * 后端：\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n## 二、黄山市诚信认证中心微信端系统（2017.2-2017.3）\n* 概述  \n  黄山市诚信认证商户展示以及相关旅游资源的信息，基于黄山诚信认证中心微信号的内置页面开发。  \n\n* 主要技术  \n  * 前端：\n    * html,css3  \n    * zepto.js\n    * webuploader   图片上传控件\n  * 后端：\n    * c#\n    * SQL server  \n     \n* 查看详情扫下面二维码图片  \n   ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%AF%9A%E4%BF%A1%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true)\n\n## 一、福利宝微信端线上商城 （2016.12-2017.1） \n* 概述  \n  讯飞企业内部的商城系统，用于员工过年过节的内购，基于微信内部的浏览器开发的手机端商城，方便员工进行操作。\n\n* 主要技术  \n  * 前端：\n    * html\n    * css3\n    * zepto.js  \n  * 后端：\n    * c#\n    * SQL server\n","source":"project/index.md","raw":"---\ntitle: 项目经验\ndate: 2018-06-01 10:32:31\n---\n\n## 十七、AI+慧云智慧场景\n[项目预览地址](https://aiscenes.iflysec.com:8098/hy-aio/#/login) weiwang 1111\n\n## 十六、泾县电商平台\n\n[项目预览地址](http://223.214.194.230:8081/st-shopPortal/#/)\n\n## 十五、泾县旅游资讯网\n\n[项目预览地址](http://223.214.194.201:8081/st-news/news/#/)\n\n## 十四、泾县智慧旅游一体机项目\n\n### 语音导览\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/voice/)\n\n### 全景导游\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/panorama/)\n\n### 交通时刻\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/schedule/)\n\n### 门票预订\n\n[项目预览地址](http://223.214.194.201:8081/st-news/touch/reserve/)\n\n\n## 十三、河南栾川旅游资讯网项目（微信端）（2018.12）\n\n### 预览扫码\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E8%B5%84%E8%AE%AF%E7%BD%91%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true)\n1、首页\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n2、地图语音导览\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%9C%B0%E5%9B%BE.png?raw=true)\n\n3、vr全景模块\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%85%A8%E6%99%AF1.png?raw=true)\n\n4、景点详情\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%851.png?raw=true)\n\n## 十二、河南栾川旅游资讯网项目（PC端）（2018.12）\n\n\n[项目预览地址](http://www.luanchuanwenlv.com/vr-news/index.html#/)\n\n### 前端技术栈\n\n* vue-cli构建 Vue全家桶 单页应用\n* vee-validate表单验证框架\n* axios 接口请求\n* vuex 状态管理\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%99%AF%E7%82%B9%E5%AF%BC%E8%A7%881.png?raw=true)\n\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%A0%BE%E5%B7%9D%E5%85%A8%E6%99%AF.png?raw=true)\n\n\n## 十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9B%BE.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%88%97%E8%A1%A8.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85-%E4%B8%AD%E6%96%87.png?raw=true)\n\n## 十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E5%AD%A6%E7%94%9F%E7%AB%AF-%E5%88%9B%E5%BB%BA%E8%A1%8C%E7%A8%8B.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E6%95%99%E5%B8%88%E7%AB%AF%E4%BD%9C%E4%B8%9A%E8%AF%A6%E6%83%85.png?raw=true)\n\n\n## 九、黄山学院旅游智慧助手APP（2018.8-2018.9）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%A6%96%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E6%99%AF%E7%82%B9.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%BB%84%E5%B1%B1%E6%99%AF%E7%82%B9.png?raw=true)\n\n## 八、黄山旅游资源产业链展示系统（2018.7-2018.8）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%AF%BC%E8%88%AA%E9%A1%B5.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%88%97%E8%A1%A8%E6%A8%A1%E5%BC%8F.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%9C%B0%E5%9B%BE%E6%A8%A1%E5%BC%8F.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85.png?raw=true)\n\n\n## 七、黄山旅游智慧语音导览系统（2018.6-2018.7）\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%881.png?raw=true)     \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%882.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%883.png?raw=true)\n\n## 六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）\n* 概述   \n  pc端和h5手机端的全景旅游系统的开发，主要是通过木垒旅游门户的地图锚点进来，对相关景点进行的全景浏览，相关效果可见720云，以及公司之前开发过得一个[demo项目](http://vr.iflyota.com/) ，手机端可以扫下方二维码进入  \n  ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E7%88%B1%E9%80%94%E8%99%9A%E6%8B%9F%E6%97%85%E6%B8%B8.png?raw=true) \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery   \n    * krpano  krpano是一款全景漫游制作软件和工具。使用专用的krpano xml代码编写全景漫游，可开发出高定制化的项目，也可利用krpano工具开发在线全景制作及展示平台\n  * 后端：\n    * layui 后台管理页面开发框架\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n## 五、惟悠旅行服务评价系统（2017.11-2017.12）\n* 概述   \n  黄山爱途国际旅行社微信公众号内置浏览器web页面系统，游客通过导游给定的二维码，扫码进入，对于旅行期间相关的服务，如酒店，景点，车队，以及行程安排进行评分以及评价的系统  \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery2.1  移动端web适用的jquery版本  \n    * layui   轻量级定制化页面框架，在项目里用到了弹层组件\n  * 后端：\n    * layui 后台管理页面开发框架\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n\n## 四、周边好旅游线下营销系统（2017.7-2017.10）\n* 概述   \n  新零售形态下的 旅游线下营销系统，将黄山本地的旅游资源，景点，酒店，当地特产，以及相关商户信息进行整合，并进行代理营销的基于微信内置页面的销售系统  \n* 主要技术  \n  * 前端\n    * html,css3\n    * jquery2.1  移动端web适用的jquery版本  \n    * weui   微信定制化的UI框架，交互和样式与微信相似\n  * 后端：\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n* 查看详情请扫下面二维码图片  \n  ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%91%A8%E8%BE%B9%E5%A5%BD%E6%97%85%E6%B8%B8.png?raw=true)\n\n\n## 三、池州旅游上报系统（2017.3-2017-6） \n* 概述  \n  池州市境内的旅游资源相关信息的收集以及上报，审核系统，对于池州市旅游资源的整合，包括景点，酒店，住宿，旅行社，汽车火车站等相关分类  \n\n* 主要技术  \n  * 前端： \n    * html,css\n    * jqueryUI  表单上传界面的Tab栏切换，方便将大量的上报字段进行分类处理\n    * knockout.js  主要用于大量的form表单的双向绑定以及方便与后台数据的通信\n    * volidform.js  表单的字段规范验证，对于大量的表单字段，提高开发效率\n    * echarts  上报数据项的数据可视化框架\n    * layui  上报列表以及审核列表的分页插件\n    * 百度地图javascript版本  在上报表单以及审核中，可以提供目标的地点选择以及地理位置的展示\n  * 后端：\n    * java语言\n    * spring service处理层\n    * springMVC 前端控制器\n    * mybatis dao层数据库操作\n    * oricle数据库\n\n## 二、黄山市诚信认证中心微信端系统（2017.2-2017.3）\n* 概述  \n  黄山市诚信认证商户展示以及相关旅游资源的信息，基于黄山诚信认证中心微信号的内置页面开发。  \n\n* 主要技术  \n  * 前端：\n    * html,css3  \n    * zepto.js\n    * webuploader   图片上传控件\n  * 后端：\n    * c#\n    * SQL server  \n     \n* 查看详情扫下面二维码图片  \n   ![](https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%AF%9A%E4%BF%A1%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true)\n\n## 一、福利宝微信端线上商城 （2016.12-2017.1） \n* 概述  \n  讯飞企业内部的商城系统，用于员工过年过节的内购，基于微信内部的浏览器开发的手机端商城，方便员工进行操作。\n\n* 主要技术  \n  * 前端：\n    * html\n    * css3\n    * zepto.js  \n  * 后端：\n    * c#\n    * SQL server\n","updated":"2019-12-14T11:34:52.255Z","path":"project/index.html","comments":1,"layout":"page","_id":"ckjp1wxla0008msvie3pfftvu","content":"<h2 id=\"十七、AI-慧云智慧场景\"><a href=\"#十七、AI-慧云智慧场景\" class=\"headerlink\" title=\"十七、AI+慧云智慧场景\"></a>十七、AI+慧云智慧场景</h2><p><a href=\"https://aiscenes.iflysec.com:8098/hy-aio/#/login\">项目预览地址</a> weiwang 1111</p>\n<h2 id=\"十六、泾县电商平台\"><a href=\"#十六、泾县电商平台\" class=\"headerlink\" title=\"十六、泾县电商平台\"></a>十六、泾县电商平台</h2><p><a href=\"http://223.214.194.230:8081/st-shopPortal/#/\">项目预览地址</a></p>\n<h2 id=\"十五、泾县旅游资讯网\"><a href=\"#十五、泾县旅游资讯网\" class=\"headerlink\" title=\"十五、泾县旅游资讯网\"></a>十五、泾县旅游资讯网</h2><p><a href=\"http://223.214.194.201:8081/st-news/news/#/\">项目预览地址</a></p>\n<h2 id=\"十四、泾县智慧旅游一体机项目\"><a href=\"#十四、泾县智慧旅游一体机项目\" class=\"headerlink\" title=\"十四、泾县智慧旅游一体机项目\"></a>十四、泾县智慧旅游一体机项目</h2><h3 id=\"语音导览\"><a href=\"#语音导览\" class=\"headerlink\" title=\"语音导览\"></a>语音导览</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/voice/\">项目预览地址</a></p>\n<h3 id=\"全景导游\"><a href=\"#全景导游\" class=\"headerlink\" title=\"全景导游\"></a>全景导游</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/panorama/\">项目预览地址</a></p>\n<h3 id=\"交通时刻\"><a href=\"#交通时刻\" class=\"headerlink\" title=\"交通时刻\"></a>交通时刻</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/schedule/\">项目预览地址</a></p>\n<h3 id=\"门票预订\"><a href=\"#门票预订\" class=\"headerlink\" title=\"门票预订\"></a>门票预订</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/reserve/\">项目预览地址</a></p>\n<h2 id=\"十三、河南栾川旅游资讯网项目（微信端）（2018-12）\"><a href=\"#十三、河南栾川旅游资讯网项目（微信端）（2018-12）\" class=\"headerlink\" title=\"十三、河南栾川旅游资讯网项目（微信端）（2018.12）\"></a>十三、河南栾川旅游资讯网项目（微信端）（2018.12）</h2><h3 id=\"预览扫码\"><a href=\"#预览扫码\" class=\"headerlink\" title=\"预览扫码\"></a>预览扫码</h3><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E8%B5%84%E8%AE%AF%E7%BD%91%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true\"><br>1、首页<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p>2、地图语音导览<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%9C%B0%E5%9B%BE.png?raw=true\"></p>\n<p>3、vr全景模块<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%85%A8%E6%99%AF1.png?raw=true\"></p>\n<p>4、景点详情<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%851.png?raw=true\"></p>\n<h2 id=\"十二、河南栾川旅游资讯网项目（PC端）（2018-12）\"><a href=\"#十二、河南栾川旅游资讯网项目（PC端）（2018-12）\" class=\"headerlink\" title=\"十二、河南栾川旅游资讯网项目（PC端）（2018.12）\"></a>十二、河南栾川旅游资讯网项目（PC端）（2018.12）</h2><p><a href=\"http://www.luanchuanwenlv.com/vr-news/index.html#/\">项目预览地址</a></p>\n<h3 id=\"前端技术栈\"><a href=\"#前端技术栈\" class=\"headerlink\" title=\"前端技术栈\"></a>前端技术栈</h3><ul>\n<li>vue-cli构建 Vue全家桶 单页应用</li>\n<li>vee-validate表单验证框架</li>\n<li>axios 接口请求</li>\n<li>vuex 状态管理</li>\n</ul>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%99%AF%E7%82%B9%E5%AF%BC%E8%A7%881.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%A0%BE%E5%B7%9D%E5%85%A8%E6%99%AF.png?raw=true\"></p>\n<h2 id=\"十一、彭德怀纪念馆语音导览系统（微信端）（2018-11）\"><a href=\"#十一、彭德怀纪念馆语音导览系统（微信端）（2018-11）\" class=\"headerlink\" title=\"十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）\"></a>十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9B%BE.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%88%97%E8%A1%A8.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85-%E4%B8%AD%E6%96%87.png?raw=true\"></p>\n<h2 id=\"十、黄山学院智慧旅游线路规划系统（2018-9-2018-10）\"><a href=\"#十、黄山学院智慧旅游线路规划系统（2018-9-2018-10）\" class=\"headerlink\" title=\"十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）\"></a>十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E5%AD%A6%E7%94%9F%E7%AB%AF-%E5%88%9B%E5%BB%BA%E8%A1%8C%E7%A8%8B.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E6%95%99%E5%B8%88%E7%AB%AF%E4%BD%9C%E4%B8%9A%E8%AF%A6%E6%83%85.png?raw=true\"></p>\n<h2 id=\"九、黄山学院旅游智慧助手APP（2018-8-2018-9）\"><a href=\"#九、黄山学院旅游智慧助手APP（2018-8-2018-9）\" class=\"headerlink\" title=\"九、黄山学院旅游智慧助手APP（2018.8-2018.9）\"></a>九、黄山学院旅游智慧助手APP（2018.8-2018.9）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E6%99%AF%E7%82%B9.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%BB%84%E5%B1%B1%E6%99%AF%E7%82%B9.png?raw=true\"></p>\n<h2 id=\"八、黄山旅游资源产业链展示系统（2018-7-2018-8）\"><a href=\"#八、黄山旅游资源产业链展示系统（2018-7-2018-8）\" class=\"headerlink\" title=\"八、黄山旅游资源产业链展示系统（2018.7-2018.8）\"></a>八、黄山旅游资源产业链展示系统（2018.7-2018.8）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%AF%BC%E8%88%AA%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%88%97%E8%A1%A8%E6%A8%A1%E5%BC%8F.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%9C%B0%E5%9B%BE%E6%A8%A1%E5%BC%8F.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85.png?raw=true\"></p>\n<h2 id=\"七、黄山旅游智慧语音导览系统（2018-6-2018-7）\"><a href=\"#七、黄山旅游智慧语音导览系统（2018-6-2018-7）\" class=\"headerlink\" title=\"七、黄山旅游智慧语音导览系统（2018.6-2018.7）\"></a>七、黄山旅游智慧语音导览系统（2018.6-2018.7）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%881.png?raw=true\">     </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%882.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%883.png?raw=true\"></p>\n<h2 id=\"六、新疆木垒全域虚拟全景旅游系统（2018-2-2018-3）\"><a href=\"#六、新疆木垒全域虚拟全景旅游系统（2018-2-2018-3）\" class=\"headerlink\" title=\"六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）\"></a>六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）</h2><ul>\n<li>概述<br>pc端和h5手机端的全景旅游系统的开发，主要是通过木垒旅游门户的地图锚点进来，对相关景点进行的全景浏览，相关效果可见720云，以及公司之前开发过得一个<a href=\"http://vr.iflyota.com/\">demo项目</a> ，手机端可以扫下方二维码进入<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E7%88%B1%E9%80%94%E8%99%9A%E6%8B%9F%E6%97%85%E6%B8%B8.png?raw=true\"> </li>\n<li>主要技术  <ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery   </li>\n<li>krpano  krpano是一款全景漫游制作软件和工具。使用专用的krpano xml代码编写全景漫游，可开发出高定制化的项目，也可利用krpano工具开发在线全景制作及展示平台</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>layui 后台管理页面开发框架</li>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、惟悠旅行服务评价系统（2017-11-2017-12）\"><a href=\"#五、惟悠旅行服务评价系统（2017-11-2017-12）\" class=\"headerlink\" title=\"五、惟悠旅行服务评价系统（2017.11-2017.12）\"></a>五、惟悠旅行服务评价系统（2017.11-2017.12）</h2><ul>\n<li>概述<br>黄山爱途国际旅行社微信公众号内置浏览器web页面系统，游客通过导游给定的二维码，扫码进入，对于旅行期间相关的服务，如酒店，景点，车队，以及行程安排进行评分以及评价的系统  </li>\n<li>主要技术  <ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery2.1  移动端web适用的jquery版本  </li>\n<li>layui   轻量级定制化页面框架，在项目里用到了弹层组件</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>layui 后台管理页面开发框架</li>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、周边好旅游线下营销系统（2017-7-2017-10）\"><a href=\"#四、周边好旅游线下营销系统（2017-7-2017-10）\" class=\"headerlink\" title=\"四、周边好旅游线下营销系统（2017.7-2017.10）\"></a>四、周边好旅游线下营销系统（2017.7-2017.10）</h2><ul>\n<li><p>概述<br>新零售形态下的 旅游线下营销系统，将黄山本地的旅游资源，景点，酒店，当地特产，以及相关商户信息进行整合，并进行代理营销的基于微信内置页面的销售系统  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery2.1  移动端web适用的jquery版本  </li>\n<li>weui   微信定制化的UI框架，交互和样式与微信相似</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看详情请扫下面二维码图片<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%91%A8%E8%BE%B9%E5%A5%BD%E6%97%85%E6%B8%B8.png?raw=true\"></p>\n</li>\n</ul>\n<h2 id=\"三、池州旅游上报系统（2017-3-2017-6）\"><a href=\"#三、池州旅游上报系统（2017-3-2017-6）\" class=\"headerlink\" title=\"三、池州旅游上报系统（2017.3-2017-6）\"></a>三、池州旅游上报系统（2017.3-2017-6）</h2><ul>\n<li><p>概述<br>池州市境内的旅游资源相关信息的收集以及上报，审核系统，对于池州市旅游资源的整合，包括景点，酒店，住宿，旅行社，汽车火车站等相关分类  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端： <ul>\n<li>html,css</li>\n<li>jqueryUI  表单上传界面的Tab栏切换，方便将大量的上报字段进行分类处理</li>\n<li>knockout.js  主要用于大量的form表单的双向绑定以及方便与后台数据的通信</li>\n<li>volidform.js  表单的字段规范验证，对于大量的表单字段，提高开发效率</li>\n<li>echarts  上报数据项的数据可视化框架</li>\n<li>layui  上报列表以及审核列表的分页插件</li>\n<li>百度地图javascript版本  在上报表单以及审核中，可以提供目标的地点选择以及地理位置的展示</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、黄山市诚信认证中心微信端系统（2017-2-2017-3）\"><a href=\"#二、黄山市诚信认证中心微信端系统（2017-2-2017-3）\" class=\"headerlink\" title=\"二、黄山市诚信认证中心微信端系统（2017.2-2017.3）\"></a>二、黄山市诚信认证中心微信端系统（2017.2-2017.3）</h2><ul>\n<li><p>概述<br>黄山市诚信认证商户展示以及相关旅游资源的信息，基于黄山诚信认证中心微信号的内置页面开发。  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端：<ul>\n<li>html,css3  </li>\n<li>zepto.js</li>\n<li>webuploader   图片上传控件</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>c#</li>\n<li>SQL server  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看详情扫下面二维码图片<br> <img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%AF%9A%E4%BF%A1%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true\"></p>\n</li>\n</ul>\n<h2 id=\"一、福利宝微信端线上商城-（2016-12-2017-1）\"><a href=\"#一、福利宝微信端线上商城-（2016-12-2017-1）\" class=\"headerlink\" title=\"一、福利宝微信端线上商城 （2016.12-2017.1）\"></a>一、福利宝微信端线上商城 （2016.12-2017.1）</h2><ul>\n<li><p>概述<br>讯飞企业内部的商城系统，用于员工过年过节的内购，基于微信内部的浏览器开发的手机端商城，方便员工进行操作。</p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端：<ul>\n<li>html</li>\n<li>css3</li>\n<li>zepto.js  </li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>c#</li>\n<li>SQL server</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"十七、AI-慧云智慧场景\"><a href=\"#十七、AI-慧云智慧场景\" class=\"headerlink\" title=\"十七、AI+慧云智慧场景\"></a>十七、AI+慧云智慧场景</h2><p><a href=\"https://aiscenes.iflysec.com:8098/hy-aio/#/login\">项目预览地址</a> weiwang 1111</p>\n<h2 id=\"十六、泾县电商平台\"><a href=\"#十六、泾县电商平台\" class=\"headerlink\" title=\"十六、泾县电商平台\"></a>十六、泾县电商平台</h2><p><a href=\"http://223.214.194.230:8081/st-shopPortal/#/\">项目预览地址</a></p>\n<h2 id=\"十五、泾县旅游资讯网\"><a href=\"#十五、泾县旅游资讯网\" class=\"headerlink\" title=\"十五、泾县旅游资讯网\"></a>十五、泾县旅游资讯网</h2><p><a href=\"http://223.214.194.201:8081/st-news/news/#/\">项目预览地址</a></p>\n<h2 id=\"十四、泾县智慧旅游一体机项目\"><a href=\"#十四、泾县智慧旅游一体机项目\" class=\"headerlink\" title=\"十四、泾县智慧旅游一体机项目\"></a>十四、泾县智慧旅游一体机项目</h2><h3 id=\"语音导览\"><a href=\"#语音导览\" class=\"headerlink\" title=\"语音导览\"></a>语音导览</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/voice/\">项目预览地址</a></p>\n<h3 id=\"全景导游\"><a href=\"#全景导游\" class=\"headerlink\" title=\"全景导游\"></a>全景导游</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/panorama/\">项目预览地址</a></p>\n<h3 id=\"交通时刻\"><a href=\"#交通时刻\" class=\"headerlink\" title=\"交通时刻\"></a>交通时刻</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/schedule/\">项目预览地址</a></p>\n<h3 id=\"门票预订\"><a href=\"#门票预订\" class=\"headerlink\" title=\"门票预订\"></a>门票预订</h3><p><a href=\"http://223.214.194.201:8081/st-news/touch/reserve/\">项目预览地址</a></p>\n<h2 id=\"十三、河南栾川旅游资讯网项目（微信端）（2018-12）\"><a href=\"#十三、河南栾川旅游资讯网项目（微信端）（2018-12）\" class=\"headerlink\" title=\"十三、河南栾川旅游资讯网项目（微信端）（2018.12）\"></a>十三、河南栾川旅游资讯网项目（微信端）（2018.12）</h2><h3 id=\"预览扫码\"><a href=\"#预览扫码\" class=\"headerlink\" title=\"预览扫码\"></a>预览扫码</h3><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E8%B5%84%E8%AE%AF%E7%BD%91%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true\"><br>1、首页<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p>2、地图语音导览<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%9C%B0%E5%9B%BE.png?raw=true\"></p>\n<p>3、vr全景模块<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E5%85%A8%E6%99%AF1.png?raw=true\"></p>\n<p>4、景点详情<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-wx-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%851.png?raw=true\"></p>\n<h2 id=\"十二、河南栾川旅游资讯网项目（PC端）（2018-12）\"><a href=\"#十二、河南栾川旅游资讯网项目（PC端）（2018-12）\" class=\"headerlink\" title=\"十二、河南栾川旅游资讯网项目（PC端）（2018.12）\"></a>十二、河南栾川旅游资讯网项目（PC端）（2018.12）</h2><p><a href=\"http://www.luanchuanwenlv.com/vr-news/index.html#/\">项目预览地址</a></p>\n<h3 id=\"前端技术栈\"><a href=\"#前端技术栈\" class=\"headerlink\" title=\"前端技术栈\"></a>前端技术栈</h3><ul>\n<li>vue-cli构建 Vue全家桶 单页应用</li>\n<li>vee-validate表单验证框架</li>\n<li>axios 接口请求</li>\n<li>vuex 状态管理</li>\n</ul>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%99%AF%E7%82%B9%E5%AF%BC%E8%A7%881.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%A0%BE%E5%B7%9D%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF%E7%BD%91-%E6%A0%BE%E5%B7%9D%E5%85%A8%E6%99%AF.png?raw=true\"></p>\n<h2 id=\"十一、彭德怀纪念馆语音导览系统（微信端）（2018-11）\"><a href=\"#十一、彭德怀纪念馆语音导览系统（微信端）（2018-11）\" class=\"headerlink\" title=\"十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）\"></a>十一、彭德怀纪念馆语音导览系统（微信端）（2018.11）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9B%BE.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E9%A6%96%E9%A1%B5%E5%88%97%E8%A1%A8.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%BD%AD%E5%BE%B7%E6%80%80%E7%BA%AA%E5%BF%B5%E9%A6%86%E8%AF%AD%E9%9F%B3%E5%AF%BC%E8%A7%88-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85-%E4%B8%AD%E6%96%87.png?raw=true\"></p>\n<h2 id=\"十、黄山学院智慧旅游线路规划系统（2018-9-2018-10）\"><a href=\"#十、黄山学院智慧旅游线路规划系统（2018-9-2018-10）\" class=\"headerlink\" title=\"十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）\"></a>十、黄山学院智慧旅游线路规划系统（2018.9-2018.10）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E5%AD%A6%E7%94%9F%E7%AB%AF-%E5%88%9B%E5%BB%BA%E8%A1%8C%E7%A8%8B.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92%E7%B3%BB%E7%BB%9F-%E6%95%99%E5%B8%88%E7%AB%AF%E4%BD%9C%E4%B8%9A%E8%AF%A6%E6%83%85.png?raw=true\"></p>\n<h2 id=\"九、黄山学院旅游智慧助手APP（2018-8-2018-9）\"><a href=\"#九、黄山学院旅游智慧助手APP（2018-8-2018-9）\" class=\"headerlink\" title=\"九、黄山学院旅游智慧助手APP（2018.8-2018.9）\"></a>九、黄山学院旅游智慧助手APP（2018.8-2018.9）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%A6%96%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E6%99%AF%E7%82%B9.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E6%99%BA%E8%83%BD%E6%97%85%E6%B8%B8app-%E9%BB%84%E5%B1%B1%E6%99%AF%E7%82%B9.png?raw=true\"></p>\n<h2 id=\"八、黄山旅游资源产业链展示系统（2018-7-2018-8）\"><a href=\"#八、黄山旅游资源产业链展示系统（2018-7-2018-8）\" class=\"headerlink\" title=\"八、黄山旅游资源产业链展示系统（2018.7-2018.8）\"></a>八、黄山旅游资源产业链展示系统（2018.7-2018.8）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%AF%BC%E8%88%AA%E9%A1%B5.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%88%97%E8%A1%A8%E6%A8%A1%E5%BC%8F.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E5%9C%B0%E5%9B%BE%E6%A8%A1%E5%BC%8F.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E4%BA%A7%E4%B8%9A%E9%93%BE%E5%B1%95%E7%A4%BA-%E6%99%AF%E7%82%B9%E8%AF%A6%E6%83%85.png?raw=true\"></p>\n<h2 id=\"七、黄山旅游智慧语音导览系统（2018-6-2018-7）\"><a href=\"#七、黄山旅游智慧语音导览系统（2018-6-2018-7）\" class=\"headerlink\" title=\"七、黄山旅游智慧语音导览系统（2018.6-2018.7）\"></a>七、黄山旅游智慧语音导览系统（2018.6-2018.7）</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%881.png?raw=true\">     </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%882.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E9%BB%84%E5%B1%B1%E5%B8%82%E6%97%85%E6%B8%B8%E5%AF%BC%E6%B8%B8%E5%AF%BC%E8%A7%883.png?raw=true\"></p>\n<h2 id=\"六、新疆木垒全域虚拟全景旅游系统（2018-2-2018-3）\"><a href=\"#六、新疆木垒全域虚拟全景旅游系统（2018-2-2018-3）\" class=\"headerlink\" title=\"六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）\"></a>六、新疆木垒全域虚拟全景旅游系统（2018.2-2018.3）</h2><ul>\n<li>概述<br>pc端和h5手机端的全景旅游系统的开发，主要是通过木垒旅游门户的地图锚点进来，对相关景点进行的全景浏览，相关效果可见720云，以及公司之前开发过得一个<a href=\"http://vr.iflyota.com/\">demo项目</a> ，手机端可以扫下方二维码进入<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E7%88%B1%E9%80%94%E8%99%9A%E6%8B%9F%E6%97%85%E6%B8%B8.png?raw=true\"> </li>\n<li>主要技术  <ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery   </li>\n<li>krpano  krpano是一款全景漫游制作软件和工具。使用专用的krpano xml代码编写全景漫游，可开发出高定制化的项目，也可利用krpano工具开发在线全景制作及展示平台</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>layui 后台管理页面开发框架</li>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、惟悠旅行服务评价系统（2017-11-2017-12）\"><a href=\"#五、惟悠旅行服务评价系统（2017-11-2017-12）\" class=\"headerlink\" title=\"五、惟悠旅行服务评价系统（2017.11-2017.12）\"></a>五、惟悠旅行服务评价系统（2017.11-2017.12）</h2><ul>\n<li>概述<br>黄山爱途国际旅行社微信公众号内置浏览器web页面系统，游客通过导游给定的二维码，扫码进入，对于旅行期间相关的服务，如酒店，景点，车队，以及行程安排进行评分以及评价的系统  </li>\n<li>主要技术  <ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery2.1  移动端web适用的jquery版本  </li>\n<li>layui   轻量级定制化页面框架，在项目里用到了弹层组件</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>layui 后台管理页面开发框架</li>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、周边好旅游线下营销系统（2017-7-2017-10）\"><a href=\"#四、周边好旅游线下营销系统（2017-7-2017-10）\" class=\"headerlink\" title=\"四、周边好旅游线下营销系统（2017.7-2017.10）\"></a>四、周边好旅游线下营销系统（2017.7-2017.10）</h2><ul>\n<li><p>概述<br>新零售形态下的 旅游线下营销系统，将黄山本地的旅游资源，景点，酒店，当地特产，以及相关商户信息进行整合，并进行代理营销的基于微信内置页面的销售系统  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端<ul>\n<li>html,css3</li>\n<li>jquery2.1  移动端web适用的jquery版本  </li>\n<li>weui   微信定制化的UI框架，交互和样式与微信相似</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看详情请扫下面二维码图片<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E5%91%A8%E8%BE%B9%E5%A5%BD%E6%97%85%E6%B8%B8.png?raw=true\"></p>\n</li>\n</ul>\n<h2 id=\"三、池州旅游上报系统（2017-3-2017-6）\"><a href=\"#三、池州旅游上报系统（2017-3-2017-6）\" class=\"headerlink\" title=\"三、池州旅游上报系统（2017.3-2017-6）\"></a>三、池州旅游上报系统（2017.3-2017-6）</h2><ul>\n<li><p>概述<br>池州市境内的旅游资源相关信息的收集以及上报，审核系统，对于池州市旅游资源的整合，包括景点，酒店，住宿，旅行社，汽车火车站等相关分类  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端： <ul>\n<li>html,css</li>\n<li>jqueryUI  表单上传界面的Tab栏切换，方便将大量的上报字段进行分类处理</li>\n<li>knockout.js  主要用于大量的form表单的双向绑定以及方便与后台数据的通信</li>\n<li>volidform.js  表单的字段规范验证，对于大量的表单字段，提高开发效率</li>\n<li>echarts  上报数据项的数据可视化框架</li>\n<li>layui  上报列表以及审核列表的分页插件</li>\n<li>百度地图javascript版本  在上报表单以及审核中，可以提供目标的地点选择以及地理位置的展示</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>java语言</li>\n<li>spring service处理层</li>\n<li>springMVC 前端控制器</li>\n<li>mybatis dao层数据库操作</li>\n<li>oricle数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、黄山市诚信认证中心微信端系统（2017-2-2017-3）\"><a href=\"#二、黄山市诚信认证中心微信端系统（2017-2-2017-3）\" class=\"headerlink\" title=\"二、黄山市诚信认证中心微信端系统（2017.2-2017.3）\"></a>二、黄山市诚信认证中心微信端系统（2017.2-2017.3）</h2><ul>\n<li><p>概述<br>黄山市诚信认证商户展示以及相关旅游资源的信息，基于黄山诚信认证中心微信号的内置页面开发。  </p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端：<ul>\n<li>html,css3  </li>\n<li>zepto.js</li>\n<li>webuploader   图片上传控件</li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>c#</li>\n<li>SQL server  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查看详情扫下面二维码图片<br> <img src=\"https://github.com/bettermu/blog-picture-store/blob/master/project/%E8%AF%9A%E4%BF%A1%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E5%BE%AE%E4%BF%A1%E7%AB%AF.png?raw=true\"></p>\n</li>\n</ul>\n<h2 id=\"一、福利宝微信端线上商城-（2016-12-2017-1）\"><a href=\"#一、福利宝微信端线上商城-（2016-12-2017-1）\" class=\"headerlink\" title=\"一、福利宝微信端线上商城 （2016.12-2017.1）\"></a>一、福利宝微信端线上商城 （2016.12-2017.1）</h2><ul>\n<li><p>概述<br>讯飞企业内部的商城系统，用于员工过年过节的内购，基于微信内部的浏览器开发的手机端商城，方便员工进行操作。</p>\n</li>\n<li><p>主要技术  </p>\n<ul>\n<li>前端：<ul>\n<li>html</li>\n<li>css3</li>\n<li>zepto.js  </li>\n</ul>\n</li>\n<li>后端：<ul>\n<li>c#</li>\n<li>SQL server</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}],"Post":[{"title":"Android Studio布局加载器不显示的问题","date":"2018-06-22T13:01:00.000Z","_content":"\n最近闲来无事，在倒腾安卓开发，在配置好所有的环境，以及安装了Android Studio的IDE后，首先尝鲜的第一个例子，就是在界面上绘制一个Button组件，明明配置好了按钮组件，但是，在Android Studio自带的布局加载器里，却不显示，如下图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/2.png?raw=true)\n\n但是当我在虚拟机中运行这个项目的时候，却又奇迹般的渲染上去了：   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/1.png?raw=true)\n\n这到底是什么原因呢，作为一个喜欢折腾，又想把事情弄清楚的前端小工，我还是选择了网上搜索答案，那么网上给的答案真的是五花八门，什么环境问题啊 版本问题啊，之类的，我都逐一排除了，后来我最终找到了可以一试的方法：  \n\n将style文件中的theme改一下，在Theme.AppCompat.Light.DarkActionBar前面加上Base.  如下    \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/3.png?raw=true)\n\n改变成下面的样子：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/4.png?raw=true)\n\n这回再进布局加载器，果然，一切就正常了，添加的Button组件也正常展示了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/5.png?raw=true)","source":"_posts/Android-Studio布局加载器不显示的问题.md","raw":"---\ntitle: Android Studio布局加载器不显示的问题\ndate: 2018-06-22 21:01:00\ntags:\n  - Android Studio\ncategories:\n  - Android\n---\n\n最近闲来无事，在倒腾安卓开发，在配置好所有的环境，以及安装了Android Studio的IDE后，首先尝鲜的第一个例子，就是在界面上绘制一个Button组件，明明配置好了按钮组件，但是，在Android Studio自带的布局加载器里，却不显示，如下图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/2.png?raw=true)\n\n但是当我在虚拟机中运行这个项目的时候，却又奇迹般的渲染上去了：   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/1.png?raw=true)\n\n这到底是什么原因呢，作为一个喜欢折腾，又想把事情弄清楚的前端小工，我还是选择了网上搜索答案，那么网上给的答案真的是五花八门，什么环境问题啊 版本问题啊，之类的，我都逐一排除了，后来我最终找到了可以一试的方法：  \n\n将style文件中的theme改一下，在Theme.AppCompat.Light.DarkActionBar前面加上Base.  如下    \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/3.png?raw=true)\n\n改变成下面的样子：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/4.png?raw=true)\n\n这回再进布局加载器，果然，一切就正常了，添加的Button组件也正常展示了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180622/5.png?raw=true)","slug":"Android-Studio布局加载器不显示的问题","published":1,"updated":"2018-06-22T13:21:06.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxl10001msvicms9hgxu","content":"<p>最近闲来无事，在倒腾安卓开发，在配置好所有的环境，以及安装了Android Studio的IDE后，首先尝鲜的第一个例子，就是在界面上绘制一个Button组件，明明配置好了按钮组件，但是，在Android Studio自带的布局加载器里，却不显示，如下图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/2.png?raw=true\"></p>\n<p>但是当我在虚拟机中运行这个项目的时候，却又奇迹般的渲染上去了：   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/1.png?raw=true\"></p>\n<p>这到底是什么原因呢，作为一个喜欢折腾，又想把事情弄清楚的前端小工，我还是选择了网上搜索答案，那么网上给的答案真的是五花八门，什么环境问题啊 版本问题啊，之类的，我都逐一排除了，后来我最终找到了可以一试的方法：  </p>\n<p>将style文件中的theme改一下，在Theme.AppCompat.Light.DarkActionBar前面加上Base.  如下    </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/3.png?raw=true\"></p>\n<p>改变成下面的样子：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/4.png?raw=true\"></p>\n<p>这回再进布局加载器，果然，一切就正常了，添加的Button组件也正常展示了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/5.png?raw=true\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近闲来无事，在倒腾安卓开发，在配置好所有的环境，以及安装了Android Studio的IDE后，首先尝鲜的第一个例子，就是在界面上绘制一个Button组件，明明配置好了按钮组件，但是，在Android Studio自带的布局加载器里，却不显示，如下图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/2.png?raw=true\"></p>\n<p>但是当我在虚拟机中运行这个项目的时候，却又奇迹般的渲染上去了：   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/1.png?raw=true\"></p>\n<p>这到底是什么原因呢，作为一个喜欢折腾，又想把事情弄清楚的前端小工，我还是选择了网上搜索答案，那么网上给的答案真的是五花八门，什么环境问题啊 版本问题啊，之类的，我都逐一排除了，后来我最终找到了可以一试的方法：  </p>\n<p>将style文件中的theme改一下，在Theme.AppCompat.Light.DarkActionBar前面加上Base.  如下    </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/3.png?raw=true\"></p>\n<p>改变成下面的样子：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/4.png?raw=true\"></p>\n<p>这回再进布局加载器，果然，一切就正常了，添加的Button组件也正常展示了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180622/5.png?raw=true\"></p>\n"},{"title":"JS模拟bind方法实现","date":"2018-06-01T14:38:27.000Z","_content":"\n\n## bind\n\n在日常的js开发中，我们常常需要跟this指针打交道。那么我们常用的一个绑定this指针到当前上下文中的bind方法，不管是在es5中的常规绑定方式，还是在es6中如React中动态绑定this指针的方法：\n```javascript\nclass XXX extends React.Component {\n  constructor(){\n    this.XXfunction=this.XXfunction.bind(this)\n  }\n\n  XXfunction(){\n    ....\n  }\n\n  render(){\n    return(\n      <div onClick={this.XXfunction}></div>\n    )\n  }\n}\n```\n如上代码所示，只用在constructor初始化函数内使用bind方法绑定this，才能在标签中使用this.XXFunction的写法   \n****\n那么这个bind到底是如何实现this的绑定的呢？我们又怎么去模拟实现一个自己的bind函数？首先我们来看下，bind函数的定义：\n****  \nbind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )  \n****\n由此，我们能够得出bind函数的两个特点  \n\n* 返回一个函数\n* 可以传入参数\n\n\n## 返回函数的实现\n\n从第一个特点开始，举例：\n```js\nvar foo={\n  val:1\n}\nfunction haha(){\n  console.log(this.val);\n}\n\n//返回了一个函数\nvar bindFoo=haha.bind(foo);\n\nbindFoo(); // 1\n```\n下面呢，为了实现上面的结果，第一版的代码如下，将使用apply的特性来实现，关于apply和call的使用方法，这里不再赘述：\n```js\n  Function.prototype.bind2=function(context){\n    \n    //缓存this，保证返回的函数内能正常访问其所在的外部上下文\n    var self=this;\n\n    //返回的函数\n    return function(){\n\n      //利用apply来改变this指向\n      self.apply(context)\n    }\n  }\n\n\n```\n\n## 传参的模拟实现\n接下来，看第二点，可以传入参数。这个该怎么实现呢，我在bind的时候，是否可以传参呢？我在执行bind返回函数的时候，是否可以传参呢？举个例子：\n```js\nvar foo={\n  val:1\n}\n\nfunction haha(name,age){\n  console.log(this.val);\n  console.log(name);\n  console.log(age);\n}\n\nvar bindFoo=haha.bind(foo,'better');\n\nbindFoo('20');\n// 1\n// better\n// 20\n```\n\n函数需要传入name和age两个参数，竟然还可以在bind的时候，只传一个name，在执行返回的函数的时候，再传入另外一个参数age，其实现方法，类似于曾探的javascript设计模式里所说过的那种高阶函数，函数的柯里化，利用arguments的特性：\n```js\n//第二版\nFunction.prototype.bind2=function(context){\n  var self=this;\n  //获取bind2函数从第二个参数到最后一个参数\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  return function(){\n    //获取返回函数时传入的参数\n    var args2=Array.prototype.slice.call(arguments)\n    self.apply(context,args1.concat(args2))\n  }\n}\n```\n\n## 构造函数效果的实现\n完成了这两点，最难的部分在于，bind还有一个特点：\n****\n一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\n****\n也就是说，当bind返回的函数作为构造函数的时候，bind时指定的this值会失效，但传入的参数依然生效，举个例子：\n```js\nvar value=2;\nvar foo={\n  val:1\n}\nfunction haha(name,age){\n    this.habit = 'shopping';\n    console.log(this.value);\n    console.log(name);\n    console.log(age);\n}\n\nhaha.prototype.friend='huhu';\n\nvar bindFoo=haha.bind(foo,'better');\n\nvar obj=new bindFoo('20');\n// undefined\n// better\n// 20\n\nconsole.log(obj.habit); //shopping\nconsole.log(obj.friend); // huhu\n```\n\n注意：尽管在全局和 foo 中都声明了 val 值，最后依然返回了 undefind，说明绑定的 this 失效了，如果大家了解 new 的模拟实现，就会知道这个时候的 this 已经指向了 obj。   \n所以，我们可以通过修改返回的函数的原型来实现：\n```js\n//第三版\nFunction.prototype.bind2=function(){\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fbound=function(){\n    var args2=Array.prototype.slice.call(arguments);\n    // 当作为构造函数时，this 指向实例，self 指向绑定函数，因为下面一句 `fbound.prototype = this.prototype;`，已经修改了 fbound.prototype 为 绑定函数的 prototype，此时结果为 true，当结果为 true 的时候，this 指向实例。\n    // 当作为普通函数时，this 指向 window，self 指向绑定函数，此时结果为 false，当结果为 false 的时候，this 指向绑定的 context。\n    self.apply(this instanceof self?this:context,args1.concat(args2))\n  }\n  //修改返回函数的prototype为绑定函数的prototype，实例就可以继承函数的原型中的值\n  fbound.prototype=this.prototype;\n  return fbound;\n}\n```\n\n## 构造函数效果的优化实现\n但是在这个写法中，我们直接将 fbound.prototype = this.prototype，我们直接修改 fbound.prototype 的时候，也会直接修改函数的 prototype。这个时候，我们可以通过一个空函数来进行中转：\n```js\n//第四版\nFunction.prototype.bind2=function(){\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fNOP=function(){};\n\n  var fbound=function(){\n    var args2=Array.prototype.slice.call(arguments);\n    self.apply(this instanceof self?this:context,args1.concat(args2))\n  }\n  \n  fNOP.prototype=this.prototype;\n  fbound.prototype=new fNOP();\n  return fbound;\n}\n```\n\n## 还有个小问题\n调用 bind 的不是函数咋办？需要进行抛出错误\n```js\nif (typeof this !== \"function\") {\n  throw new Error(\"Function.prototype.bind - what is trying to be bound is not callable\");\n}\n```\n\n## 最终代码\n所以最终代码是：\n```js\nFunction.prototype.bind2=function(){\n  \n  if (typeof this !== \"function\") {\n    throw new Error(\"Function.prototype.bind - what is trying to be bound is not callable\");\n  }\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fNOP=function(){};\n\n  var fbound=function(){\n    \n    self.apply(this instanceof self?this:context,args1.concat(Array.prototype.slice.call(arguments)))\n  }\n  \n  fNOP.prototype=this.prototype;\n  fbound.prototype=new fNOP();\n  return fbound;\n}\n```\n\n\n\n","source":"_posts/JS模拟bind方法实现.md","raw":"---\ntitle: JS模拟bind方法实现\ndate: 2018-06-01 22:38:27\ntags:\n  - 原生js\ncategories:\n  - js\n---\n\n\n## bind\n\n在日常的js开发中，我们常常需要跟this指针打交道。那么我们常用的一个绑定this指针到当前上下文中的bind方法，不管是在es5中的常规绑定方式，还是在es6中如React中动态绑定this指针的方法：\n```javascript\nclass XXX extends React.Component {\n  constructor(){\n    this.XXfunction=this.XXfunction.bind(this)\n  }\n\n  XXfunction(){\n    ....\n  }\n\n  render(){\n    return(\n      <div onClick={this.XXfunction}></div>\n    )\n  }\n}\n```\n如上代码所示，只用在constructor初始化函数内使用bind方法绑定this，才能在标签中使用this.XXFunction的写法   \n****\n那么这个bind到底是如何实现this的绑定的呢？我们又怎么去模拟实现一个自己的bind函数？首先我们来看下，bind函数的定义：\n****  \nbind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )  \n****\n由此，我们能够得出bind函数的两个特点  \n\n* 返回一个函数\n* 可以传入参数\n\n\n## 返回函数的实现\n\n从第一个特点开始，举例：\n```js\nvar foo={\n  val:1\n}\nfunction haha(){\n  console.log(this.val);\n}\n\n//返回了一个函数\nvar bindFoo=haha.bind(foo);\n\nbindFoo(); // 1\n```\n下面呢，为了实现上面的结果，第一版的代码如下，将使用apply的特性来实现，关于apply和call的使用方法，这里不再赘述：\n```js\n  Function.prototype.bind2=function(context){\n    \n    //缓存this，保证返回的函数内能正常访问其所在的外部上下文\n    var self=this;\n\n    //返回的函数\n    return function(){\n\n      //利用apply来改变this指向\n      self.apply(context)\n    }\n  }\n\n\n```\n\n## 传参的模拟实现\n接下来，看第二点，可以传入参数。这个该怎么实现呢，我在bind的时候，是否可以传参呢？我在执行bind返回函数的时候，是否可以传参呢？举个例子：\n```js\nvar foo={\n  val:1\n}\n\nfunction haha(name,age){\n  console.log(this.val);\n  console.log(name);\n  console.log(age);\n}\n\nvar bindFoo=haha.bind(foo,'better');\n\nbindFoo('20');\n// 1\n// better\n// 20\n```\n\n函数需要传入name和age两个参数，竟然还可以在bind的时候，只传一个name，在执行返回的函数的时候，再传入另外一个参数age，其实现方法，类似于曾探的javascript设计模式里所说过的那种高阶函数，函数的柯里化，利用arguments的特性：\n```js\n//第二版\nFunction.prototype.bind2=function(context){\n  var self=this;\n  //获取bind2函数从第二个参数到最后一个参数\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  return function(){\n    //获取返回函数时传入的参数\n    var args2=Array.prototype.slice.call(arguments)\n    self.apply(context,args1.concat(args2))\n  }\n}\n```\n\n## 构造函数效果的实现\n完成了这两点，最难的部分在于，bind还有一个特点：\n****\n一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\n****\n也就是说，当bind返回的函数作为构造函数的时候，bind时指定的this值会失效，但传入的参数依然生效，举个例子：\n```js\nvar value=2;\nvar foo={\n  val:1\n}\nfunction haha(name,age){\n    this.habit = 'shopping';\n    console.log(this.value);\n    console.log(name);\n    console.log(age);\n}\n\nhaha.prototype.friend='huhu';\n\nvar bindFoo=haha.bind(foo,'better');\n\nvar obj=new bindFoo('20');\n// undefined\n// better\n// 20\n\nconsole.log(obj.habit); //shopping\nconsole.log(obj.friend); // huhu\n```\n\n注意：尽管在全局和 foo 中都声明了 val 值，最后依然返回了 undefind，说明绑定的 this 失效了，如果大家了解 new 的模拟实现，就会知道这个时候的 this 已经指向了 obj。   \n所以，我们可以通过修改返回的函数的原型来实现：\n```js\n//第三版\nFunction.prototype.bind2=function(){\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fbound=function(){\n    var args2=Array.prototype.slice.call(arguments);\n    // 当作为构造函数时，this 指向实例，self 指向绑定函数，因为下面一句 `fbound.prototype = this.prototype;`，已经修改了 fbound.prototype 为 绑定函数的 prototype，此时结果为 true，当结果为 true 的时候，this 指向实例。\n    // 当作为普通函数时，this 指向 window，self 指向绑定函数，此时结果为 false，当结果为 false 的时候，this 指向绑定的 context。\n    self.apply(this instanceof self?this:context,args1.concat(args2))\n  }\n  //修改返回函数的prototype为绑定函数的prototype，实例就可以继承函数的原型中的值\n  fbound.prototype=this.prototype;\n  return fbound;\n}\n```\n\n## 构造函数效果的优化实现\n但是在这个写法中，我们直接将 fbound.prototype = this.prototype，我们直接修改 fbound.prototype 的时候，也会直接修改函数的 prototype。这个时候，我们可以通过一个空函数来进行中转：\n```js\n//第四版\nFunction.prototype.bind2=function(){\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fNOP=function(){};\n\n  var fbound=function(){\n    var args2=Array.prototype.slice.call(arguments);\n    self.apply(this instanceof self?this:context,args1.concat(args2))\n  }\n  \n  fNOP.prototype=this.prototype;\n  fbound.prototype=new fNOP();\n  return fbound;\n}\n```\n\n## 还有个小问题\n调用 bind 的不是函数咋办？需要进行抛出错误\n```js\nif (typeof this !== \"function\") {\n  throw new Error(\"Function.prototype.bind - what is trying to be bound is not callable\");\n}\n```\n\n## 最终代码\n所以最终代码是：\n```js\nFunction.prototype.bind2=function(){\n  \n  if (typeof this !== \"function\") {\n    throw new Error(\"Function.prototype.bind - what is trying to be bound is not callable\");\n  }\n  var self=this;\n  var args1=Array.prototype.slice.call(arguments,1);\n\n  var fNOP=function(){};\n\n  var fbound=function(){\n    \n    self.apply(this instanceof self?this:context,args1.concat(Array.prototype.slice.call(arguments)))\n  }\n  \n  fNOP.prototype=this.prototype;\n  fbound.prototype=new fNOP();\n  return fbound;\n}\n```\n\n\n\n","slug":"JS模拟bind方法实现","published":1,"updated":"2018-06-01T14:39:31.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxl60003msvi7sdhgumt","content":"<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>在日常的js开发中，我们常常需要跟this指针打交道。那么我们常用的一个绑定this指针到当前上下文中的bind方法，不管是在es5中的常规绑定方式，还是在es6中如React中动态绑定this指针的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXX</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.XXfunction=<span class=\"built_in\">this</span>.XXfunction.bind(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">XXfunction</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(</span><br><span class=\"line\">      &lt;div onClick=&#123;<span class=\"built_in\">this</span>.XXfunction&#125;&gt;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，只用在constructor初始化函数内使用bind方法绑定this，才能在标签中使用this.XXFunction的写法   </p>\n<hr>\n<p>那么这个bind到底是如何实现this的绑定的呢？我们又怎么去模拟实现一个自己的bind函数？首先我们来看下，bind函数的定义：</p>\n<hr>\n<p>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )  </p>\n<hr>\n<p>由此，我们能够得出bind函数的两个特点  </p>\n<ul>\n<li>返回一个函数</li>\n<li>可以传入参数</li>\n</ul>\n<h2 id=\"返回函数的实现\"><a href=\"#返回函数的实现\" class=\"headerlink\" title=\"返回函数的实现\"></a>返回函数的实现</h2><p>从第一个特点开始，举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回了一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">bindFoo(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>下面呢，为了实现上面的结果，第一版的代码如下，将使用apply的特性来实现，关于apply和call的使用方法，这里不再赘述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//缓存this，保证返回的函数内能正常访问其所在的外部上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//返回的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//利用apply来改变this指向</span></span><br><span class=\"line\">    self.apply(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"传参的模拟实现\"><a href=\"#传参的模拟实现\" class=\"headerlink\" title=\"传参的模拟实现\"></a>传参的模拟实现</h2><p>接下来，看第二点，可以传入参数。这个该怎么实现呢，我在bind的时候，是否可以传参呢？我在执行bind返回函数的时候，是否可以传参呢？举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.val);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo,<span class=\"string\">&#x27;better&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">bindFoo(<span class=\"string\">&#x27;20&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p>函数需要传入name和age两个参数，竟然还可以在bind的时候，只传一个name，在执行返回的函数的时候，再传入另外一个参数age，其实现方法，类似于曾探的javascript设计模式里所说过的那种高阶函数，函数的柯里化，利用arguments的特性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取bind2函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取返回函数时传入的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    self.apply(context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数效果的实现\"><a href=\"#构造函数效果的实现\" class=\"headerlink\" title=\"构造函数效果的实现\"></a>构造函数效果的实现</h2><p>完成了这两点，最难的部分在于，bind还有一个特点：</p>\n<hr>\n<p>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>\n<hr>\n<p>也就是说，当bind返回的函数作为构造函数的时候，bind时指定的this值会失效，但传入的参数依然生效，举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.habit = <span class=\"string\">&#x27;shopping&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">haha.prototype.friend=<span class=\"string\">&#x27;huhu&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo,<span class=\"string\">&#x27;better&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> bindFoo(<span class=\"string\">&#x27;20&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.habit); <span class=\"comment\">//shopping</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.friend); <span class=\"comment\">// huhu</span></span><br></pre></td></tr></table></figure>\n<p>注意：尽管在全局和 foo 中都声明了 val 值，最后依然返回了 undefind，说明绑定的 this 失效了，如果大家了解 new 的模拟实现，就会知道这个时候的 this 已经指向了 obj。<br>所以，我们可以通过修改返回的函数的原型来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第三版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当作为构造函数时，this 指向实例，self 指向绑定函数，因为下面一句 `fbound.prototype = this.prototype;`，已经修改了 fbound.prototype 为 绑定函数的 prototype，此时结果为 true，当结果为 true 的时候，this 指向实例。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当作为普通函数时，this 指向 window，self 指向绑定函数，此时结果为 false，当结果为 false 的时候，this 指向绑定的 context。</span></span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//修改返回函数的prototype为绑定函数的prototype，实例就可以继承函数的原型中的值</span></span><br><span class=\"line\">  fbound.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数效果的优化实现\"><a href=\"#构造函数效果的优化实现\" class=\"headerlink\" title=\"构造函数效果的优化实现\"></a>构造函数效果的优化实现</h2><p>但是在这个写法中，我们直接将 fbound.prototype = this.prototype，我们直接修改 fbound.prototype 的时候，也会直接修改函数的 prototype。这个时候，我们可以通过一个空函数来进行中转：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第四版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fNOP=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  fNOP.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  fbound.prototype=<span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"还有个小问题\"><a href=\"#还有个小问题\" class=\"headerlink\" title=\"还有个小问题\"></a>还有个小问题</h2><p>调用 bind 的不是函数咋办？需要进行抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终代码\"><a href=\"#最终代码\" class=\"headerlink\" title=\"最终代码\"></a>最终代码</h2><p>所以最终代码是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fNOP=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  fNOP.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  fbound.prototype=<span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>在日常的js开发中，我们常常需要跟this指针打交道。那么我们常用的一个绑定this指针到当前上下文中的bind方法，不管是在es5中的常规绑定方式，还是在es6中如React中动态绑定this指针的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXX</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.XXfunction=<span class=\"built_in\">this</span>.XXfunction.bind(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">XXfunction</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(</span><br><span class=\"line\">      &lt;div onClick=&#123;<span class=\"built_in\">this</span>.XXfunction&#125;&gt;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，只用在constructor初始化函数内使用bind方法绑定this，才能在标签中使用this.XXFunction的写法   </p>\n<hr>\n<p>那么这个bind到底是如何实现this的绑定的呢？我们又怎么去模拟实现一个自己的bind函数？首先我们来看下，bind函数的定义：</p>\n<hr>\n<p>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )  </p>\n<hr>\n<p>由此，我们能够得出bind函数的两个特点  </p>\n<ul>\n<li>返回一个函数</li>\n<li>可以传入参数</li>\n</ul>\n<h2 id=\"返回函数的实现\"><a href=\"#返回函数的实现\" class=\"headerlink\" title=\"返回函数的实现\"></a>返回函数的实现</h2><p>从第一个特点开始，举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回了一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">bindFoo(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>下面呢，为了实现上面的结果，第一版的代码如下，将使用apply的特性来实现，关于apply和call的使用方法，这里不再赘述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//缓存this，保证返回的函数内能正常访问其所在的外部上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//返回的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//利用apply来改变this指向</span></span><br><span class=\"line\">    self.apply(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"传参的模拟实现\"><a href=\"#传参的模拟实现\" class=\"headerlink\" title=\"传参的模拟实现\"></a>传参的模拟实现</h2><p>接下来，看第二点，可以传入参数。这个该怎么实现呢，我在bind的时候，是否可以传参呢？我在执行bind返回函数的时候，是否可以传参呢？举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.val);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo,<span class=\"string\">&#x27;better&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">bindFoo(<span class=\"string\">&#x27;20&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p>函数需要传入name和age两个参数，竟然还可以在bind的时候，只传一个name，在执行返回的函数的时候，再传入另外一个参数age，其实现方法，类似于曾探的javascript设计模式里所说过的那种高阶函数，函数的柯里化，利用arguments的特性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取bind2函数从第二个参数到最后一个参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取返回函数时传入的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    self.apply(context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数效果的实现\"><a href=\"#构造函数效果的实现\" class=\"headerlink\" title=\"构造函数效果的实现\"></a>构造函数效果的实现</h2><p>完成了这两点，最难的部分在于，bind还有一个特点：</p>\n<hr>\n<p>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>\n<hr>\n<p>也就是说，当bind返回的函数作为构造函数的时候，bind时指定的this值会失效，但传入的参数依然生效，举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo=&#123;</span><br><span class=\"line\">  val:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.habit = <span class=\"string\">&#x27;shopping&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">haha.prototype.friend=<span class=\"string\">&#x27;huhu&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFoo=haha.bind(foo,<span class=\"string\">&#x27;better&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> bindFoo(<span class=\"string\">&#x27;20&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.habit); <span class=\"comment\">//shopping</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.friend); <span class=\"comment\">// huhu</span></span><br></pre></td></tr></table></figure>\n<p>注意：尽管在全局和 foo 中都声明了 val 值，最后依然返回了 undefind，说明绑定的 this 失效了，如果大家了解 new 的模拟实现，就会知道这个时候的 this 已经指向了 obj。<br>所以，我们可以通过修改返回的函数的原型来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第三版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当作为构造函数时，this 指向实例，self 指向绑定函数，因为下面一句 `fbound.prototype = this.prototype;`，已经修改了 fbound.prototype 为 绑定函数的 prototype，此时结果为 true，当结果为 true 的时候，this 指向实例。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当作为普通函数时，this 指向 window，self 指向绑定函数，此时结果为 false，当结果为 false 的时候，this 指向绑定的 context。</span></span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//修改返回函数的prototype为绑定函数的prototype，实例就可以继承函数的原型中的值</span></span><br><span class=\"line\">  fbound.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数效果的优化实现\"><a href=\"#构造函数效果的优化实现\" class=\"headerlink\" title=\"构造函数效果的优化实现\"></a>构造函数效果的优化实现</h2><p>但是在这个写法中，我们直接将 fbound.prototype = this.prototype，我们直接修改 fbound.prototype 的时候，也会直接修改函数的 prototype。这个时候，我们可以通过一个空函数来进行中转：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第四版</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fNOP=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args2=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  fNOP.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  fbound.prototype=<span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"还有个小问题\"><a href=\"#还有个小问题\" class=\"headerlink\" title=\"还有个小问题\"></a>还有个小问题</h2><p>调用 bind 的不是函数咋办？需要进行抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终代码\"><a href=\"#最终代码\" class=\"headerlink\" title=\"最终代码\"></a>最终代码</h2><p>所以最终代码是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self=<span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1=<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fNOP=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.apply(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> self?<span class=\"built_in\">this</span>:context,args1.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  fNOP.prototype=<span class=\"built_in\">this</span>.prototype;</span><br><span class=\"line\">  fbound.prototype=<span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"JS对select动态添加options操作（主流浏览器兼容）","date":"2018-03-23T01:50:16.000Z","_content":"\n　　之前项目中，遇到一个表单提交的页面，里面有多级下拉框联动的复杂逻辑，因此当时在做的过程中也是学到了不少容易出现问题的地方，下面就整理下当时遇到的一些关于下拉框的操作，并指出其中的一些注意点和坑：\n\n有如下的下拉框： \n```html\n<select id=\"ddlResourceType\" onchange=\"getvalue(this)\"> \n</select> \n```\n* 动态删除select中的所有options：\n```js\ndocument.getElementById(\"ddlResourceType\").options.length=0;\n```\n* 动态删除select中的某一项option：\n```js\ndocument.getElementById(\"ddlResourceType\").options.remove(index); \n```\n* 动态添加select中的项option: \n```js\ndocument.getElementById(\"ddlResourceType\").options.add(new Option(text,value)); \n```\n* 下面要说下在取值方面，自己遇到的一个坑，很隐藏的坑，大家都知道，如何获取选中的某一项option的值，当初在用chrome调试的时候，打印出了原生select对象，找到了selectedOptions这个选中项的数组属性，正常情况下，单选下拉框的该属性只有一个值，默认可以使用selectedOptions[0]这样的方式去获取，是的，我当时就是这样去弄的，结果项目上线后大概将近半个月的时候，运营那边报告说，客户在IE浏览器下，下拉框没有数据显示，我当时就想，下拉框动态获取的数据肯定是取数据的时候，出现错误了，然后逐一去排查，发现报错的原因是ie下面select原生对象里，是没有selectedOptions这样的属性的，那么只能另辟蹊径来解决了，我仔细找了下剩余的一些属性，发现  找到了 selctedIndex这样的一个好属性，一看字面意思就明白了，就是选中项的index值啊，这就好办了啊，直接用options[selectedIndex]去访问不就好了么，到此，问题顺利解决，取值的时候，应该这样做，才能保证兼容性：\n```js\nfunction getvalue(obj) \n    { \n        var m=obj.options[obj.selectedIndex].value \n        alert(m);//获取value \n        var n=obj.options[obj.selectedIndex].text \n        alert(n);//获取文本 \n    }\n```\n* 检测是否有选中\n```js\nif (objSelect.selectedIndex > - 1 ) { \n// 说明选中 \n} else { \n// 说明没有选中 \n} \n```\n* 删除被选中的项 \n```js\nobjSelect.options[objSelect.selectedIndex] = null ; \n```\n* 增加项\n```js\nobjSelect.options[objSelect.length] = new Option( \" 你好 \" , \" hello \" ); \n```\n* 修改所选择中的项\n```js\nobjSelect.options[objSelect.selectedIndex] = new Option( \" 你好 \" , \" hello \" );\n```\n* 得到所选择项的文本\n```js\nobjSelect.options[objSelect.selectedIndex].text; \n```\n* 得到所选择项的值\n```js\nobjSelect.options[objSelect.selectedIndex].value;\n```\n\n\n结语：纸上得来终觉浅，绝知此事要躬行。必须要去尝试，在实践中，才能获得解决问题的最有效的途径，这也是让记忆深刻的唯一方式，共勉。\n","source":"_posts/JS对select动态添加options操作（主流浏览器兼容）.md","raw":"---\ntitle: JS对select动态添加options操作（主流浏览器兼容）\ndate: 2018-03-23 09:50:16\ntags:\n  - js\ncategories:\n  - js\n---\n\n　　之前项目中，遇到一个表单提交的页面，里面有多级下拉框联动的复杂逻辑，因此当时在做的过程中也是学到了不少容易出现问题的地方，下面就整理下当时遇到的一些关于下拉框的操作，并指出其中的一些注意点和坑：\n\n有如下的下拉框： \n```html\n<select id=\"ddlResourceType\" onchange=\"getvalue(this)\"> \n</select> \n```\n* 动态删除select中的所有options：\n```js\ndocument.getElementById(\"ddlResourceType\").options.length=0;\n```\n* 动态删除select中的某一项option：\n```js\ndocument.getElementById(\"ddlResourceType\").options.remove(index); \n```\n* 动态添加select中的项option: \n```js\ndocument.getElementById(\"ddlResourceType\").options.add(new Option(text,value)); \n```\n* 下面要说下在取值方面，自己遇到的一个坑，很隐藏的坑，大家都知道，如何获取选中的某一项option的值，当初在用chrome调试的时候，打印出了原生select对象，找到了selectedOptions这个选中项的数组属性，正常情况下，单选下拉框的该属性只有一个值，默认可以使用selectedOptions[0]这样的方式去获取，是的，我当时就是这样去弄的，结果项目上线后大概将近半个月的时候，运营那边报告说，客户在IE浏览器下，下拉框没有数据显示，我当时就想，下拉框动态获取的数据肯定是取数据的时候，出现错误了，然后逐一去排查，发现报错的原因是ie下面select原生对象里，是没有selectedOptions这样的属性的，那么只能另辟蹊径来解决了，我仔细找了下剩余的一些属性，发现  找到了 selctedIndex这样的一个好属性，一看字面意思就明白了，就是选中项的index值啊，这就好办了啊，直接用options[selectedIndex]去访问不就好了么，到此，问题顺利解决，取值的时候，应该这样做，才能保证兼容性：\n```js\nfunction getvalue(obj) \n    { \n        var m=obj.options[obj.selectedIndex].value \n        alert(m);//获取value \n        var n=obj.options[obj.selectedIndex].text \n        alert(n);//获取文本 \n    }\n```\n* 检测是否有选中\n```js\nif (objSelect.selectedIndex > - 1 ) { \n// 说明选中 \n} else { \n// 说明没有选中 \n} \n```\n* 删除被选中的项 \n```js\nobjSelect.options[objSelect.selectedIndex] = null ; \n```\n* 增加项\n```js\nobjSelect.options[objSelect.length] = new Option( \" 你好 \" , \" hello \" ); \n```\n* 修改所选择中的项\n```js\nobjSelect.options[objSelect.selectedIndex] = new Option( \" 你好 \" , \" hello \" );\n```\n* 得到所选择项的文本\n```js\nobjSelect.options[objSelect.selectedIndex].text; \n```\n* 得到所选择项的值\n```js\nobjSelect.options[objSelect.selectedIndex].value;\n```\n\n\n结语：纸上得来终觉浅，绝知此事要躬行。必须要去尝试，在实践中，才能获得解决问题的最有效的途径，这也是让记忆深刻的唯一方式，共勉。\n","slug":"JS对select动态添加options操作（主流浏览器兼容）","published":1,"updated":"2018-06-01T01:59:53.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxl90007msvihniy8med","content":"<p>　　之前项目中，遇到一个表单提交的页面，里面有多级下拉框联动的复杂逻辑，因此当时在做的过程中也是学到了不少容易出现问题的地方，下面就整理下当时遇到的一些关于下拉框的操作，并指出其中的一些注意点和坑：</p>\n<p>有如下的下拉框： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ddlResourceType&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;getvalue(this)&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>动态删除select中的所有options：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.length=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></li>\n<li>动态删除select中的某一项option：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.remove(index); </span><br></pre></td></tr></table></figure></li>\n<li>动态添加select中的项option: <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.add(<span class=\"keyword\">new</span> Option(text,value)); </span><br></pre></td></tr></table></figure></li>\n<li>下面要说下在取值方面，自己遇到的一个坑，很隐藏的坑，大家都知道，如何获取选中的某一项option的值，当初在用chrome调试的时候，打印出了原生select对象，找到了selectedOptions这个选中项的数组属性，正常情况下，单选下拉框的该属性只有一个值，默认可以使用selectedOptions[0]这样的方式去获取，是的，我当时就是这样去弄的，结果项目上线后大概将近半个月的时候，运营那边报告说，客户在IE浏览器下，下拉框没有数据显示，我当时就想，下拉框动态获取的数据肯定是取数据的时候，出现错误了，然后逐一去排查，发现报错的原因是ie下面select原生对象里，是没有selectedOptions这样的属性的，那么只能另辟蹊径来解决了，我仔细找了下剩余的一些属性，发现  找到了 selctedIndex这样的一个好属性，一看字面意思就明白了，就是选中项的index值啊，这就好办了啊，直接用options[selectedIndex]去访问不就好了么，到此，问题顺利解决，取值的时候，应该这样做，才能保证兼容性：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getvalue</span>(<span class=\"params\">obj</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> m=obj.options[obj.selectedIndex].value </span><br><span class=\"line\">        alert(m);<span class=\"comment\">//获取value </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> n=obj.options[obj.selectedIndex].text </span><br><span class=\"line\">        alert(n);<span class=\"comment\">//获取文本 </span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>检测是否有选中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (objSelect.selectedIndex &gt; - <span class=\"number\">1</span> ) &#123; </span><br><span class=\"line\"><span class=\"comment\">// 说明选中 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">// 说明没有选中 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n<li>删除被选中的项 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex] = <span class=\"literal\">null</span> ; </span><br></pre></td></tr></table></figure></li>\n<li>增加项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.length] = <span class=\"keyword\">new</span> Option( <span class=\"string\">&quot; 你好 &quot;</span> , <span class=\"string\">&quot; hello &quot;</span> ); </span><br></pre></td></tr></table></figure></li>\n<li>修改所选择中的项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex] = <span class=\"keyword\">new</span> Option( <span class=\"string\">&quot; 你好 &quot;</span> , <span class=\"string\">&quot; hello &quot;</span> );</span><br></pre></td></tr></table></figure></li>\n<li>得到所选择项的文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex].text; </span><br></pre></td></tr></table></figure></li>\n<li>得到所选择项的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex].value;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>结语：纸上得来终觉浅，绝知此事要躬行。必须要去尝试，在实践中，才能获得解决问题的最有效的途径，这也是让记忆深刻的唯一方式，共勉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　之前项目中，遇到一个表单提交的页面，里面有多级下拉框联动的复杂逻辑，因此当时在做的过程中也是学到了不少容易出现问题的地方，下面就整理下当时遇到的一些关于下拉框的操作，并指出其中的一些注意点和坑：</p>\n<p>有如下的下拉框： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ddlResourceType&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;getvalue(this)&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li>动态删除select中的所有options：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.length=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></li>\n<li>动态删除select中的某一项option：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.remove(index); </span><br></pre></td></tr></table></figure></li>\n<li>动态添加select中的项option: <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ddlResourceType&quot;</span>).options.add(<span class=\"keyword\">new</span> Option(text,value)); </span><br></pre></td></tr></table></figure></li>\n<li>下面要说下在取值方面，自己遇到的一个坑，很隐藏的坑，大家都知道，如何获取选中的某一项option的值，当初在用chrome调试的时候，打印出了原生select对象，找到了selectedOptions这个选中项的数组属性，正常情况下，单选下拉框的该属性只有一个值，默认可以使用selectedOptions[0]这样的方式去获取，是的，我当时就是这样去弄的，结果项目上线后大概将近半个月的时候，运营那边报告说，客户在IE浏览器下，下拉框没有数据显示，我当时就想，下拉框动态获取的数据肯定是取数据的时候，出现错误了，然后逐一去排查，发现报错的原因是ie下面select原生对象里，是没有selectedOptions这样的属性的，那么只能另辟蹊径来解决了，我仔细找了下剩余的一些属性，发现  找到了 selctedIndex这样的一个好属性，一看字面意思就明白了，就是选中项的index值啊，这就好办了啊，直接用options[selectedIndex]去访问不就好了么，到此，问题顺利解决，取值的时候，应该这样做，才能保证兼容性：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getvalue</span>(<span class=\"params\">obj</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> m=obj.options[obj.selectedIndex].value </span><br><span class=\"line\">        alert(m);<span class=\"comment\">//获取value </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> n=obj.options[obj.selectedIndex].text </span><br><span class=\"line\">        alert(n);<span class=\"comment\">//获取文本 </span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>检测是否有选中<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (objSelect.selectedIndex &gt; - <span class=\"number\">1</span> ) &#123; </span><br><span class=\"line\"><span class=\"comment\">// 说明选中 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">// 说明没有选中 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n<li>删除被选中的项 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex] = <span class=\"literal\">null</span> ; </span><br></pre></td></tr></table></figure></li>\n<li>增加项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.length] = <span class=\"keyword\">new</span> Option( <span class=\"string\">&quot; 你好 &quot;</span> , <span class=\"string\">&quot; hello &quot;</span> ); </span><br></pre></td></tr></table></figure></li>\n<li>修改所选择中的项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex] = <span class=\"keyword\">new</span> Option( <span class=\"string\">&quot; 你好 &quot;</span> , <span class=\"string\">&quot; hello &quot;</span> );</span><br></pre></td></tr></table></figure></li>\n<li>得到所选择项的文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex].text; </span><br></pre></td></tr></table></figure></li>\n<li>得到所选择项的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objSelect.options[objSelect.selectedIndex].value;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>结语：纸上得来终觉浅，绝知此事要躬行。必须要去尝试，在实践中，才能获得解决问题的最有效的途径，这也是让记忆深刻的唯一方式，共勉。</p>\n"},{"title":"Vue在项目中使用的一些心得（一）","date":"2019-03-17T13:44:55.000Z","_content":"\n\n\n1、elementUI组件Message和MessageBox的引入，需要按以下方式引入：\n\n```js\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\nVue.use(Message)\nMessageBox.install = function (Vue, options) {\n  Vue.prototype.$confirm = MessageBox\n}\n\nVue.use(MessageBox)\n```\n\n2、如果项目是多页构建，页面之间的跳转，js的方式只能采用：\n\n```js\nwindow.location.href = \"./page.html\"\n```\n\n不过如果page.html下面还有对应的router页面，可以这么来写：\n```js\nwindow.location.href = \"./page.html#/sonPage\"\n```\n\n不过我们知道，上面的location.href写法是相对路径的，但是我们可以采用绝对路径去写，比方说，我们打包给后端，后端文件的根目录是\"/page/home\",我们可以这样去写：\n\n```js\n//config.js\nexport const path = process.env.NODE_ENV === 'production' ? '/page/home':''\n\n//所需跳转的页面\nimport {path} from './config.js'\nwindow.location.href = path + \"/page.html#/sonPage\"\n```\n\n这样我们打包好后，发给后端，就能够正常显示了，而且跳转正常\n\n\n\n","source":"_posts/Vue在项目中使用的一些心得（一）.md","raw":"---\ntitle: Vue在项目中使用的一些心得（一）\ndate: 2019-03-17 21:44:55\ntags:\n  - vue\ncategories:\n  - vue  \n---\n\n\n\n1、elementUI组件Message和MessageBox的引入，需要按以下方式引入：\n\n```js\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\nVue.use(Message)\nMessageBox.install = function (Vue, options) {\n  Vue.prototype.$confirm = MessageBox\n}\n\nVue.use(MessageBox)\n```\n\n2、如果项目是多页构建，页面之间的跳转，js的方式只能采用：\n\n```js\nwindow.location.href = \"./page.html\"\n```\n\n不过如果page.html下面还有对应的router页面，可以这么来写：\n```js\nwindow.location.href = \"./page.html#/sonPage\"\n```\n\n不过我们知道，上面的location.href写法是相对路径的，但是我们可以采用绝对路径去写，比方说，我们打包给后端，后端文件的根目录是\"/page/home\",我们可以这样去写：\n\n```js\n//config.js\nexport const path = process.env.NODE_ENV === 'production' ? '/page/home':''\n\n//所需跳转的页面\nimport {path} from './config.js'\nwindow.location.href = path + \"/page.html#/sonPage\"\n```\n\n这样我们打包好后，发给后端，就能够正常显示了，而且跳转正常\n\n\n\n","slug":"Vue在项目中使用的一些心得（一）","published":1,"updated":"2019-03-17T13:47:33.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxla0009msvigdmvh36o","content":"<p>1、elementUI组件Message和MessageBox的引入，需要按以下方式引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Message)</span><br><span class=\"line\">MessageBox.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$confirm = MessageBox</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(MessageBox)</span><br></pre></td></tr></table></figure>\n<p>2、如果项目是多页构建，页面之间的跳转，js的方式只能采用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;./page.html&quot;</span></span><br></pre></td></tr></table></figure>\n<p>不过如果page.html下面还有对应的router页面，可以这么来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;./page.html#/sonPage&quot;</span></span><br></pre></td></tr></table></figure>\n<p>不过我们知道，上面的location.href写法是相对路径的，但是我们可以采用绝对路径去写，比方说，我们打包给后端，后端文件的根目录是”/page/home”,我们可以这样去写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//config.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> path = process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;/page/home&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所需跳转的页面</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;path&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = path + <span class=\"string\">&quot;/page.html#/sonPage&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样我们打包好后，发给后端，就能够正常显示了，而且跳转正常</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、elementUI组件Message和MessageBox的引入，需要按以下方式引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Message)</span><br><span class=\"line\">MessageBox.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$confirm = MessageBox</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(MessageBox)</span><br></pre></td></tr></table></figure>\n<p>2、如果项目是多页构建，页面之间的跳转，js的方式只能采用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;./page.html&quot;</span></span><br></pre></td></tr></table></figure>\n<p>不过如果page.html下面还有对应的router页面，可以这么来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;./page.html#/sonPage&quot;</span></span><br></pre></td></tr></table></figure>\n<p>不过我们知道，上面的location.href写法是相对路径的，但是我们可以采用绝对路径去写，比方说，我们打包给后端，后端文件的根目录是”/page/home”,我们可以这样去写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//config.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> path = process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;/page/home&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所需跳转的页面</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;path&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href = path + <span class=\"string\">&quot;/page.html#/sonPage&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样我们打包好后，发给后端，就能够正常显示了，而且跳转正常</p>\n"},{"title":"better-scroll使用中的一个问题","date":"2018-08-14T13:08:13.000Z","_content":"\n\nbetter-scroll是移动端页面做列表滑动效果的常用插件，本人自从第一次使用，就对它特别喜欢，之前在自己写的网易云音乐APP里，有使用过，这次，更是拿到了项目里，进行滚动交互优化的使用，常用在一些展示列表里，下拉刷新，上拉加载。效果真的挺好，使用过程中，也遇到过一些问题：\n\n* 比方说，如果scroll的wrapper下面，包含不止一个子元素，滚动就会失效，就像下面这样的结构：\n\n```html\n<div class=\"scroll-wrapper\">\n  <div class=\"tip\">上拉刷新提示</div>\n  <ul>\n  .......<!--真正的滚动列表-->\n  </ul>\n</div>\n```\n\n上面的结构里，初始化容器内的直接子元素，超过了1个，因此，初始化是失效的，必须让容器元素有且仅有一个直接子元素,像下面这样改造一下：\n\n```html\n<div class=\"scroll-wrapper\">\n  <div class=\"inner-wrapper\">\n    <div class=\"tip\">上拉刷新提示</div>\n    <ul>\n    .......<!--真正的滚动列表-->\n    </ul>\n  </div>  \n</div>\n```\n\n* 比方说，一般来说，我们在写列表的时候，父容器一般是不设高度的，内容完全由子元素撑开，但是对于better-scroll的初始化容器来说，不设高度，滚动的效果也会因此失效，所以我们需要给容器加个固定高度，并且最重要的是，要加上overflow:hidden的属性：\n\n```css\nhtml,body {\n  height:100%;\n}\n.scroll-wrapper {\n  height:100%;\n  overflow:hidden;/*此属性非常重要，直接影响滚动是否生效*/\n}\n```\n\n\n但是呢，今天要讲的，并不是这些问题，而是另外一个，应该算是问题的问题...\n\n看了better-scroll文档，知道其内部是有整合刷新和加载相关的api的，通过正常的option配置，以及监听所对应的特定的触发事件，就可以达到很好的效果，具体的配置这里不提，可自行查看文档，但是，这个内部实现加载和刷新机制的插件，有个问题，这也是本人在实际项目里所发现的，移动端页面，在监听了插件自己内部实现的刷新机制后，用户向下滑动列表，滑动一段距离后，再突然往上滑动列表，列表会与容器顶部，产生很大的一段距离，并且回弹不回去了，相关配置代码如下：\n\n```js\nvar scroll = {\n    scrollObj: null,\n    init: function () {\n      this.scrollObj = new BScroll(doc.getElementById(\"scroll\"), {\n        pullUpLoad: {\n          threshold: -10\n        },\n        preventDefault: false,\n        probeType: 1,\n      })\n\n      this.scrollObj.on(\"pullingUp\",function(){\n        //上拉加载的操作\n      })\n      \n    }\n  }\n```\n\n上面代码，使用的是监听插件封装的pullingUp事件，也就是触底加载的事件，但是会出现，连续滑动，回弹不回去的画面，很影响用户交互，因此，不能使用插件自带的pullingUp监听，那么，如果不使用插件自带的监听，只能自己实现上拉加载和下拉刷新了\n\n好在better-scroll是强大的，其内部提供出来的一些属性和API，足够我们自己做一个独立的滚动加载封装了，整理后的代码如下：\n\n```js\nvar scroll = {\n    scrollObj: null,\n    init: function () {\n      this.scrollObj = new BScroll(doc.getElementById(\"scroll\"), {\n        probeType: 1,\n        scrollY: true,\n        click: true,\n      })\n      \n      this.scrollObj.on(\"touchEnd\", function (pos) {\n        \n        if (pos.y > 30) {\n\n          //下拉刷新的代码...\n\n        } else if (pos.y < (this.maxScrollY - 30)) {\n          \n          //上拉加载的代码...\n          \n          this.finishPullUp() //这是必须要进行的一步，告诉插件，下拉已完成，不必再触发\n        }\n      })\n\n    }\n  }\n```\n\n我们监听实例的touchEnd事件，事件结束的每次，都能获取到scroll实例对象的纵向移动距离，根据移动距离判断，来进行相应的刷新和加载操作。这样，通过自己封装的逻辑，在真机测试的页面里，不论怎么连续滑动，页面容器都不会出现很大的滑动距离。\n","source":"_posts/better-scroll使用中的一个问题.md","raw":"---\ntitle: better-scroll使用中的一个问题\ndate: 2018-08-14 21:08:13\ntags:\n  - better-scroll\n  - js\ncategories:\n  - js\n---\n\n\nbetter-scroll是移动端页面做列表滑动效果的常用插件，本人自从第一次使用，就对它特别喜欢，之前在自己写的网易云音乐APP里，有使用过，这次，更是拿到了项目里，进行滚动交互优化的使用，常用在一些展示列表里，下拉刷新，上拉加载。效果真的挺好，使用过程中，也遇到过一些问题：\n\n* 比方说，如果scroll的wrapper下面，包含不止一个子元素，滚动就会失效，就像下面这样的结构：\n\n```html\n<div class=\"scroll-wrapper\">\n  <div class=\"tip\">上拉刷新提示</div>\n  <ul>\n  .......<!--真正的滚动列表-->\n  </ul>\n</div>\n```\n\n上面的结构里，初始化容器内的直接子元素，超过了1个，因此，初始化是失效的，必须让容器元素有且仅有一个直接子元素,像下面这样改造一下：\n\n```html\n<div class=\"scroll-wrapper\">\n  <div class=\"inner-wrapper\">\n    <div class=\"tip\">上拉刷新提示</div>\n    <ul>\n    .......<!--真正的滚动列表-->\n    </ul>\n  </div>  \n</div>\n```\n\n* 比方说，一般来说，我们在写列表的时候，父容器一般是不设高度的，内容完全由子元素撑开，但是对于better-scroll的初始化容器来说，不设高度，滚动的效果也会因此失效，所以我们需要给容器加个固定高度，并且最重要的是，要加上overflow:hidden的属性：\n\n```css\nhtml,body {\n  height:100%;\n}\n.scroll-wrapper {\n  height:100%;\n  overflow:hidden;/*此属性非常重要，直接影响滚动是否生效*/\n}\n```\n\n\n但是呢，今天要讲的，并不是这些问题，而是另外一个，应该算是问题的问题...\n\n看了better-scroll文档，知道其内部是有整合刷新和加载相关的api的，通过正常的option配置，以及监听所对应的特定的触发事件，就可以达到很好的效果，具体的配置这里不提，可自行查看文档，但是，这个内部实现加载和刷新机制的插件，有个问题，这也是本人在实际项目里所发现的，移动端页面，在监听了插件自己内部实现的刷新机制后，用户向下滑动列表，滑动一段距离后，再突然往上滑动列表，列表会与容器顶部，产生很大的一段距离，并且回弹不回去了，相关配置代码如下：\n\n```js\nvar scroll = {\n    scrollObj: null,\n    init: function () {\n      this.scrollObj = new BScroll(doc.getElementById(\"scroll\"), {\n        pullUpLoad: {\n          threshold: -10\n        },\n        preventDefault: false,\n        probeType: 1,\n      })\n\n      this.scrollObj.on(\"pullingUp\",function(){\n        //上拉加载的操作\n      })\n      \n    }\n  }\n```\n\n上面代码，使用的是监听插件封装的pullingUp事件，也就是触底加载的事件，但是会出现，连续滑动，回弹不回去的画面，很影响用户交互，因此，不能使用插件自带的pullingUp监听，那么，如果不使用插件自带的监听，只能自己实现上拉加载和下拉刷新了\n\n好在better-scroll是强大的，其内部提供出来的一些属性和API，足够我们自己做一个独立的滚动加载封装了，整理后的代码如下：\n\n```js\nvar scroll = {\n    scrollObj: null,\n    init: function () {\n      this.scrollObj = new BScroll(doc.getElementById(\"scroll\"), {\n        probeType: 1,\n        scrollY: true,\n        click: true,\n      })\n      \n      this.scrollObj.on(\"touchEnd\", function (pos) {\n        \n        if (pos.y > 30) {\n\n          //下拉刷新的代码...\n\n        } else if (pos.y < (this.maxScrollY - 30)) {\n          \n          //上拉加载的代码...\n          \n          this.finishPullUp() //这是必须要进行的一步，告诉插件，下拉已完成，不必再触发\n        }\n      })\n\n    }\n  }\n```\n\n我们监听实例的touchEnd事件，事件结束的每次，都能获取到scroll实例对象的纵向移动距离，根据移动距离判断，来进行相应的刷新和加载操作。这样，通过自己封装的逻辑，在真机测试的页面里，不论怎么连续滑动，页面容器都不会出现很大的滑动距离。\n","slug":"better-scroll使用中的一个问题","published":1,"updated":"2018-08-14T13:10:37.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlb000amsvi9hoi7npg","content":"<p>better-scroll是移动端页面做列表滑动效果的常用插件，本人自从第一次使用，就对它特别喜欢，之前在自己写的网易云音乐APP里，有使用过，这次，更是拿到了项目里，进行滚动交互优化的使用，常用在一些展示列表里，下拉刷新，上拉加载。效果真的挺好，使用过程中，也遇到过一些问题：</p>\n<ul>\n<li>比方说，如果scroll的wrapper下面，包含不止一个子元素，滚动就会失效，就像下面这样的结构：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scroll-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tip&quot;</span>&gt;</span>上拉刷新提示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  .......<span class=\"comment\">&lt;!--真正的滚动列表--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的结构里，初始化容器内的直接子元素，超过了1个，因此，初始化是失效的，必须让容器元素有且仅有一个直接子元素,像下面这样改造一下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scroll-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tip&quot;</span>&gt;</span>上拉刷新提示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    .......<span class=\"comment\">&lt;!--真正的滚动列表--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>比方说，一般来说，我们在写列表的时候，父容器一般是不设高度的，内容完全由子元素撑开，但是对于better-scroll的初始化容器来说，不设高度，滚动的效果也会因此失效，所以我们需要给容器加个固定高度，并且最重要的是，要加上overflow:hidden的属性：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.scroll-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;<span class=\"comment\">/*此属性非常重要，直接影响滚动是否生效*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是呢，今天要讲的，并不是这些问题，而是另外一个，应该算是问题的问题…</p>\n<p>看了better-scroll文档，知道其内部是有整合刷新和加载相关的api的，通过正常的option配置，以及监听所对应的特定的触发事件，就可以达到很好的效果，具体的配置这里不提，可自行查看文档，但是，这个内部实现加载和刷新机制的插件，有个问题，这也是本人在实际项目里所发现的，移动端页面，在监听了插件自己内部实现的刷新机制后，用户向下滑动列表，滑动一段距离后，再突然往上滑动列表，列表会与容器顶部，产生很大的一段距离，并且回弹不回去了，相关配置代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = &#123;</span><br><span class=\"line\">    scrollObj: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj = <span class=\"keyword\">new</span> BScroll(doc.getElementById(<span class=\"string\">&quot;scroll&quot;</span>), &#123;</span><br><span class=\"line\">        pullUpLoad: &#123;</span><br><span class=\"line\">          threshold: -<span class=\"number\">10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        preventDefault: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        probeType: <span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj.on(<span class=\"string\">&quot;pullingUp&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//上拉加载的操作</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码，使用的是监听插件封装的pullingUp事件，也就是触底加载的事件，但是会出现，连续滑动，回弹不回去的画面，很影响用户交互，因此，不能使用插件自带的pullingUp监听，那么，如果不使用插件自带的监听，只能自己实现上拉加载和下拉刷新了</p>\n<p>好在better-scroll是强大的，其内部提供出来的一些属性和API，足够我们自己做一个独立的滚动加载封装了，整理后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = &#123;</span><br><span class=\"line\">    scrollObj: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj = <span class=\"keyword\">new</span> BScroll(doc.getElementById(<span class=\"string\">&quot;scroll&quot;</span>), &#123;</span><br><span class=\"line\">        probeType: <span class=\"number\">1</span>,</span><br><span class=\"line\">        scrollY: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        click: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj.on(<span class=\"string\">&quot;touchEnd&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos.y &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//下拉刷新的代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pos.y &lt; (<span class=\"built_in\">this</span>.maxScrollY - <span class=\"number\">30</span>)) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"comment\">//上拉加载的代码...</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"built_in\">this</span>.finishPullUp() <span class=\"comment\">//这是必须要进行的一步，告诉插件，下拉已完成，不必再触发</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>我们监听实例的touchEnd事件，事件结束的每次，都能获取到scroll实例对象的纵向移动距离，根据移动距离判断，来进行相应的刷新和加载操作。这样，通过自己封装的逻辑，在真机测试的页面里，不论怎么连续滑动，页面容器都不会出现很大的滑动距离。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>better-scroll是移动端页面做列表滑动效果的常用插件，本人自从第一次使用，就对它特别喜欢，之前在自己写的网易云音乐APP里，有使用过，这次，更是拿到了项目里，进行滚动交互优化的使用，常用在一些展示列表里，下拉刷新，上拉加载。效果真的挺好，使用过程中，也遇到过一些问题：</p>\n<ul>\n<li>比方说，如果scroll的wrapper下面，包含不止一个子元素，滚动就会失效，就像下面这样的结构：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scroll-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tip&quot;</span>&gt;</span>上拉刷新提示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  .......<span class=\"comment\">&lt;!--真正的滚动列表--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的结构里，初始化容器内的直接子元素，超过了1个，因此，初始化是失效的，必须让容器元素有且仅有一个直接子元素,像下面这样改造一下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scroll-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tip&quot;</span>&gt;</span>上拉刷新提示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    .......<span class=\"comment\">&lt;!--真正的滚动列表--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>比方说，一般来说，我们在写列表的时候，父容器一般是不设高度的，内容完全由子元素撑开，但是对于better-scroll的初始化容器来说，不设高度，滚动的效果也会因此失效，所以我们需要给容器加个固定高度，并且最重要的是，要加上overflow:hidden的属性：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.scroll-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;<span class=\"comment\">/*此属性非常重要，直接影响滚动是否生效*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是呢，今天要讲的，并不是这些问题，而是另外一个，应该算是问题的问题…</p>\n<p>看了better-scroll文档，知道其内部是有整合刷新和加载相关的api的，通过正常的option配置，以及监听所对应的特定的触发事件，就可以达到很好的效果，具体的配置这里不提，可自行查看文档，但是，这个内部实现加载和刷新机制的插件，有个问题，这也是本人在实际项目里所发现的，移动端页面，在监听了插件自己内部实现的刷新机制后，用户向下滑动列表，滑动一段距离后，再突然往上滑动列表，列表会与容器顶部，产生很大的一段距离，并且回弹不回去了，相关配置代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = &#123;</span><br><span class=\"line\">    scrollObj: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj = <span class=\"keyword\">new</span> BScroll(doc.getElementById(<span class=\"string\">&quot;scroll&quot;</span>), &#123;</span><br><span class=\"line\">        pullUpLoad: &#123;</span><br><span class=\"line\">          threshold: -<span class=\"number\">10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        preventDefault: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        probeType: <span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj.on(<span class=\"string\">&quot;pullingUp&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//上拉加载的操作</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码，使用的是监听插件封装的pullingUp事件，也就是触底加载的事件，但是会出现，连续滑动，回弹不回去的画面，很影响用户交互，因此，不能使用插件自带的pullingUp监听，那么，如果不使用插件自带的监听，只能自己实现上拉加载和下拉刷新了</p>\n<p>好在better-scroll是强大的，其内部提供出来的一些属性和API，足够我们自己做一个独立的滚动加载封装了，整理后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = &#123;</span><br><span class=\"line\">    scrollObj: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj = <span class=\"keyword\">new</span> BScroll(doc.getElementById(<span class=\"string\">&quot;scroll&quot;</span>), &#123;</span><br><span class=\"line\">        probeType: <span class=\"number\">1</span>,</span><br><span class=\"line\">        scrollY: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        click: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"built_in\">this</span>.scrollObj.on(<span class=\"string\">&quot;touchEnd&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos.y &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//下拉刷新的代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pos.y &lt; (<span class=\"built_in\">this</span>.maxScrollY - <span class=\"number\">30</span>)) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"comment\">//上拉加载的代码...</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"built_in\">this</span>.finishPullUp() <span class=\"comment\">//这是必须要进行的一步，告诉插件，下拉已完成，不必再触发</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>我们监听实例的touchEnd事件，事件结束的每次，都能获取到scroll实例对象的纵向移动距离，根据移动距离判断，来进行相应的刷新和加载操作。这样，通过自己封装的逻辑，在真机测试的页面里，不论怎么连续滑动，页面容器都不会出现很大的滑动距离。</p>\n"},{"title":"css相关技巧总结(二)","date":"2018-06-19T12:07:09.000Z","_content":"\n\n继之前给大家分享的css相关技巧总结，这次带来了一些不一样的css技巧，这些技巧属于当我们无法通过普通的方式去解决一些需求问题的时候，另辟蹊径，达到的与原需求差不多的实现。\n\n## 一、CSS写自适应大小的正方形\n**代码**：\n```css\n/*以图片为例*/\n\n/*background 写法*/\n\n.img {\n  width:100%;\n  height:0;\n  padding-bottom:100%;       /*关键所在*/\n  overflow:hidden;\n  background:url(../res/images/haha.png) center/100% 100% no-repeat;\n}\n.img img{\n  width: 100%;\n}\n\n/*img 写法*/\n\n.img {\n  position:relative;\n  width:100%;\n  height:0;\n  padding-bottom:100%;       /*关键所在*/\n  overflow:hidden;\n}\n.img img {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n```\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2.gif?raw=true)\n\n**原理**：\n\n元素的padding的百分比值四个值均根据当前元素的宽度来计算的\npadding只能取top或者bottom，自适应正方形其值要和宽一致，那么自然如果需要用到不同比例的矩形，可以通过设置不同比例的padding就能得到。\n\n## 二、多列等高\n**代码**：\n```css\n.web_width {\n  width:100%;\n  overflow:hidden;     /*关键所在*/\n}\n\n.left {\n  float:left;\n  width:20%;\n  min-height:10rem;\n  background:#66afe9;\n  padding-bottom:2000px;     /*关键所在*/\n  margin-bottom:-2000px;     /*关键所在*/\n}\n\n.right {\n  float:right;\n  width:80%;\n  height:20em;\n  background:#f00;\n}\n```\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E5%A4%9A%E5%88%97%E7%AD%89%E9%AB%98.gif?raw=true)\n\n**原理**：\n\npadding补偿法\n\n在高度小的元素上加一个数值为正的padding-bottom和一个数值为负的margin-bottom，再在父级加上overflow:hidden隐藏子元素超出的padding-bottom\n\n**注意**：  \npadding-bottom和margin-bottom之和要等于0，而且建议值不要太大，够用就可以了。\n\n\n\n## 三、隐藏滚动条\n这个需求其实真的是，个人觉得其实实现价值并不太高，无奈，在之前项目里，有一个需求就是这样的，页面有一个固定高度的展示框，当内容超过高度的时候，希望将滚动条隐藏，是的，不是美化，而是隐藏，仔细想了下，可以在容器外再套一层容器，该容器负责隐藏掉子容器的滚动条：\n\n**代码**：\n```html\n<style type=\"text/css\">\n* {\n  margin: 0;\n  padding: 0\n}\n\t\nsection {\n  width: 300px;\n  height: 500px;\n  margin: 20px auto;\n  overflow: hidden;\n}\n\t\ndiv {\n  width: calc(100% + 20px);\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\t\np {\n  width: 100%;\n  height: 200px;\n  background: #999;\n  overflow: hidden\n}\np:nth-child(2n){\n  background: #f60;\n}\n</style>\n<section>\n  <div>\n    <p>1</p>\n    <p>2</p>\n    <p>3</p>\n    <p>4</p>\n    <p>5</p>\n  </div>\n</section>\n```\n\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1.gif?raw=true)\n\n**原理**：\n\n父元素超出部分隐藏，将滚动元素的width超出父元素的width，从而达到隐藏滚动条\n","source":"_posts/css相关技巧总结-二.md","raw":"---\ntitle: css相关技巧总结(二)\ndate: 2018-06-19 20:07:09\ntags:\n  - css\ncategories:\n  - css\n---\n\n\n继之前给大家分享的css相关技巧总结，这次带来了一些不一样的css技巧，这些技巧属于当我们无法通过普通的方式去解决一些需求问题的时候，另辟蹊径，达到的与原需求差不多的实现。\n\n## 一、CSS写自适应大小的正方形\n**代码**：\n```css\n/*以图片为例*/\n\n/*background 写法*/\n\n.img {\n  width:100%;\n  height:0;\n  padding-bottom:100%;       /*关键所在*/\n  overflow:hidden;\n  background:url(../res/images/haha.png) center/100% 100% no-repeat;\n}\n.img img{\n  width: 100%;\n}\n\n/*img 写法*/\n\n.img {\n  position:relative;\n  width:100%;\n  height:0;\n  padding-bottom:100%;       /*关键所在*/\n  overflow:hidden;\n}\n.img img {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n```\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2.gif?raw=true)\n\n**原理**：\n\n元素的padding的百分比值四个值均根据当前元素的宽度来计算的\npadding只能取top或者bottom，自适应正方形其值要和宽一致，那么自然如果需要用到不同比例的矩形，可以通过设置不同比例的padding就能得到。\n\n## 二、多列等高\n**代码**：\n```css\n.web_width {\n  width:100%;\n  overflow:hidden;     /*关键所在*/\n}\n\n.left {\n  float:left;\n  width:20%;\n  min-height:10rem;\n  background:#66afe9;\n  padding-bottom:2000px;     /*关键所在*/\n  margin-bottom:-2000px;     /*关键所在*/\n}\n\n.right {\n  float:right;\n  width:80%;\n  height:20em;\n  background:#f00;\n}\n```\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E5%A4%9A%E5%88%97%E7%AD%89%E9%AB%98.gif?raw=true)\n\n**原理**：\n\npadding补偿法\n\n在高度小的元素上加一个数值为正的padding-bottom和一个数值为负的margin-bottom，再在父级加上overflow:hidden隐藏子元素超出的padding-bottom\n\n**注意**：  \npadding-bottom和margin-bottom之和要等于0，而且建议值不要太大，够用就可以了。\n\n\n\n## 三、隐藏滚动条\n这个需求其实真的是，个人觉得其实实现价值并不太高，无奈，在之前项目里，有一个需求就是这样的，页面有一个固定高度的展示框，当内容超过高度的时候，希望将滚动条隐藏，是的，不是美化，而是隐藏，仔细想了下，可以在容器外再套一层容器，该容器负责隐藏掉子容器的滚动条：\n\n**代码**：\n```html\n<style type=\"text/css\">\n* {\n  margin: 0;\n  padding: 0\n}\n\t\nsection {\n  width: 300px;\n  height: 500px;\n  margin: 20px auto;\n  overflow: hidden;\n}\n\t\ndiv {\n  width: calc(100% + 20px);\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\t\np {\n  width: 100%;\n  height: 200px;\n  background: #999;\n  overflow: hidden\n}\np:nth-child(2n){\n  background: #f60;\n}\n</style>\n<section>\n  <div>\n    <p>1</p>\n    <p>2</p>\n    <p>3</p>\n    <p>4</p>\n    <p>5</p>\n  </div>\n</section>\n```\n\n**效果图**：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1.gif?raw=true)\n\n**原理**：\n\n父元素超出部分隐藏，将滚动元素的width超出父元素的width，从而达到隐藏滚动条\n","slug":"css相关技巧总结-二","published":1,"updated":"2018-06-20T13:53:08.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxld000emsvi7ds1hdyv","content":"<p>继之前给大家分享的css相关技巧总结，这次带来了一些不一样的css技巧，这些技巧属于当我们无法通过普通的方式去解决一些需求问题的时候，另辟蹊径，达到的与原需求差不多的实现。</p>\n<h2 id=\"一、CSS写自适应大小的正方形\"><a href=\"#一、CSS写自适应大小的正方形\" class=\"headerlink\" title=\"一、CSS写自适应大小的正方形\"></a>一、CSS写自适应大小的正方形</h2><p><strong>代码</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*以图片为例*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*background 写法*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">100%</span>;       <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(../res/images/haha.png) center/<span class=\"number\">100%</span> <span class=\"number\">100%</span> no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*img 写法*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">100%</span>;       <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>元素的padding的百分比值四个值均根据当前元素的宽度来计算的<br>padding只能取top或者bottom，自适应正方形其值要和宽一致，那么自然如果需要用到不同比例的矩形，可以通过设置不同比例的padding就能得到。</p>\n<h2 id=\"二、多列等高\"><a href=\"#二、多列等高\" class=\"headerlink\" title=\"二、多列等高\"></a>二、多列等高</h2><p><strong>代码</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.web_width</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>:<span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#66afe9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">2000px</span>;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>:-<span class=\"number\">2000px</span>;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">20em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E5%A4%9A%E5%88%97%E7%AD%89%E9%AB%98.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>padding补偿法</p>\n<p>在高度小的元素上加一个数值为正的padding-bottom和一个数值为负的margin-bottom，再在父级加上overflow:hidden隐藏子元素超出的padding-bottom</p>\n<p><strong>注意</strong>：<br>padding-bottom和margin-bottom之和要等于0，而且建议值不要太大，够用就可以了。</p>\n<h2 id=\"三、隐藏滚动条\"><a href=\"#三、隐藏滚动条\" class=\"headerlink\" title=\"三、隐藏滚动条\"></a>三、隐藏滚动条</h2><p>这个需求其实真的是，个人觉得其实实现价值并不太高，无奈，在之前项目里，有一个需求就是这样的，页面有一个固定高度的展示框，当内容超过高度的时候，希望将滚动条隐藏，是的，不是美化，而是隐藏，仔细想了下，可以在容器外再套一层容器，该容器负责隐藏掉子容器的滚动条：</p>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">section &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 500px;</span><br><span class=\"line\">  margin: 20px auto;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  width: calc(100% + 20px);</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2n)</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f60</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>父元素超出部分隐藏，将滚动元素的width超出父元素的width，从而达到隐藏滚动条</p>\n","site":{"data":{}},"excerpt":"","more":"<p>继之前给大家分享的css相关技巧总结，这次带来了一些不一样的css技巧，这些技巧属于当我们无法通过普通的方式去解决一些需求问题的时候，另辟蹊径，达到的与原需求差不多的实现。</p>\n<h2 id=\"一、CSS写自适应大小的正方形\"><a href=\"#一、CSS写自适应大小的正方形\" class=\"headerlink\" title=\"一、CSS写自适应大小的正方形\"></a>一、CSS写自适应大小的正方形</h2><p><strong>代码</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*以图片为例*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*background 写法*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">100%</span>;       <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(../res/images/haha.png) center/<span class=\"number\">100%</span> <span class=\"number\">100%</span> no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*img 写法*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">100%</span>;       <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>元素的padding的百分比值四个值均根据当前元素的宽度来计算的<br>padding只能取top或者bottom，自适应正方形其值要和宽一致，那么自然如果需要用到不同比例的矩形，可以通过设置不同比例的padding就能得到。</p>\n<h2 id=\"二、多列等高\"><a href=\"#二、多列等高\" class=\"headerlink\" title=\"二、多列等高\"></a>二、多列等高</h2><p><strong>代码</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.web_width</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>:<span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#66afe9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">2000px</span>;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>:-<span class=\"number\">2000px</span>;     <span class=\"comment\">/*关键所在*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">20em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E5%A4%9A%E5%88%97%E7%AD%89%E9%AB%98.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>padding补偿法</p>\n<p>在高度小的元素上加一个数值为正的padding-bottom和一个数值为负的margin-bottom，再在父级加上overflow:hidden隐藏子元素超出的padding-bottom</p>\n<p><strong>注意</strong>：<br>padding-bottom和margin-bottom之和要等于0，而且建议值不要太大，够用就可以了。</p>\n<h2 id=\"三、隐藏滚动条\"><a href=\"#三、隐藏滚动条\" class=\"headerlink\" title=\"三、隐藏滚动条\"></a>三、隐藏滚动条</h2><p>这个需求其实真的是，个人觉得其实实现价值并不太高，无奈，在之前项目里，有一个需求就是这样的，页面有一个固定高度的展示框，当内容超过高度的时候，希望将滚动条隐藏，是的，不是美化，而是隐藏，仔细想了下，可以在容器外再套一层容器，该容器负责隐藏掉子容器的滚动条：</p>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">section &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 500px;</span><br><span class=\"line\">  margin: 20px auto;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  width: calc(100% + 20px);</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child(2n)</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#f60</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong>：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180619/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1.gif?raw=true\"></p>\n<p><strong>原理</strong>：</p>\n<p>父元素超出部分隐藏，将滚动元素的width超出父元素的width，从而达到隐藏滚动条</p>\n"},{"title":"css相关技巧总结(一)","date":"2018-06-16T14:28:39.000Z","_content":"\n\n相信大家在日常的开发工作中，在样式布局上面，会遇到一些问题，而对于这些问题的解决呢，网上的相关答案有比较凌乱，不好去整理，下面我将总结一下自己在项目里，所遇到的那些关于CSS样式问题的解决方案。\n\n## 伸展一个元素到窗口高度\n在具体场景中，你可能想要将一个元素伸展到窗口高度，基本元素的调整只能调整容器的大小，因为元素的高度是可继承的，元素的高度100%的实现，顶层的body元素和html元素必须有100%的高度属性，因此，要使一个元素伸展到窗口高度，我们需要伸展顶层元素：html和body:\n```css\nhtml, \nbody {\n    height: 100%;\n}\n```\n\n然后将100%应用到任何元素的高\n\n```css\ndiv {\n    height: 100%;\n}\n```\n\n## 用CSS动画实现省略号动画\n其实这个经常用在加载效果上面，很多时候，加载效果是显示一张gif图片，但是图片比较占用性能和资源，所以，还是纯文字的比较好，那么如何去实现这样一种效果呢，也就是在元素后面，添加一个伪元素，伪元素的宽度，是不断的循环变化的，如下代码所示：\n\n```css\n.loading:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    animation: ellipsis 2s infinite;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n}\n@keyframes ellipsis {\n    from {\n        width: 2px;\n    }\n    to {\n        width: 15px;\n    }\n}\n```\ninfinite代表无限循环的意思，也就是after伪类的宽度是一直在变化的，也就实现了动画的效果。\n\n## 样式重置\n关于css样式重置，每个公司应该都有自己的一套规范，样式重置与标准化是两个不同的概念，重置则是完全抛弃浏览器的默认样式，而标准化则是按照实际需要去优化浏览器默认的样式，如业界常用的normalize.css如下的代码就是经典的样式重置：\n```css\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  outline: none;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml { height: 101%; }\nbody { font-size: 62.5%; line-height: 1; font-family: Arial, Tahoma, sans-serif; }\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; }\nol, ul { list-style: none; }\nblockquote, q { quotes: none; }\nblockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; }\nstrong { font-weight: bold; } \ntable { border-collapse: collapse; border-spacing: 0; }\nimg { border: 0; max-width: 100%; }\np { font-size: 1.2em; line-height: 1.0em; color: #333; }\n```\n\n## 跨浏览器的透明方案\n透明元素的使用，在现在是越来越频繁了，那么面对主流的浏览器对于透明元素的定义的不同，如下的代码则是统一了浏览器的透明效果：\n```css\n.transparent {\n    filter: alpha(opacity=50); /* internet explorer */\n    -khtml-opacity: 0.5;      /* khtml, old safari */\n    -moz-opacity: 0.5;       /* mozilla, netscape */\n    opacity: 0.5;           /* fx, safari, opera */\n}\n```\n\n## 强制出现滚动条\n大多数的情况，关于浏览器滚动条，我们都是定义自动滚动的，也就是说，只在内容超出窗口高度的时候，才让它出现滚动条，那么在有些需求下，滚动条必须要出现，那该怎么办呢？\n```css\nhtml { height: 101% }\n```\n让根元素的高度超出窗口高度，就可以强制出现滚动条了。\n\n## 在可点击的项目上强制手型\n设置手型，是比较常用的属性，但是基本上我们在使用到的时候，才会去局部添加，这样的话样式会有点冗余，解决方法就是设置一个公用的手型属性：\n```css\na[href], input[type='submit'], input[type='image'], label[for], select, button, .pointer {\n    cursor: pointer;\n}\n```\n\n\n## 禁用移动Webkit的选择高亮\n\n```css\nbody {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n```\n","source":"_posts/css相关技巧总结.md","raw":"---\ntitle: css相关技巧总结(一)\ndate: 2018-06-16 22:28:39\ntags:\n  - css\ncategories:\n  - css\n---\n\n\n相信大家在日常的开发工作中，在样式布局上面，会遇到一些问题，而对于这些问题的解决呢，网上的相关答案有比较凌乱，不好去整理，下面我将总结一下自己在项目里，所遇到的那些关于CSS样式问题的解决方案。\n\n## 伸展一个元素到窗口高度\n在具体场景中，你可能想要将一个元素伸展到窗口高度，基本元素的调整只能调整容器的大小，因为元素的高度是可继承的，元素的高度100%的实现，顶层的body元素和html元素必须有100%的高度属性，因此，要使一个元素伸展到窗口高度，我们需要伸展顶层元素：html和body:\n```css\nhtml, \nbody {\n    height: 100%;\n}\n```\n\n然后将100%应用到任何元素的高\n\n```css\ndiv {\n    height: 100%;\n}\n```\n\n## 用CSS动画实现省略号动画\n其实这个经常用在加载效果上面，很多时候，加载效果是显示一张gif图片，但是图片比较占用性能和资源，所以，还是纯文字的比较好，那么如何去实现这样一种效果呢，也就是在元素后面，添加一个伪元素，伪元素的宽度，是不断的循环变化的，如下代码所示：\n\n```css\n.loading:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    animation: ellipsis 2s infinite;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n}\n@keyframes ellipsis {\n    from {\n        width: 2px;\n    }\n    to {\n        width: 15px;\n    }\n}\n```\ninfinite代表无限循环的意思，也就是after伪类的宽度是一直在变化的，也就实现了动画的效果。\n\n## 样式重置\n关于css样式重置，每个公司应该都有自己的一套规范，样式重置与标准化是两个不同的概念，重置则是完全抛弃浏览器的默认样式，而标准化则是按照实际需要去优化浏览器默认的样式，如业界常用的normalize.css如下的代码就是经典的样式重置：\n```css\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  outline: none;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml { height: 101%; }\nbody { font-size: 62.5%; line-height: 1; font-family: Arial, Tahoma, sans-serif; }\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; }\nol, ul { list-style: none; }\nblockquote, q { quotes: none; }\nblockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; }\nstrong { font-weight: bold; } \ntable { border-collapse: collapse; border-spacing: 0; }\nimg { border: 0; max-width: 100%; }\np { font-size: 1.2em; line-height: 1.0em; color: #333; }\n```\n\n## 跨浏览器的透明方案\n透明元素的使用，在现在是越来越频繁了，那么面对主流的浏览器对于透明元素的定义的不同，如下的代码则是统一了浏览器的透明效果：\n```css\n.transparent {\n    filter: alpha(opacity=50); /* internet explorer */\n    -khtml-opacity: 0.5;      /* khtml, old safari */\n    -moz-opacity: 0.5;       /* mozilla, netscape */\n    opacity: 0.5;           /* fx, safari, opera */\n}\n```\n\n## 强制出现滚动条\n大多数的情况，关于浏览器滚动条，我们都是定义自动滚动的，也就是说，只在内容超出窗口高度的时候，才让它出现滚动条，那么在有些需求下，滚动条必须要出现，那该怎么办呢？\n```css\nhtml { height: 101% }\n```\n让根元素的高度超出窗口高度，就可以强制出现滚动条了。\n\n## 在可点击的项目上强制手型\n设置手型，是比较常用的属性，但是基本上我们在使用到的时候，才会去局部添加，这样的话样式会有点冗余，解决方法就是设置一个公用的手型属性：\n```css\na[href], input[type='submit'], input[type='image'], label[for], select, button, .pointer {\n    cursor: pointer;\n}\n```\n\n\n## 禁用移动Webkit的选择高亮\n\n```css\nbody {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n```\n","slug":"css相关技巧总结","published":1,"updated":"2018-11-12T13:23:13.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxle000fmsvib55lfn69","content":"<p>相信大家在日常的开发工作中，在样式布局上面，会遇到一些问题，而对于这些问题的解决呢，网上的相关答案有比较凌乱，不好去整理，下面我将总结一下自己在项目里，所遇到的那些关于CSS样式问题的解决方案。</p>\n<h2 id=\"伸展一个元素到窗口高度\"><a href=\"#伸展一个元素到窗口高度\" class=\"headerlink\" title=\"伸展一个元素到窗口高度\"></a>伸展一个元素到窗口高度</h2><p>在具体场景中，你可能想要将一个元素伸展到窗口高度，基本元素的调整只能调整容器的大小，因为元素的高度是可继承的，元素的高度100%的实现，顶层的body元素和html元素必须有100%的高度属性，因此，要使一个元素伸展到窗口高度，我们需要伸展顶层元素：html和body:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将100%应用到任何元素的高</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用CSS动画实现省略号动画\"><a href=\"#用CSS动画实现省略号动画\" class=\"headerlink\" title=\"用CSS动画实现省略号动画\"></a>用CSS动画实现省略号动画</h2><p>其实这个经常用在加载效果上面，很多时候，加载效果是显示一张gif图片，但是图片比较占用性能和资源，所以，还是纯文字的比较好，那么如何去实现这样一种效果呢，也就是在元素后面，添加一个伪元素，伪元素的宽度，是不断的循环变化的，如下代码所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.loading</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: bottom;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: ellipsis <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\2026&quot;</span>; <span class=\"comment\">/* ascii code for the ellipsis character */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> ellipsis &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>infinite代表无限循环的意思，也就是after伪类的宽度是一直在变化的，也就实现了动画的效果。</p>\n<h2 id=\"样式重置\"><a href=\"#样式重置\" class=\"headerlink\" title=\"样式重置\"></a>样式重置</h2><p>关于css样式重置，每个公司应该都有自己的一套规范，样式重置与标准化是两个不同的概念，重置则是完全抛弃浏览器的默认样式，而标准化则是按照实际需要去优化浏览器默认的样式，如业界常用的normalize.css如下的代码就是经典的样式重置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">div</span>, <span class=\"selector-tag\">span</span>, <span class=\"selector-tag\">applet</span>, <span class=\"selector-tag\">object</span>, <span class=\"selector-tag\">iframe</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">abbr</span>, <span class=\"selector-tag\">acronym</span>, <span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">big</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">del</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">img</span>, <span class=\"selector-tag\">ins</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">q</span>, <span class=\"selector-tag\">s</span>, <span class=\"selector-tag\">samp</span>, <span class=\"selector-tag\">small</span>, <span class=\"selector-tag\">strike</span>, <span class=\"selector-tag\">strong</span>, <span class=\"selector-tag\">sub</span>, <span class=\"selector-tag\">sup</span>, <span class=\"selector-tag\">tt</span>, <span class=\"selector-tag\">var</span>, <span class=\"selector-tag\">b</span>, <span class=\"selector-tag\">u</span>, <span class=\"selector-tag\">i</span>, <span class=\"selector-tag\">center</span>, <span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">li</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">label</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">caption</span>, <span class=\"selector-tag\">tbody</span>, <span class=\"selector-tag\">tfoot</span>, <span class=\"selector-tag\">thead</span>, <span class=\"selector-tag\">tr</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span>, <span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">canvas</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">embed</span>, <span class=\"selector-tag\">figure</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">output</span>, <span class=\"selector-tag\">ruby</span>, <span class=\"selector-tag\">section</span>, <span class=\"selector-tag\">summary</span>, <span class=\"selector-tag\">time</span>, <span class=\"selector-tag\">mark</span>, <span class=\"selector-tag\">audio</span>, <span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">101%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">62.5%</span>; <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>; <span class=\"attribute\">font-family</span>: Arial, Tahoma, sans-serif; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">figure</span>, <span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">section</span> &#123; <span class=\"attribute\">display</span>: block; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span> &#123; <span class=\"attribute\">list-style</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">q</span> &#123; <span class=\"attribute\">quotes</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>; <span class=\"attribute\">content</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">strong</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"attribute\">border-spacing</span>: <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">0</span>; <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; <span class=\"attribute\">line-height</span>: <span class=\"number\">1.0em</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"跨浏览器的透明方案\"><a href=\"#跨浏览器的透明方案\" class=\"headerlink\" title=\"跨浏览器的透明方案\"></a>跨浏览器的透明方案</h2><p>透明元素的使用，在现在是越来越频繁了，那么面对主流的浏览器对于透明元素的定义的不同，如下的代码则是统一了浏览器的透明效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.transparent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">alpha</span>(opacity=<span class=\"number\">50</span>); <span class=\"comment\">/* internet explorer */</span></span><br><span class=\"line\">    <span class=\"attribute\">-khtml-opacity</span>: <span class=\"number\">0.5</span>;      <span class=\"comment\">/* khtml, old safari */</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-opacity</span>: <span class=\"number\">0.5</span>;       <span class=\"comment\">/* mozilla, netscape */</span></span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.5</span>;           <span class=\"comment\">/* fx, safari, opera */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"强制出现滚动条\"><a href=\"#强制出现滚动条\" class=\"headerlink\" title=\"强制出现滚动条\"></a>强制出现滚动条</h2><p>大多数的情况，关于浏览器滚动条，我们都是定义自动滚动的，也就是说，只在内容超出窗口高度的时候，才让它出现滚动条，那么在有些需求下，滚动条必须要出现，那该怎么办呢？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">101%</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>让根元素的高度超出窗口高度，就可以强制出现滚动条了。</p>\n<h2 id=\"在可点击的项目上强制手型\"><a href=\"#在可点击的项目上强制手型\" class=\"headerlink\" title=\"在可点击的项目上强制手型\"></a>在可点击的项目上强制手型</h2><p>设置手型，是比较常用的属性，但是基本上我们在使用到的时候，才会去局部添加，这样的话样式会有点冗余，解决方法就是设置一个公用的手型属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-attr\">[href]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;submit&#x27;</span>]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;image&#x27;</span>]</span>, <span class=\"selector-tag\">label</span><span class=\"selector-attr\">[for]</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-class\">.pointer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用移动Webkit的选择高亮\"><a href=\"#禁用移动Webkit的选择高亮\" class=\"headerlink\" title=\"禁用移动Webkit的选择高亮\"></a>禁用移动Webkit的选择高亮</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-khtml-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>相信大家在日常的开发工作中，在样式布局上面，会遇到一些问题，而对于这些问题的解决呢，网上的相关答案有比较凌乱，不好去整理，下面我将总结一下自己在项目里，所遇到的那些关于CSS样式问题的解决方案。</p>\n<h2 id=\"伸展一个元素到窗口高度\"><a href=\"#伸展一个元素到窗口高度\" class=\"headerlink\" title=\"伸展一个元素到窗口高度\"></a>伸展一个元素到窗口高度</h2><p>在具体场景中，你可能想要将一个元素伸展到窗口高度，基本元素的调整只能调整容器的大小，因为元素的高度是可继承的，元素的高度100%的实现，顶层的body元素和html元素必须有100%的高度属性，因此，要使一个元素伸展到窗口高度，我们需要伸展顶层元素：html和body:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将100%应用到任何元素的高</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用CSS动画实现省略号动画\"><a href=\"#用CSS动画实现省略号动画\" class=\"headerlink\" title=\"用CSS动画实现省略号动画\"></a>用CSS动画实现省略号动画</h2><p>其实这个经常用在加载效果上面，很多时候，加载效果是显示一张gif图片，但是图片比较占用性能和资源，所以，还是纯文字的比较好，那么如何去实现这样一种效果呢，也就是在元素后面，添加一个伪元素，伪元素的宽度，是不断的循环变化的，如下代码所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.loading</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: bottom;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: ellipsis <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\2026&quot;</span>; <span class=\"comment\">/* ascii code for the ellipsis character */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> ellipsis &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>infinite代表无限循环的意思，也就是after伪类的宽度是一直在变化的，也就实现了动画的效果。</p>\n<h2 id=\"样式重置\"><a href=\"#样式重置\" class=\"headerlink\" title=\"样式重置\"></a>样式重置</h2><p>关于css样式重置，每个公司应该都有自己的一套规范，样式重置与标准化是两个不同的概念，重置则是完全抛弃浏览器的默认样式，而标准化则是按照实际需要去优化浏览器默认的样式，如业界常用的normalize.css如下的代码就是经典的样式重置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">div</span>, <span class=\"selector-tag\">span</span>, <span class=\"selector-tag\">applet</span>, <span class=\"selector-tag\">object</span>, <span class=\"selector-tag\">iframe</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">abbr</span>, <span class=\"selector-tag\">acronym</span>, <span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">big</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">del</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">img</span>, <span class=\"selector-tag\">ins</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">q</span>, <span class=\"selector-tag\">s</span>, <span class=\"selector-tag\">samp</span>, <span class=\"selector-tag\">small</span>, <span class=\"selector-tag\">strike</span>, <span class=\"selector-tag\">strong</span>, <span class=\"selector-tag\">sub</span>, <span class=\"selector-tag\">sup</span>, <span class=\"selector-tag\">tt</span>, <span class=\"selector-tag\">var</span>, <span class=\"selector-tag\">b</span>, <span class=\"selector-tag\">u</span>, <span class=\"selector-tag\">i</span>, <span class=\"selector-tag\">center</span>, <span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">li</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">label</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">caption</span>, <span class=\"selector-tag\">tbody</span>, <span class=\"selector-tag\">tfoot</span>, <span class=\"selector-tag\">thead</span>, <span class=\"selector-tag\">tr</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span>, <span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">canvas</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">embed</span>, <span class=\"selector-tag\">figure</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">output</span>, <span class=\"selector-tag\">ruby</span>, <span class=\"selector-tag\">section</span>, <span class=\"selector-tag\">summary</span>, <span class=\"selector-tag\">time</span>, <span class=\"selector-tag\">mark</span>, <span class=\"selector-tag\">audio</span>, <span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">101%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">62.5%</span>; <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>; <span class=\"attribute\">font-family</span>: Arial, Tahoma, sans-serif; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">figure</span>, <span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">section</span> &#123; <span class=\"attribute\">display</span>: block; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span> &#123; <span class=\"attribute\">list-style</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">q</span> &#123; <span class=\"attribute\">quotes</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>; <span class=\"attribute\">content</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">strong</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"attribute\">border-spacing</span>: <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">0</span>; <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; <span class=\"attribute\">line-height</span>: <span class=\"number\">1.0em</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"跨浏览器的透明方案\"><a href=\"#跨浏览器的透明方案\" class=\"headerlink\" title=\"跨浏览器的透明方案\"></a>跨浏览器的透明方案</h2><p>透明元素的使用，在现在是越来越频繁了，那么面对主流的浏览器对于透明元素的定义的不同，如下的代码则是统一了浏览器的透明效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.transparent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">alpha</span>(opacity=<span class=\"number\">50</span>); <span class=\"comment\">/* internet explorer */</span></span><br><span class=\"line\">    <span class=\"attribute\">-khtml-opacity</span>: <span class=\"number\">0.5</span>;      <span class=\"comment\">/* khtml, old safari */</span></span><br><span class=\"line\">    <span class=\"attribute\">-moz-opacity</span>: <span class=\"number\">0.5</span>;       <span class=\"comment\">/* mozilla, netscape */</span></span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.5</span>;           <span class=\"comment\">/* fx, safari, opera */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"强制出现滚动条\"><a href=\"#强制出现滚动条\" class=\"headerlink\" title=\"强制出现滚动条\"></a>强制出现滚动条</h2><p>大多数的情况，关于浏览器滚动条，我们都是定义自动滚动的，也就是说，只在内容超出窗口高度的时候，才让它出现滚动条，那么在有些需求下，滚动条必须要出现，那该怎么办呢？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">101%</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>让根元素的高度超出窗口高度，就可以强制出现滚动条了。</p>\n<h2 id=\"在可点击的项目上强制手型\"><a href=\"#在可点击的项目上强制手型\" class=\"headerlink\" title=\"在可点击的项目上强制手型\"></a>在可点击的项目上强制手型</h2><p>设置手型，是比较常用的属性，但是基本上我们在使用到的时候，才会去局部添加，这样的话样式会有点冗余，解决方法就是设置一个公用的手型属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-attr\">[href]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;submit&#x27;</span>]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;image&#x27;</span>]</span>, <span class=\"selector-tag\">label</span><span class=\"selector-attr\">[for]</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-class\">.pointer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用移动Webkit的选择高亮\"><a href=\"#禁用移动Webkit的选择高亮\" class=\"headerlink\" title=\"禁用移动Webkit的选择高亮\"></a>禁用移动Webkit的选择高亮</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-khtml-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"flex元素定宽","date":"2018-07-24T13:30:02.000Z","_content":"\n最近项目开发中，移动端尝试了flex布局，遇到了一个小细节：   \n\nflex 内部元素如何定宽展示\n\n注意的一点  如果直接给元素加上width属性，是不会生效的，原因是由于flex属性是个复合属性，如下的设置，是等同的\n``` css\n\nel {\n  flex:0 0 90px\n}\n\nel {\n  flex-grow:0;\n  flex-shrink:0;\n  flex-basis:90px;\n}\n```\n\n如上代码所示，flex属性有三个属性：\n * flex-grow表示是否会自动增大，1为是，0为否，默认1\n * flex-shrink表示是否自动缩小，1为是，0为否，默认1\n * flex-basis：宽度px/百分比/数字\n\n因此，如果要在flex元素上使用定宽操作，那就必须要按照下面的代码去添加\n```css\nel {\n  flex:0 0 90px /*要设置的宽度*/\n}\n```\n\n同时记得给容器元素加上允许换行的属性：\n```css\n parent {\n   flex-wrap:wrap;\n }\n```\n不然元素总宽度超出父容器的时候，默认是不换行的。\n","source":"_posts/flex元素定宽.md","raw":"---\ntitle: flex元素定宽\ndate: 2018-07-24 21:30:02\ntags:\n  - flex\n  - css\ncategories:\n  - css\n  - flex\n---\n\n最近项目开发中，移动端尝试了flex布局，遇到了一个小细节：   \n\nflex 内部元素如何定宽展示\n\n注意的一点  如果直接给元素加上width属性，是不会生效的，原因是由于flex属性是个复合属性，如下的设置，是等同的\n``` css\n\nel {\n  flex:0 0 90px\n}\n\nel {\n  flex-grow:0;\n  flex-shrink:0;\n  flex-basis:90px;\n}\n```\n\n如上代码所示，flex属性有三个属性：\n * flex-grow表示是否会自动增大，1为是，0为否，默认1\n * flex-shrink表示是否自动缩小，1为是，0为否，默认1\n * flex-basis：宽度px/百分比/数字\n\n因此，如果要在flex元素上使用定宽操作，那就必须要按照下面的代码去添加\n```css\nel {\n  flex:0 0 90px /*要设置的宽度*/\n}\n```\n\n同时记得给容器元素加上允许换行的属性：\n```css\n parent {\n   flex-wrap:wrap;\n }\n```\n不然元素总宽度超出父容器的时候，默认是不换行的。\n","slug":"flex元素定宽","published":1,"updated":"2018-07-24T13:32:27.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlh000jmsvi3tfpd8u4","content":"<p>最近项目开发中，移动端尝试了flex布局，遇到了一个小细节：   </p>\n<p>flex 内部元素如何定宽展示</p>\n<p>注意的一点  如果直接给元素加上width属性，是不会生效的，原因是由于flex属性是个复合属性，如下的设置，是等同的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">90px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>:<span class=\"number\">90px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，flex属性有三个属性：</p>\n<ul>\n<li>flex-grow表示是否会自动增大，1为是，0为否，默认1</li>\n<li>flex-shrink表示是否自动缩小，1为是，0为否，默认1</li>\n<li>flex-basis：宽度px/百分比/数字</li>\n</ul>\n<p>因此，如果要在flex元素上使用定宽操作，那就必须要按照下面的代码去添加</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">90px</span> <span class=\"comment\">/*要设置的宽度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时记得给容器元素加上允许换行的属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不然元素总宽度超出父容器的时候，默认是不换行的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目开发中，移动端尝试了flex布局，遇到了一个小细节：   </p>\n<p>flex 内部元素如何定宽展示</p>\n<p>注意的一点  如果直接给元素加上width属性，是不会生效的，原因是由于flex属性是个复合属性，如下的设置，是等同的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">90px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>:<span class=\"number\">90px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，flex属性有三个属性：</p>\n<ul>\n<li>flex-grow表示是否会自动增大，1为是，0为否，默认1</li>\n<li>flex-shrink表示是否自动缩小，1为是，0为否，默认1</li>\n<li>flex-basis：宽度px/百分比/数字</li>\n</ul>\n<p>因此，如果要在flex元素上使用定宽操作，那就必须要按照下面的代码去添加</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">el</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">90px</span> <span class=\"comment\">/*要设置的宽度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时记得给容器元素加上允许换行的属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不然元素总宽度超出父容器的时候，默认是不换行的。</p>\n"},{"title":"css设置居中方案总结","date":"2018-04-02T01:25:44.000Z","_content":"\n\n　　回想一下，自己平时项目里遇到的比较多的就是css如何让元素居中显示，其实差不多每种情况都遇到过，所采用的方法也都各有利弊，下面对这些方法来做个概括，对其中的坑点，也会一一指出来，希望能给遇到问题的同学一些参考： \n\n## 一、水平居中\n###  01 行内元素 text-align: center;\n```css\n.parent {\n   text-align: center;\n}\n```\n### 02 块级元素 margin: auto;\n**注意：低版本的浏览器还需要设置text-align:center;**\n```css\n.parent {\n    text-align: center; \n}\n.child {\n    margin: auto; \n    border: 1px solid blue;\n}\n```\n## 二、垂直居中\n### 01 行内元素（单行文字垂直居中）：设置 line-height = height；\n```css\n.parent {\n   height: 200px;\n   line-height: 200px;\n   border: 1px solid red;\n}\n```\n### 02 块级元素：绝对定位（需要提前知道尺寸）\n优点：兼容性不错  \n\n缺点：需要提前知道尺寸，可拓展性和自适应性不好  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    background: blue;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-top: -20px;\n    margin-left: -40px;\n}\n```\n### 03 块级元素：绝对定位 + transform\n优点：不需要提前知道尺寸  \n缺点：兼容性不好，只支持ie9+浏览器，而且还会引发一些其他的奇怪的兼容问题  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    background: blue;\n}\n```\n### 04 块级元素：绝对定位 + margin: auto;\n优点：不需要提前知道尺寸，兼容性好  \n缺点：我目前还没有遇到。  \n此方法出自张鑫旭老师的博客，我也是了解了之后，才运用到实际开发中的  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    background: blue;\n}\n```\n### 05 块级元素：padding\n缺点：如果高度固定，需要提前计算尺寸（**只在某些特定情况适用**）\n```css\n.parent {\n    padding: 5% 0;\n}\n.child {\n    padding: 10% 0;\n    background: blue;\n}\n```\n### 06 块级元素：display: table-cell\n**父元素一定要设置display:table，这样子元素的table-cell才能生效**\n```css\n.parent {\n    width: 600px;\n    height: 200px;\n    border: 1px solid red;\n    display: table;\n}\n.child {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n### 07 块级元素：display: flex（移动端页面推荐）\n缺点：兼容性不好\n```css\n.parent {\n    width: 600px;\n    height: 200px;\n    border: 1px solid red;\n    display: flex;\n    align-items: center;\n    justify-content: center;  /*水平居中*/\n}\n.child {\n    background: blue;\n}\n```\n### 08 块级元素：伪元素\n这个方案是从张鑫旭大神的新书：《css世界》里读到的\n\nvertical-align这个属性需要与同元素内的行内元素的基线为参考，高度100%自然就以高度50%处即平常所说的中线为基线，middle默认对齐其基线，自然也就垂直居中对齐了\n```css\n.parent {\n    width: 300px;\n    height: 300px;\n    border: 1px solid red;\n    text-align: center;\n}\n.child {\n    background: blue;\n    width: 100px;\n    height: 40px;\n    display: inline-block;\n    vertical-align: middle;\n}\n.parent::before {\n    content: '';\n    height: 100%;\n    display: inline-block;\n    vertical-align: middle;            \n}\n```\n### 09 块级元素：inline-block\nHTML代码：\n```html\n<div class=\"parent\">\n    <div class=\"child\">child</div>\n    <div class=\"brother\">brother</div>\n</div>\n```\nCSS代码：\n```css\n.parent {\n    width: 400px;\n    height: 400px;\n    border: 1px solid red;\n    position: relative;\n}\n.child, .brother {\n    display: inline-block;\n    vertical-align: middle;\n}\n.child {\n    background: blue;\n    font-size: 12px;\n}\n.brother {\n    height: 400px;\n    font-size: 0;\n}\n```\n### 其他\ntable布局是十年前前端最常用的布局方式，最省心但是冗余也很多，结构嵌套也比较深。现在前端变化日新月异，不推荐使用\n\n```html\n<table>\n     <tr>\n         <td align=\"center\" valign=\"middle\">content</td> \n     </tr>\n</table>\n```\n\n\n结语：希望上述的总结对相关的同学能起到参考性的作用。","source":"_posts/css设置居中方案总结.md","raw":"---\ntitle: css设置居中方案总结\ndate: 2018-04-02 09:25:44\ntags:\n  - css\ncategories:\n  - css\n---\n\n\n　　回想一下，自己平时项目里遇到的比较多的就是css如何让元素居中显示，其实差不多每种情况都遇到过，所采用的方法也都各有利弊，下面对这些方法来做个概括，对其中的坑点，也会一一指出来，希望能给遇到问题的同学一些参考： \n\n## 一、水平居中\n###  01 行内元素 text-align: center;\n```css\n.parent {\n   text-align: center;\n}\n```\n### 02 块级元素 margin: auto;\n**注意：低版本的浏览器还需要设置text-align:center;**\n```css\n.parent {\n    text-align: center; \n}\n.child {\n    margin: auto; \n    border: 1px solid blue;\n}\n```\n## 二、垂直居中\n### 01 行内元素（单行文字垂直居中）：设置 line-height = height；\n```css\n.parent {\n   height: 200px;\n   line-height: 200px;\n   border: 1px solid red;\n}\n```\n### 02 块级元素：绝对定位（需要提前知道尺寸）\n优点：兼容性不错  \n\n缺点：需要提前知道尺寸，可拓展性和自适应性不好  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    background: blue;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-top: -20px;\n    margin-left: -40px;\n}\n```\n### 03 块级元素：绝对定位 + transform\n优点：不需要提前知道尺寸  \n缺点：兼容性不好，只支持ie9+浏览器，而且还会引发一些其他的奇怪的兼容问题  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    background: blue;\n}\n```\n### 04 块级元素：绝对定位 + margin: auto;\n优点：不需要提前知道尺寸，兼容性好  \n缺点：我目前还没有遇到。  \n此方法出自张鑫旭老师的博客，我也是了解了之后，才运用到实际开发中的  \n```css\n.parent {\n    position: relative;\n    height: 200px;\n}\n.child {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    background: blue;\n}\n```\n### 05 块级元素：padding\n缺点：如果高度固定，需要提前计算尺寸（**只在某些特定情况适用**）\n```css\n.parent {\n    padding: 5% 0;\n}\n.child {\n    padding: 10% 0;\n    background: blue;\n}\n```\n### 06 块级元素：display: table-cell\n**父元素一定要设置display:table，这样子元素的table-cell才能生效**\n```css\n.parent {\n    width: 600px;\n    height: 200px;\n    border: 1px solid red;\n    display: table;\n}\n.child {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n### 07 块级元素：display: flex（移动端页面推荐）\n缺点：兼容性不好\n```css\n.parent {\n    width: 600px;\n    height: 200px;\n    border: 1px solid red;\n    display: flex;\n    align-items: center;\n    justify-content: center;  /*水平居中*/\n}\n.child {\n    background: blue;\n}\n```\n### 08 块级元素：伪元素\n这个方案是从张鑫旭大神的新书：《css世界》里读到的\n\nvertical-align这个属性需要与同元素内的行内元素的基线为参考，高度100%自然就以高度50%处即平常所说的中线为基线，middle默认对齐其基线，自然也就垂直居中对齐了\n```css\n.parent {\n    width: 300px;\n    height: 300px;\n    border: 1px solid red;\n    text-align: center;\n}\n.child {\n    background: blue;\n    width: 100px;\n    height: 40px;\n    display: inline-block;\n    vertical-align: middle;\n}\n.parent::before {\n    content: '';\n    height: 100%;\n    display: inline-block;\n    vertical-align: middle;            \n}\n```\n### 09 块级元素：inline-block\nHTML代码：\n```html\n<div class=\"parent\">\n    <div class=\"child\">child</div>\n    <div class=\"brother\">brother</div>\n</div>\n```\nCSS代码：\n```css\n.parent {\n    width: 400px;\n    height: 400px;\n    border: 1px solid red;\n    position: relative;\n}\n.child, .brother {\n    display: inline-block;\n    vertical-align: middle;\n}\n.child {\n    background: blue;\n    font-size: 12px;\n}\n.brother {\n    height: 400px;\n    font-size: 0;\n}\n```\n### 其他\ntable布局是十年前前端最常用的布局方式，最省心但是冗余也很多，结构嵌套也比较深。现在前端变化日新月异，不推荐使用\n\n```html\n<table>\n     <tr>\n         <td align=\"center\" valign=\"middle\">content</td> \n     </tr>\n</table>\n```\n\n\n结语：希望上述的总结对相关的同学能起到参考性的作用。","slug":"css设置居中方案总结","published":1,"updated":"2018-06-01T01:49:37.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxli000lmsvid2xu8lgl","content":"<p>　　回想一下，自己平时项目里遇到的比较多的就是css如何让元素居中显示，其实差不多每种情况都遇到过，所采用的方法也都各有利弊，下面对这些方法来做个概括，对其中的坑点，也会一一指出来，希望能给遇到问题的同学一些参考： </p>\n<h2 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h2><h3 id=\"01-行内元素-text-align-center\"><a href=\"#01-行内元素-text-align-center\" class=\"headerlink\" title=\"01 行内元素 text-align: center;\"></a>01 行内元素 text-align: center;</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-块级元素-margin-auto\"><a href=\"#02-块级元素-margin-auto\" class=\"headerlink\" title=\"02 块级元素 margin: auto;\"></a>02 块级元素 margin: auto;</h3><p><strong>注意：低版本的浏览器还需要设置text-align:center;</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h2><h3 id=\"01-行内元素（单行文字垂直居中）：设置-line-height-height；\"><a href=\"#01-行内元素（单行文字垂直居中）：设置-line-height-height；\" class=\"headerlink\" title=\"01 行内元素（单行文字垂直居中）：设置 line-height = height；\"></a>01 行内元素（单行文字垂直居中）：设置 line-height = height；</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-块级元素：绝对定位（需要提前知道尺寸）\"><a href=\"#02-块级元素：绝对定位（需要提前知道尺寸）\" class=\"headerlink\" title=\"02 块级元素：绝对定位（需要提前知道尺寸）\"></a>02 块级元素：绝对定位（需要提前知道尺寸）</h3><p>优点：兼容性不错  </p>\n<p>缺点：需要提前知道尺寸，可拓展性和自适应性不好  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"03-块级元素：绝对定位-transform\"><a href=\"#03-块级元素：绝对定位-transform\" class=\"headerlink\" title=\"03 块级元素：绝对定位 + transform\"></a>03 块级元素：绝对定位 + transform</h3><p>优点：不需要提前知道尺寸<br>缺点：兼容性不好，只支持ie9+浏览器，而且还会引发一些其他的奇怪的兼容问题  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"04-块级元素：绝对定位-margin-auto\"><a href=\"#04-块级元素：绝对定位-margin-auto\" class=\"headerlink\" title=\"04 块级元素：绝对定位 + margin: auto;\"></a>04 块级元素：绝对定位 + margin: auto;</h3><p>优点：不需要提前知道尺寸，兼容性好<br>缺点：我目前还没有遇到。<br>此方法出自张鑫旭老师的博客，我也是了解了之后，才运用到实际开发中的  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"05-块级元素：padding\"><a href=\"#05-块级元素：padding\" class=\"headerlink\" title=\"05 块级元素：padding\"></a>05 块级元素：padding</h3><p>缺点：如果高度固定，需要提前计算尺寸（<strong>只在某些特定情况适用</strong>）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"06-块级元素：display-table-cell\"><a href=\"#06-块级元素：display-table-cell\" class=\"headerlink\" title=\"06 块级元素：display: table-cell\"></a>06 块级元素：display: table-cell</h3><p><strong>父元素一定要设置display:table，这样子元素的table-cell才能生效</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"07-块级元素：display-flex（移动端页面推荐）\"><a href=\"#07-块级元素：display-flex（移动端页面推荐）\" class=\"headerlink\" title=\"07 块级元素：display: flex（移动端页面推荐）\"></a>07 块级元素：display: flex（移动端页面推荐）</h3><p>缺点：兼容性不好</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  <span class=\"comment\">/*水平居中*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"08-块级元素：伪元素\"><a href=\"#08-块级元素：伪元素\" class=\"headerlink\" title=\"08 块级元素：伪元素\"></a>08 块级元素：伪元素</h3><p>这个方案是从张鑫旭大神的新书：《css世界》里读到的</p>\n<p>vertical-align这个属性需要与同元素内的行内元素的基线为参考，高度100%自然就以高度50%处即平常所说的中线为基线，middle默认对齐其基线，自然也就垂直居中对齐了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"09-块级元素：inline-block\"><a href=\"#09-块级元素：inline-block\" class=\"headerlink\" title=\"09 块级元素：inline-block\"></a>09 块级元素：inline-block</h3><p>HTML代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;brother&quot;</span>&gt;</span>brother<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>, <span class=\"selector-class\">.brother</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.brother</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>table布局是十年前前端最常用的布局方式，最省心但是冗余也很多，结构嵌套也比较深。现在前端变化日新月异，不推荐使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">valign</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结语：希望上述的总结对相关的同学能起到参考性的作用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　回想一下，自己平时项目里遇到的比较多的就是css如何让元素居中显示，其实差不多每种情况都遇到过，所采用的方法也都各有利弊，下面对这些方法来做个概括，对其中的坑点，也会一一指出来，希望能给遇到问题的同学一些参考： </p>\n<h2 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h2><h3 id=\"01-行内元素-text-align-center\"><a href=\"#01-行内元素-text-align-center\" class=\"headerlink\" title=\"01 行内元素 text-align: center;\"></a>01 行内元素 text-align: center;</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-块级元素-margin-auto\"><a href=\"#02-块级元素-margin-auto\" class=\"headerlink\" title=\"02 块级元素 margin: auto;\"></a>02 块级元素 margin: auto;</h3><p><strong>注意：低版本的浏览器还需要设置text-align:center;</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h2><h3 id=\"01-行内元素（单行文字垂直居中）：设置-line-height-height；\"><a href=\"#01-行内元素（单行文字垂直居中）：设置-line-height-height；\" class=\"headerlink\" title=\"01 行内元素（单行文字垂直居中）：设置 line-height = height；\"></a>01 行内元素（单行文字垂直居中）：设置 line-height = height；</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-块级元素：绝对定位（需要提前知道尺寸）\"><a href=\"#02-块级元素：绝对定位（需要提前知道尺寸）\" class=\"headerlink\" title=\"02 块级元素：绝对定位（需要提前知道尺寸）\"></a>02 块级元素：绝对定位（需要提前知道尺寸）</h3><p>优点：兼容性不错  </p>\n<p>缺点：需要提前知道尺寸，可拓展性和自适应性不好  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"03-块级元素：绝对定位-transform\"><a href=\"#03-块级元素：绝对定位-transform\" class=\"headerlink\" title=\"03 块级元素：绝对定位 + transform\"></a>03 块级元素：绝对定位 + transform</h3><p>优点：不需要提前知道尺寸<br>缺点：兼容性不好，只支持ie9+浏览器，而且还会引发一些其他的奇怪的兼容问题  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"04-块级元素：绝对定位-margin-auto\"><a href=\"#04-块级元素：绝对定位-margin-auto\" class=\"headerlink\" title=\"04 块级元素：绝对定位 + margin: auto;\"></a>04 块级元素：绝对定位 + margin: auto;</h3><p>优点：不需要提前知道尺寸，兼容性好<br>缺点：我目前还没有遇到。<br>此方法出自张鑫旭老师的博客，我也是了解了之后，才运用到实际开发中的  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"05-块级元素：padding\"><a href=\"#05-块级元素：padding\" class=\"headerlink\" title=\"05 块级元素：padding\"></a>05 块级元素：padding</h3><p>缺点：如果高度固定，需要提前计算尺寸（<strong>只在某些特定情况适用</strong>）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"06-块级元素：display-table-cell\"><a href=\"#06-块级元素：display-table-cell\" class=\"headerlink\" title=\"06 块级元素：display: table-cell\"></a>06 块级元素：display: table-cell</h3><p><strong>父元素一定要设置display:table，这样子元素的table-cell才能生效</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"07-块级元素：display-flex（移动端页面推荐）\"><a href=\"#07-块级元素：display-flex（移动端页面推荐）\" class=\"headerlink\" title=\"07 块级元素：display: flex（移动端页面推荐）\"></a>07 块级元素：display: flex（移动端页面推荐）</h3><p>缺点：兼容性不好</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  <span class=\"comment\">/*水平居中*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"08-块级元素：伪元素\"><a href=\"#08-块级元素：伪元素\" class=\"headerlink\" title=\"08 块级元素：伪元素\"></a>08 块级元素：伪元素</h3><p>这个方案是从张鑫旭大神的新书：《css世界》里读到的</p>\n<p>vertical-align这个属性需要与同元素内的行内元素的基线为参考，高度100%自然就以高度50%处即平常所说的中线为基线，middle默认对齐其基线，自然也就垂直居中对齐了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"09-块级元素：inline-block\"><a href=\"#09-块级元素：inline-block\" class=\"headerlink\" title=\"09 块级元素：inline-block\"></a>09 块级元素：inline-block</h3><p>HTML代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span>child<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;brother&quot;</span>&gt;</span>brother<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>, <span class=\"selector-class\">.brother</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.brother</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>table布局是十年前前端最常用的布局方式，最省心但是冗余也很多，结构嵌套也比较深。现在前端变化日新月异，不推荐使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">valign</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结语：希望上述的总结对相关的同学能起到参考性的作用。</p>\n"},{"title":"flex在文本自适应中的一个小应用","date":"2018-10-28T12:12:37.000Z","_content":"\n最近在项目里遇到了一个问题，如图:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/1.png?raw=true)\n\n## 结构和样式代码\n\n```html\n<div class=\"clearfix luggage-type-w\">\n  <!-- 文字块 -->\n    <div class=\"fl ell luggage-type luggage-type-tools\"></div>\n    <!-- 虚线块 -->\n    <div class=\"rel link-line lt-link-line\"></div>\n</div>\n```\n\n```css\n\n.fl {\n  float:left;\n}\n\n.rel {\n  position:relative;\n}\n\n.luggage-type {\n    padding-left: 25px;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n.link-line {\n    margin: 0 5px;\n    border-bottom: dashed 2px #dcdcdc;\n}\n.lt-link-line {\n    top: 8px;\n    margin: 0 12px 0 70px;\n}\n```\n\n## 起因\n\n其实问题很明显，左边的文字不定宽，已经浮动脱离文档流，但是右边的虚线，是相对自己定位，往下移动，底部虚线边框，但是布局是写死的，由样式表文件能看出来，margin属性是定死的，这样就导致，当文字超过目前的两个字时，会被虚线直接穿过，这样就导致了布局的错乱，而需求是要文字不能定死的，自适应。因此需要作出调整。\n\n## 处理方式1\n\n前端同事是这么做的，不就是文字没定宽，导致了虚线穿透么，那很好办啊，直接加上文字截断就好了，定个最大宽度：\n\n```css\n.ell {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    max-width: 65px;\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n```\n\n效果如下：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/2.png?raw=true)  \n\n## 问题\n\n其实能看出来，定宽截断的效果确实能够阻挡虚线穿透，但是，显得太过生硬，一方面，截断掉文字，对用户体验非常不友好，毕竟截断的应用场景，仅仅是超出当前文本行的处理，在这里，显得太不适合。另一方面，给个定宽，如果没有达到宽度怎么办，那就像上图一样，右边会留出空白，我想，作为一个合格的前端工程师，是不会容忍这样的瑕疵出现的，因此，问题还是没有解决，毕竟没有通过PM的眼睛啊，于是我尝试着给出了自己的处理方式：\n\n## 处理方式2\n\n其实简单分析下，这样的需求，从布局上面，就算是伸缩自适应的弹性布局，那么对于这么一个外部容器来说，其内部就是弹性的，那么可以考虑使用flex进行处理(项目无需兼容ie9及以下的浏览器，因此是可以兼容使用flex的)\n\n先给出我的样式代码吧：\n\n```css\n.luggage-type-w {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    /* max-width: 65px; */\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n\n.lt-link-line {\n    top: -8px;\n    /* margin: 0 12px 0 90px; */\n    -webkit-box-flex: 1;\n    -webkit-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n}\n\n```\n\n效果图如下：   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/3.png?raw=true)  \n\n## 原理：  \n\nflex有个属性，就是容器内部元素flex:1，其实是下面这种写法的缩写：\n\n```css\nele {\n  flex:1 1 auto;\n}\n```\n\n第一个1代表flex-grow，是指子元素占据的父元素空间，默认值为0，所有子元素的flex-grow数值加在一起，父元素剩下的空间按照比例分配，第二个1是flex-shrink，用来定义伸缩项目收缩的能力，默认值是1,0的时候不改变，第三个就是flex-basis,通俗点，就是该元素占据的宽度,默认值为auto。  \n\n实际上，不加上flex属性，其实flex的属性就是默认的 0 1 auto，因此，当子元素没有flex属性的时候，flex-grow为0，不参与弹性计算。那给虚线块加上flex-grow:1的属性，也就是让他占据剩下的空间，达到自适应的目的。\n\n其实在这里使用的方式很简单，给父容器定义flex的盒模型，对于其里面的子元素，因为要求是虚线根据文字块的宽度动态自适应布局，因此，这里的文字块div无需给出相关flex属性，而在虚线块上面添加flex:1，是因为flex:1其实是设置flex:1的子元素平均分配父元素的所有空间，（不包括没设置flex属性的子元素，没设置flex的子元素，默认是flex-grow:0不参与弹性计算）,那其实意思就是，案例里，在父元素容器中，虚线占据了除去文字以外的剩余空间，那么无论文字有多少，虚线都会根据文字的长度，自适应的占据剩余空间。\n\n## 总结\n\n其实flex现在真的是基本算是可以随意使用了，至少我是在移动端页面可以毫无顾忌的使用，在pc端，只要不考虑兼容鬼畜的IE，基本按照兼容模式写写，都是能够OK的，毕竟flex实在太强大，很多以前要用奇技淫巧才能完成的样式，flex简单几句就能够强大的完成。\n\n很多时候，重要的不仅仅是问题解决的结果，更重要的是解决问题的思路，以及总结。\n\n\n\n","source":"_posts/flex在文本自适应中的一个小应用.md","raw":"---\ntitle: flex在文本自适应中的一个小应用\ndate: 2018-10-28 20:12:37\ntags:\n  - css\n  - flex\ncategories:\n  - css\n  - flex\n---\n\n最近在项目里遇到了一个问题，如图:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/1.png?raw=true)\n\n## 结构和样式代码\n\n```html\n<div class=\"clearfix luggage-type-w\">\n  <!-- 文字块 -->\n    <div class=\"fl ell luggage-type luggage-type-tools\"></div>\n    <!-- 虚线块 -->\n    <div class=\"rel link-line lt-link-line\"></div>\n</div>\n```\n\n```css\n\n.fl {\n  float:left;\n}\n\n.rel {\n  position:relative;\n}\n\n.luggage-type {\n    padding-left: 25px;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n.link-line {\n    margin: 0 5px;\n    border-bottom: dashed 2px #dcdcdc;\n}\n.lt-link-line {\n    top: 8px;\n    margin: 0 12px 0 70px;\n}\n```\n\n## 起因\n\n其实问题很明显，左边的文字不定宽，已经浮动脱离文档流，但是右边的虚线，是相对自己定位，往下移动，底部虚线边框，但是布局是写死的，由样式表文件能看出来，margin属性是定死的，这样就导致，当文字超过目前的两个字时，会被虚线直接穿过，这样就导致了布局的错乱，而需求是要文字不能定死的，自适应。因此需要作出调整。\n\n## 处理方式1\n\n前端同事是这么做的，不就是文字没定宽，导致了虚线穿透么，那很好办啊，直接加上文字截断就好了，定个最大宽度：\n\n```css\n.ell {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    max-width: 65px;\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n```\n\n效果如下：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/2.png?raw=true)  \n\n## 问题\n\n其实能看出来，定宽截断的效果确实能够阻挡虚线穿透，但是，显得太过生硬，一方面，截断掉文字，对用户体验非常不友好，毕竟截断的应用场景，仅仅是超出当前文本行的处理，在这里，显得太不适合。另一方面，给个定宽，如果没有达到宽度怎么办，那就像上图一样，右边会留出空白，我想，作为一个合格的前端工程师，是不会容忍这样的瑕疵出现的，因此，问题还是没有解决，毕竟没有通过PM的眼睛啊，于是我尝试着给出了自己的处理方式：\n\n## 处理方式2\n\n其实简单分析下，这样的需求，从布局上面，就算是伸缩自适应的弹性布局，那么对于这么一个外部容器来说，其内部就是弹性的，那么可以考虑使用flex进行处理(项目无需兼容ie9及以下的浏览器，因此是可以兼容使用flex的)\n\n先给出我的样式代码吧：\n\n```css\n.luggage-type-w {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n\n.luggage-type-tools {\n    padding-top: 2px;\n    /* max-width: 65px; */\n    background: url(\"../../img/detail/yp-icon.png\") left center no-repeat;\n    color: #f98d4b;\n}\n\n.lt-link-line {\n    top: -8px;\n    /* margin: 0 12px 0 90px; */\n    -webkit-box-flex: 1;\n    -webkit-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n}\n\n```\n\n效果图如下：   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181023/3.png?raw=true)  \n\n## 原理：  \n\nflex有个属性，就是容器内部元素flex:1，其实是下面这种写法的缩写：\n\n```css\nele {\n  flex:1 1 auto;\n}\n```\n\n第一个1代表flex-grow，是指子元素占据的父元素空间，默认值为0，所有子元素的flex-grow数值加在一起，父元素剩下的空间按照比例分配，第二个1是flex-shrink，用来定义伸缩项目收缩的能力，默认值是1,0的时候不改变，第三个就是flex-basis,通俗点，就是该元素占据的宽度,默认值为auto。  \n\n实际上，不加上flex属性，其实flex的属性就是默认的 0 1 auto，因此，当子元素没有flex属性的时候，flex-grow为0，不参与弹性计算。那给虚线块加上flex-grow:1的属性，也就是让他占据剩下的空间，达到自适应的目的。\n\n其实在这里使用的方式很简单，给父容器定义flex的盒模型，对于其里面的子元素，因为要求是虚线根据文字块的宽度动态自适应布局，因此，这里的文字块div无需给出相关flex属性，而在虚线块上面添加flex:1，是因为flex:1其实是设置flex:1的子元素平均分配父元素的所有空间，（不包括没设置flex属性的子元素，没设置flex的子元素，默认是flex-grow:0不参与弹性计算）,那其实意思就是，案例里，在父元素容器中，虚线占据了除去文字以外的剩余空间，那么无论文字有多少，虚线都会根据文字的长度，自适应的占据剩余空间。\n\n## 总结\n\n其实flex现在真的是基本算是可以随意使用了，至少我是在移动端页面可以毫无顾忌的使用，在pc端，只要不考虑兼容鬼畜的IE，基本按照兼容模式写写，都是能够OK的，毕竟flex实在太强大，很多以前要用奇技淫巧才能完成的样式，flex简单几句就能够强大的完成。\n\n很多时候，重要的不仅仅是问题解决的结果，更重要的是解决问题的思路，以及总结。\n\n\n\n","slug":"flex在文本自适应中的一个小应用","published":1,"updated":"2018-10-28T12:15:35.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxll000pmsvi11hla26d","content":"<p>最近在项目里遇到了一个问题，如图:</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/1.png?raw=true\"></p>\n<h2 id=\"结构和样式代码\"><a href=\"#结构和样式代码\" class=\"headerlink\" title=\"结构和样式代码\"></a>结构和样式代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clearfix luggage-type-w&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 文字块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl ell luggage-type luggage-type-tools&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 虚线块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;rel link-line lt-link-line&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fl</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.rel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: dashed <span class=\"number\">2px</span> <span class=\"number\">#dcdcdc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.lt-link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">12px</span> <span class=\"number\">0</span> <span class=\"number\">70px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>其实问题很明显，左边的文字不定宽，已经浮动脱离文档流，但是右边的虚线，是相对自己定位，往下移动，底部虚线边框，但是布局是写死的，由样式表文件能看出来，margin属性是定死的，这样就导致，当文字超过目前的两个字时，会被虚线直接穿过，这样就导致了布局的错乱，而需求是要文字不能定死的，自适应。因此需要作出调整。</p>\n<h2 id=\"处理方式1\"><a href=\"#处理方式1\" class=\"headerlink\" title=\"处理方式1\"></a>处理方式1</h2><p>前端同事是这么做的，不就是文字没定宽，导致了虚线穿透么，那很好办啊，直接加上文字截断就好了，定个最大宽度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ell</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">65px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/2.png?raw=true\">  </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>其实能看出来，定宽截断的效果确实能够阻挡虚线穿透，但是，显得太过生硬，一方面，截断掉文字，对用户体验非常不友好，毕竟截断的应用场景，仅仅是超出当前文本行的处理，在这里，显得太不适合。另一方面，给个定宽，如果没有达到宽度怎么办，那就像上图一样，右边会留出空白，我想，作为一个合格的前端工程师，是不会容忍这样的瑕疵出现的，因此，问题还是没有解决，毕竟没有通过PM的眼睛啊，于是我尝试着给出了自己的处理方式：</p>\n<h2 id=\"处理方式2\"><a href=\"#处理方式2\" class=\"headerlink\" title=\"处理方式2\"></a>处理方式2</h2><p>其实简单分析下，这样的需求，从布局上面，就算是伸缩自适应的弹性布局，那么对于这么一个外部容器来说，其内部就是弹性的，那么可以考虑使用flex进行处理(项目无需兼容ie9及以下的浏览器，因此是可以兼容使用flex的)</p>\n<p>先给出我的样式代码吧：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.luggage-type-w</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* max-width: 65px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.lt-link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* margin: 0 12px 0 90px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果图如下：   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/3.png?raw=true\">  </p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><p>flex有个属性，就是容器内部元素flex:1，其实是下面这种写法的缩写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个1代表flex-grow，是指子元素占据的父元素空间，默认值为0，所有子元素的flex-grow数值加在一起，父元素剩下的空间按照比例分配，第二个1是flex-shrink，用来定义伸缩项目收缩的能力，默认值是1,0的时候不改变，第三个就是flex-basis,通俗点，就是该元素占据的宽度,默认值为auto。  </p>\n<p>实际上，不加上flex属性，其实flex的属性就是默认的 0 1 auto，因此，当子元素没有flex属性的时候，flex-grow为0，不参与弹性计算。那给虚线块加上flex-grow:1的属性，也就是让他占据剩下的空间，达到自适应的目的。</p>\n<p>其实在这里使用的方式很简单，给父容器定义flex的盒模型，对于其里面的子元素，因为要求是虚线根据文字块的宽度动态自适应布局，因此，这里的文字块div无需给出相关flex属性，而在虚线块上面添加flex:1，是因为flex:1其实是设置flex:1的子元素平均分配父元素的所有空间，（不包括没设置flex属性的子元素，没设置flex的子元素，默认是flex-grow:0不参与弹性计算）,那其实意思就是，案例里，在父元素容器中，虚线占据了除去文字以外的剩余空间，那么无论文字有多少，虚线都会根据文字的长度，自适应的占据剩余空间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实flex现在真的是基本算是可以随意使用了，至少我是在移动端页面可以毫无顾忌的使用，在pc端，只要不考虑兼容鬼畜的IE，基本按照兼容模式写写，都是能够OK的，毕竟flex实在太强大，很多以前要用奇技淫巧才能完成的样式，flex简单几句就能够强大的完成。</p>\n<p>很多时候，重要的不仅仅是问题解决的结果，更重要的是解决问题的思路，以及总结。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在项目里遇到了一个问题，如图:</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/1.png?raw=true\"></p>\n<h2 id=\"结构和样式代码\"><a href=\"#结构和样式代码\" class=\"headerlink\" title=\"结构和样式代码\"></a>结构和样式代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clearfix luggage-type-w&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 文字块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl ell luggage-type luggage-type-tools&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 虚线块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;rel link-line lt-link-line&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fl</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.rel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: dashed <span class=\"number\">2px</span> <span class=\"number\">#dcdcdc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.lt-link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">12px</span> <span class=\"number\">0</span> <span class=\"number\">70px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>其实问题很明显，左边的文字不定宽，已经浮动脱离文档流，但是右边的虚线，是相对自己定位，往下移动，底部虚线边框，但是布局是写死的，由样式表文件能看出来，margin属性是定死的，这样就导致，当文字超过目前的两个字时，会被虚线直接穿过，这样就导致了布局的错乱，而需求是要文字不能定死的，自适应。因此需要作出调整。</p>\n<h2 id=\"处理方式1\"><a href=\"#处理方式1\" class=\"headerlink\" title=\"处理方式1\"></a>处理方式1</h2><p>前端同事是这么做的，不就是文字没定宽，导致了虚线穿透么，那很好办啊，直接加上文字截断就好了，定个最大宽度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ell</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">65px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/2.png?raw=true\">  </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>其实能看出来，定宽截断的效果确实能够阻挡虚线穿透，但是，显得太过生硬，一方面，截断掉文字，对用户体验非常不友好，毕竟截断的应用场景，仅仅是超出当前文本行的处理，在这里，显得太不适合。另一方面，给个定宽，如果没有达到宽度怎么办，那就像上图一样，右边会留出空白，我想，作为一个合格的前端工程师，是不会容忍这样的瑕疵出现的，因此，问题还是没有解决，毕竟没有通过PM的眼睛啊，于是我尝试着给出了自己的处理方式：</p>\n<h2 id=\"处理方式2\"><a href=\"#处理方式2\" class=\"headerlink\" title=\"处理方式2\"></a>处理方式2</h2><p>其实简单分析下，这样的需求，从布局上面，就算是伸缩自适应的弹性布局，那么对于这么一个外部容器来说，其内部就是弹性的，那么可以考虑使用flex进行处理(项目无需兼容ie9及以下的浏览器，因此是可以兼容使用flex的)</p>\n<p>先给出我的样式代码吧：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.luggage-type-w</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.luggage-type-tools</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* max-width: 65px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../img/detail/yp-icon.png&quot;</span>) left center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f98d4b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.lt-link-line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* margin: 0 12px 0 90px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果图如下：   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181023/3.png?raw=true\">  </p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><p>flex有个属性，就是容器内部元素flex:1，其实是下面这种写法的缩写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个1代表flex-grow，是指子元素占据的父元素空间，默认值为0，所有子元素的flex-grow数值加在一起，父元素剩下的空间按照比例分配，第二个1是flex-shrink，用来定义伸缩项目收缩的能力，默认值是1,0的时候不改变，第三个就是flex-basis,通俗点，就是该元素占据的宽度,默认值为auto。  </p>\n<p>实际上，不加上flex属性，其实flex的属性就是默认的 0 1 auto，因此，当子元素没有flex属性的时候，flex-grow为0，不参与弹性计算。那给虚线块加上flex-grow:1的属性，也就是让他占据剩下的空间，达到自适应的目的。</p>\n<p>其实在这里使用的方式很简单，给父容器定义flex的盒模型，对于其里面的子元素，因为要求是虚线根据文字块的宽度动态自适应布局，因此，这里的文字块div无需给出相关flex属性，而在虚线块上面添加flex:1，是因为flex:1其实是设置flex:1的子元素平均分配父元素的所有空间，（不包括没设置flex属性的子元素，没设置flex的子元素，默认是flex-grow:0不参与弹性计算）,那其实意思就是，案例里，在父元素容器中，虚线占据了除去文字以外的剩余空间，那么无论文字有多少，虚线都会根据文字的长度，自适应的占据剩余空间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实flex现在真的是基本算是可以随意使用了，至少我是在移动端页面可以毫无顾忌的使用，在pc端，只要不考虑兼容鬼畜的IE，基本按照兼容模式写写，都是能够OK的，毕竟flex实在太强大，很多以前要用奇技淫巧才能完成的样式，flex简单几句就能够强大的完成。</p>\n<p>很多时候，重要的不仅仅是问题解决的结果，更重要的是解决问题的思路，以及总结。</p>\n"},{"title":"flex布局","date":"2018-05-29T13:48:03.000Z","_content":"\n## 容器属性\n\n* flex-direction\n* flex-wrap \n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n\n\n### flex-direction \n决定主轴的方向，即项目的排列方向  \n* row(默认值)：主轴为水平方向，起点在左端 。 \n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上端。\n* column-reverse：主轴为垂直方向，起点在下端。\n\n\n### flex-wrap\n定义子元素的换行方式  \n* nowrap(默认)：不换行。\n* wrap：换行，新的一行在之前一行的下方。\n* wrap-reverse：换行，新的一行在之前一行的上方。\n\n### flex-flow\nflex-direction和flex-wrap的简写形式 默认值为 row nowrap\n\n### justify-content\n定义了项目在主轴上的对齐方式。\n* flex-start(默认值)；左对齐\n* flex-end：右对齐\n* center：居中\n* space-between：两端对齐，项目之间间隔相等。\n* space-around：每个项目两侧的间隔相等，项目之间的间隔比项目边框的间隔大一倍。\n\n### align-items\n定义项目在交叉轴（即与主轴垂直的轴）上如何对齐\n* flex-start：交叉轴的起点对齐\n* flex-end：交叉轴的终点对齐\n* center：交叉轴的中点对齐\n* baseline：项目的第一行文字的基线对齐\n* stretch（默认值）：如果未设置高度或者高度为auto，将占满整个容器的高度。\n\n### align-content\n定义了多根轴线的对齐方式，如果项目只有一根轴线，则该属性不起作用\n\n* flex-start：与交叉轴的起点对齐。\n* flex-end：与交叉轴的终点对齐。\n* center：与交叉轴的中点对齐。\n* space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n* space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n* stretch（默认值）：轴线占满整个交叉轴。\n\n## 项目的属性\n\n* order\n* flex-grow\n* flex-shrink\n* flex-basis\n* flex\n* align-self\n\n### order\n定义项目的排列顺序，数值越小，排列越靠前，默认为0\n\n### flex-grow\n定义项目的放大比例，默认为0\n\n### flex-shrink\n定义了项目的缩小比例，默认为1\n\n### flex-basis\n定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否还有多余空间，默认值为auto，即项目本来的大小。可以设置跟width 和height一样的值，项目占据固定空间\n\n### flex\n是flex-grow flex-shrink flex-basis的简写  默认为0 1 auto  建议优先使用\n\n### align-self\n允许单个项目有与其他项目不一样的对齐方式，可以覆盖容器的align-items属性，默认值为auto，表示继承父元素的align-item属性，如果没有父元素，则等同于stretch\n\n\n","source":"_posts/flex布局.md","raw":"---\ntitle: flex布局\ndate: 2018-05-29 21:48:03\ntags: \n  - css\n  - flex\ncategories: \n  - css\n---\n\n## 容器属性\n\n* flex-direction\n* flex-wrap \n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n\n\n### flex-direction \n决定主轴的方向，即项目的排列方向  \n* row(默认值)：主轴为水平方向，起点在左端 。 \n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上端。\n* column-reverse：主轴为垂直方向，起点在下端。\n\n\n### flex-wrap\n定义子元素的换行方式  \n* nowrap(默认)：不换行。\n* wrap：换行，新的一行在之前一行的下方。\n* wrap-reverse：换行，新的一行在之前一行的上方。\n\n### flex-flow\nflex-direction和flex-wrap的简写形式 默认值为 row nowrap\n\n### justify-content\n定义了项目在主轴上的对齐方式。\n* flex-start(默认值)；左对齐\n* flex-end：右对齐\n* center：居中\n* space-between：两端对齐，项目之间间隔相等。\n* space-around：每个项目两侧的间隔相等，项目之间的间隔比项目边框的间隔大一倍。\n\n### align-items\n定义项目在交叉轴（即与主轴垂直的轴）上如何对齐\n* flex-start：交叉轴的起点对齐\n* flex-end：交叉轴的终点对齐\n* center：交叉轴的中点对齐\n* baseline：项目的第一行文字的基线对齐\n* stretch（默认值）：如果未设置高度或者高度为auto，将占满整个容器的高度。\n\n### align-content\n定义了多根轴线的对齐方式，如果项目只有一根轴线，则该属性不起作用\n\n* flex-start：与交叉轴的起点对齐。\n* flex-end：与交叉轴的终点对齐。\n* center：与交叉轴的中点对齐。\n* space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n* space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n* stretch（默认值）：轴线占满整个交叉轴。\n\n## 项目的属性\n\n* order\n* flex-grow\n* flex-shrink\n* flex-basis\n* flex\n* align-self\n\n### order\n定义项目的排列顺序，数值越小，排列越靠前，默认为0\n\n### flex-grow\n定义项目的放大比例，默认为0\n\n### flex-shrink\n定义了项目的缩小比例，默认为1\n\n### flex-basis\n定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否还有多余空间，默认值为auto，即项目本来的大小。可以设置跟width 和height一样的值，项目占据固定空间\n\n### flex\n是flex-grow flex-shrink flex-basis的简写  默认为0 1 auto  建议优先使用\n\n### align-self\n允许单个项目有与其他项目不一样的对齐方式，可以覆盖容器的align-items属性，默认值为auto，表示继承父元素的align-item属性，如果没有父元素，则等同于stretch\n\n\n","slug":"flex布局","published":1,"updated":"2018-06-01T01:17:25.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlm000rmsvi7khv6qyj","content":"<h2 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h2><ul>\n<li>flex-direction</li>\n<li>flex-wrap </li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>决定主轴的方向，即项目的排列方向  </p>\n<ul>\n<li>row(默认值)：主轴为水平方向，起点在左端 。 </li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上端。</li>\n<li>column-reverse：主轴为垂直方向，起点在下端。</li>\n</ul>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p>定义子元素的换行方式  </p>\n<ul>\n<li>nowrap(默认)：不换行。</li>\n<li>wrap：换行，新的一行在之前一行的下方。</li>\n<li>wrap-reverse：换行，新的一行在之前一行的上方。</li>\n</ul>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p>flex-direction和flex-wrap的简写形式 默认值为 row nowrap</p>\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><p>定义了项目在主轴上的对齐方式。</p>\n<ul>\n<li>flex-start(默认值)；左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center：居中</li>\n<li>space-between：两端对齐，项目之间间隔相等。</li>\n<li>space-around：每个项目两侧的间隔相等，项目之间的间隔比项目边框的间隔大一倍。</li>\n</ul>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h3><p>定义项目在交叉轴（即与主轴垂直的轴）上如何对齐</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐</li>\n<li>flex-end：交叉轴的终点对齐</li>\n<li>center：交叉轴的中点对齐</li>\n<li>baseline：项目的第一行文字的基线对齐</li>\n<li>stretch（默认值）：如果未设置高度或者高度为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>定义了多根轴线的对齐方式，如果项目只有一根轴线，则该属性不起作用</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>定义项目的排列顺序，数值越小，排列越靠前，默认为0</p>\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><p>定义项目的放大比例，默认为0</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><p>定义了项目的缩小比例，默认为1</p>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h3><p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否还有多余空间，默认值为auto，即项目本来的大小。可以设置跟width 和height一样的值，项目占据固定空间</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p>是flex-grow flex-shrink flex-basis的简写  默认为0 1 auto  建议优先使用</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>允许单个项目有与其他项目不一样的对齐方式，可以覆盖容器的align-items属性，默认值为auto，表示继承父元素的align-item属性，如果没有父元素，则等同于stretch</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h2><ul>\n<li>flex-direction</li>\n<li>flex-wrap </li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>决定主轴的方向，即项目的排列方向  </p>\n<ul>\n<li>row(默认值)：主轴为水平方向，起点在左端 。 </li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上端。</li>\n<li>column-reverse：主轴为垂直方向，起点在下端。</li>\n</ul>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p>定义子元素的换行方式  </p>\n<ul>\n<li>nowrap(默认)：不换行。</li>\n<li>wrap：换行，新的一行在之前一行的下方。</li>\n<li>wrap-reverse：换行，新的一行在之前一行的上方。</li>\n</ul>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p>flex-direction和flex-wrap的简写形式 默认值为 row nowrap</p>\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><p>定义了项目在主轴上的对齐方式。</p>\n<ul>\n<li>flex-start(默认值)；左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center：居中</li>\n<li>space-between：两端对齐，项目之间间隔相等。</li>\n<li>space-around：每个项目两侧的间隔相等，项目之间的间隔比项目边框的间隔大一倍。</li>\n</ul>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h3><p>定义项目在交叉轴（即与主轴垂直的轴）上如何对齐</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐</li>\n<li>flex-end：交叉轴的终点对齐</li>\n<li>center：交叉轴的中点对齐</li>\n<li>baseline：项目的第一行文字的基线对齐</li>\n<li>stretch（默认值）：如果未设置高度或者高度为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>定义了多根轴线的对齐方式，如果项目只有一根轴线，则该属性不起作用</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>定义项目的排列顺序，数值越小，排列越靠前，默认为0</p>\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><p>定义项目的放大比例，默认为0</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><p>定义了项目的缩小比例，默认为1</p>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h3><p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否还有多余空间，默认值为auto，即项目本来的大小。可以设置跟width 和height一样的值，项目占据固定空间</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p>是flex-grow flex-shrink flex-basis的简写  默认为0 1 auto  建议优先使用</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>允许单个项目有与其他项目不一样的对齐方式，可以覆盖容器的align-items属性，默认值为auto，表示继承父元素的align-item属性，如果没有父元素，则等同于stretch</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-09T01:25:45.798Z","updated":"2021-01-09T01:25:45.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxln000vmsvi1soo7c9a","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"h5中data-*属性的使用介绍","date":"2020-01-06T14:58:03.000Z","_content":"\n\n> 在HTML5中，添加了data-*的方式来自定义属性，所谓data-*实际上就是data-前缀加上自定义的属性名，命名可以使用驼峰格式，但是取值必须要是全部小写（后面会说到原因，如果非要使用驼峰去获取，该怎么去写），使用这样的结构可以进行数据存放，下面来说一下，它的基本的使用方式：\n\n1. html绑定的写法\n    1. 简单单词：\n        ```html\n            <div id=\"testDiv\" data-cd=\"24\">\n                Click Here\n            </div>\n        ```\n    2. 使用驼峰命名（这里需要特别注意的地方）:\n        ```html\n            <div id=\"testDiv\" data-cartCd=\"24\">\n                Click Here\n            </div>\n        ```\n\n> 我们可以看到，上面的两种绑定方式，第一种是小写字母，第二种是驼峰式，那么这两种在取值的时候，又有何区别呢？\n\n2. 取绑定的值的方法\n    1. 原生js的取法：\n        ```js\n            //原生的dom对象上，有个dataset对象，里面包含了以data-为前缀的所有自定义属性的键值\n            \n            var testDiv = document.getElementById('testDiv');\n            console.log(testDiv.dataset.cd); //'24'  简单的单词取法\n            console.log(testDiv.dataset.cartcd)  //'24' 这里要注意，大写的'C'需要写成小写才能获取到，否则就是undefined\n        ```\n    2. jq的取法\n        ```js\n            //jq在原生的基础上，做了一层封装，我们可以通过jq封装的dom对象来获取，jq封装的dom对象上，暴露了一个data()的方法，参数就是我们自定义的属性值，即 data-后面的字段名\n            console.log($(\"#testDiv\").data(\"cd\"));//'24'\n            console.log($(\"testDiv\").data(\"cartcd\"));//'24' 这里痛原生取法一样\n        ```\n3. 修改绑定的数据\n    1. 原生js方式\n        ```js\n            //直接赋值\n            testDiv.dataset.cartcd = '新值'\n        ```\n    2. jq的方式\n        ```js\n            //data()方法的第二个参数，为新值\n            $(“testDiv”).data(“cartcd”,”新值”)\n        ```\n    \n> 上面基本介绍了这个自定义属性的用法，其实这个应用场景还蛮多的，比方说：\n\n* 我们渲染列表，点击列表，可以跳转对应项目的详情，实际上我们可以通过渲染的时候，把id之类的值通过data-id绑定到模板标签上，再通过js去获取该属性，再去做相应的跳转逻辑。\n* 以前我们绑定一些数据的时候，通常都会使用隐藏的输入框去做。有了data-*，我们再也不用通过一个hidden的input的value去绑定数据，减少了页面的元素数量，简化dom结构，提升渲染性能.\n\n> 其实说白了就一点，配合js做更好地数据交互。\n\n> 当然，在前端框架比如vue，react里我们很少会用到，因为它们拥有属于自己的一套数据流控制，比如，props这样的一个东西，它能够完成的功能和发挥的作用，远远比data-*要强大的多，但实际上，在一些小场景，甚至是一两个页面中，还是不建议引入一个框架的，基本上，js原生就可以满足大多数的需求。\n\n\n> 另外，可能有些同学，会比较在意，我先前说到的，如果非要通过驼峰去取值，那怎么才能取到，而不是undefined呢？\n\n> 在这里啊，要跟大家说一个小知识，就是我们一般写data-的时候，常用都是data-xxx，一般都是这种形式，而这种形式呢，我们在xxx的占位里无论写大写还是小写，取值的时候，这部分就必须按照全部小写的规则去取。那么，肯定还有另外一种规则，是的，还有一种规则，我们可以写出data-xx-xx的形式，那么看到这里，我想聪明的你已经明白了：\n\n> woc，这种方式有些熟悉啊，习惯了使用vue框架来开发的你，肯定喜欢自定义组件吧，那么在Vue的自定义组件名称中，命名和引用，是要经过一层转换的：\n\n```vue\n\n<test-component></test-component>\n\nimport testComponent form './components/test-component'\n\nexport default {\n    components:{\n        testComponent\n    }\n}\n\n```\n> 连字符转驼峰，其实就是匹配 - 字符之后的第一个字母，将其转换成大写：\n\n```js\n    let str = 'str-arr-test';\n    str = str.split('-').reduce((acc, val, idx) => idx === 0 ?\n        acc + val : acc + val[0].toLocaleUpperCase() + val.slice(1), '');\n    console.log(str)\n```\n\n> 驼峰转连字符，可以使用正则匹配的方式，匹配出所有大写字母的位置，替换成-小写的形式：\n\n```js\n\n    let str = 'strArrTest';\n    str = str.replace(/([A-Z])/g, function ($1) {\n        return '-' + $1.toLocaleLowerCase();\n    });\n    console.log(str);\n```\n\n> 那么，话说回来，如果我们必须要用驼峰的方式，去获取data-*的属性值，那么我们就需要在设值的时候，通过连字符短划线-的方式去命名，比如：\n\n```html\n<div id='testDiv' data-card-cd='24'>\n```\n\n```js\nvar testDiv = document.getElementById('testDiv')\nconsole.log(testDiv.dataset.cartCd);  //'24'\n```\n\n> 我们可以在网页上面证实一下结果：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200106/1.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200106/2.png?raw=true)\n    \n    \n> 由上图我们可以看出来，我们在元素上绑定了data-id-id的属性，顺利的通过dataset.idId的方式，获取到了属性值。简直就是强迫症患者的福音（手动狗头）\n\n\n\n","source":"_posts/h5中data-属性的使用介绍.md","raw":"---\ntitle: h5中data-*属性的使用介绍\ndate: 2020-01-06 22:58:03\ntags:\n  - html\n  - data-\n  - jq\ncategories:\n  - html\n  - data-\n  - jq\n---\n\n\n> 在HTML5中，添加了data-*的方式来自定义属性，所谓data-*实际上就是data-前缀加上自定义的属性名，命名可以使用驼峰格式，但是取值必须要是全部小写（后面会说到原因，如果非要使用驼峰去获取，该怎么去写），使用这样的结构可以进行数据存放，下面来说一下，它的基本的使用方式：\n\n1. html绑定的写法\n    1. 简单单词：\n        ```html\n            <div id=\"testDiv\" data-cd=\"24\">\n                Click Here\n            </div>\n        ```\n    2. 使用驼峰命名（这里需要特别注意的地方）:\n        ```html\n            <div id=\"testDiv\" data-cartCd=\"24\">\n                Click Here\n            </div>\n        ```\n\n> 我们可以看到，上面的两种绑定方式，第一种是小写字母，第二种是驼峰式，那么这两种在取值的时候，又有何区别呢？\n\n2. 取绑定的值的方法\n    1. 原生js的取法：\n        ```js\n            //原生的dom对象上，有个dataset对象，里面包含了以data-为前缀的所有自定义属性的键值\n            \n            var testDiv = document.getElementById('testDiv');\n            console.log(testDiv.dataset.cd); //'24'  简单的单词取法\n            console.log(testDiv.dataset.cartcd)  //'24' 这里要注意，大写的'C'需要写成小写才能获取到，否则就是undefined\n        ```\n    2. jq的取法\n        ```js\n            //jq在原生的基础上，做了一层封装，我们可以通过jq封装的dom对象来获取，jq封装的dom对象上，暴露了一个data()的方法，参数就是我们自定义的属性值，即 data-后面的字段名\n            console.log($(\"#testDiv\").data(\"cd\"));//'24'\n            console.log($(\"testDiv\").data(\"cartcd\"));//'24' 这里痛原生取法一样\n        ```\n3. 修改绑定的数据\n    1. 原生js方式\n        ```js\n            //直接赋值\n            testDiv.dataset.cartcd = '新值'\n        ```\n    2. jq的方式\n        ```js\n            //data()方法的第二个参数，为新值\n            $(“testDiv”).data(“cartcd”,”新值”)\n        ```\n    \n> 上面基本介绍了这个自定义属性的用法，其实这个应用场景还蛮多的，比方说：\n\n* 我们渲染列表，点击列表，可以跳转对应项目的详情，实际上我们可以通过渲染的时候，把id之类的值通过data-id绑定到模板标签上，再通过js去获取该属性，再去做相应的跳转逻辑。\n* 以前我们绑定一些数据的时候，通常都会使用隐藏的输入框去做。有了data-*，我们再也不用通过一个hidden的input的value去绑定数据，减少了页面的元素数量，简化dom结构，提升渲染性能.\n\n> 其实说白了就一点，配合js做更好地数据交互。\n\n> 当然，在前端框架比如vue，react里我们很少会用到，因为它们拥有属于自己的一套数据流控制，比如，props这样的一个东西，它能够完成的功能和发挥的作用，远远比data-*要强大的多，但实际上，在一些小场景，甚至是一两个页面中，还是不建议引入一个框架的，基本上，js原生就可以满足大多数的需求。\n\n\n> 另外，可能有些同学，会比较在意，我先前说到的，如果非要通过驼峰去取值，那怎么才能取到，而不是undefined呢？\n\n> 在这里啊，要跟大家说一个小知识，就是我们一般写data-的时候，常用都是data-xxx，一般都是这种形式，而这种形式呢，我们在xxx的占位里无论写大写还是小写，取值的时候，这部分就必须按照全部小写的规则去取。那么，肯定还有另外一种规则，是的，还有一种规则，我们可以写出data-xx-xx的形式，那么看到这里，我想聪明的你已经明白了：\n\n> woc，这种方式有些熟悉啊，习惯了使用vue框架来开发的你，肯定喜欢自定义组件吧，那么在Vue的自定义组件名称中，命名和引用，是要经过一层转换的：\n\n```vue\n\n<test-component></test-component>\n\nimport testComponent form './components/test-component'\n\nexport default {\n    components:{\n        testComponent\n    }\n}\n\n```\n> 连字符转驼峰，其实就是匹配 - 字符之后的第一个字母，将其转换成大写：\n\n```js\n    let str = 'str-arr-test';\n    str = str.split('-').reduce((acc, val, idx) => idx === 0 ?\n        acc + val : acc + val[0].toLocaleUpperCase() + val.slice(1), '');\n    console.log(str)\n```\n\n> 驼峰转连字符，可以使用正则匹配的方式，匹配出所有大写字母的位置，替换成-小写的形式：\n\n```js\n\n    let str = 'strArrTest';\n    str = str.replace(/([A-Z])/g, function ($1) {\n        return '-' + $1.toLocaleLowerCase();\n    });\n    console.log(str);\n```\n\n> 那么，话说回来，如果我们必须要用驼峰的方式，去获取data-*的属性值，那么我们就需要在设值的时候，通过连字符短划线-的方式去命名，比如：\n\n```html\n<div id='testDiv' data-card-cd='24'>\n```\n\n```js\nvar testDiv = document.getElementById('testDiv')\nconsole.log(testDiv.dataset.cartCd);  //'24'\n```\n\n> 我们可以在网页上面证实一下结果：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200106/1.png?raw=true)\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200106/2.png?raw=true)\n    \n    \n> 由上图我们可以看出来，我们在元素上绑定了data-id-id的属性，顺利的通过dataset.idId的方式，获取到了属性值。简直就是强迫症患者的福音（手动狗头）\n\n\n\n","slug":"h5中data-属性的使用介绍","published":1,"updated":"2020-01-06T14:59:24.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlo000xmsvigzp2bd79","content":"<blockquote>\n<p>在HTML5中，添加了data-*的方式来自定义属性，所谓data-*实际上就是data-前缀加上自定义的属性名，命名可以使用驼峰格式，但是取值必须要是全部小写（后面会说到原因，如果非要使用驼峰去获取，该怎么去写），使用这样的结构可以进行数据存放，下面来说一下，它的基本的使用方式：</p>\n</blockquote>\n<ol>\n<li><p>html绑定的写法</p>\n<ol>\n<li>简单单词： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testDiv&quot;</span> <span class=\"attr\">data-cd</span>=<span class=\"string\">&quot;24&quot;</span>&gt;</span></span><br><span class=\"line\">    Click Here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用驼峰命名（这里需要特别注意的地方）: <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testDiv&quot;</span> <span class=\"attr\">data-cartCd</span>=<span class=\"string\">&quot;24&quot;</span>&gt;</span></span><br><span class=\"line\">    Click Here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看到，上面的两种绑定方式，第一种是小写字母，第二种是驼峰式，那么这两种在取值的时候，又有何区别呢？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>取绑定的值的方法</p>\n<ol>\n<li>原生js的取法： <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生的dom对象上，有个dataset对象，里面包含了以data-为前缀的所有自定义属性的键值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;testDiv&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cd); <span class=\"comment\">//&#x27;24&#x27;  简单的单词取法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cartcd)  <span class=\"comment\">//&#x27;24&#x27; 这里要注意，大写的&#x27;C&#x27;需要写成小写才能获取到，否则就是undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>jq的取法 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jq在原生的基础上，做了一层封装，我们可以通过jq封装的dom对象来获取，jq封装的dom对象上，暴露了一个data()的方法，参数就是我们自定义的属性值，即 data-后面的字段名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;#testDiv&quot;</span>).data(<span class=\"string\">&quot;cd&quot;</span>));<span class=\"comment\">//&#x27;24&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;testDiv&quot;</span>).data(<span class=\"string\">&quot;cartcd&quot;</span>));<span class=\"comment\">//&#x27;24&#x27; 这里痛原生取法一样</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>修改绑定的数据</p>\n<ol>\n<li>原生js方式 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接赋值</span></span><br><span class=\"line\">testDiv.dataset.cartcd = <span class=\"string\">&#x27;新值&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>jq的方式 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//data()方法的第二个参数，为新值</span></span><br><span class=\"line\">$(“testDiv”).data(“cartcd”,”新值”)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>上面基本介绍了这个自定义属性的用法，其实这个应用场景还蛮多的，比方说：</p>\n</blockquote>\n<ul>\n<li>我们渲染列表，点击列表，可以跳转对应项目的详情，实际上我们可以通过渲染的时候，把id之类的值通过data-id绑定到模板标签上，再通过js去获取该属性，再去做相应的跳转逻辑。</li>\n<li>以前我们绑定一些数据的时候，通常都会使用隐藏的输入框去做。有了data-*，我们再也不用通过一个hidden的input的value去绑定数据，减少了页面的元素数量，简化dom结构，提升渲染性能.</li>\n</ul>\n<blockquote>\n<p>其实说白了就一点，配合js做更好地数据交互。</p>\n</blockquote>\n<blockquote>\n<p>当然，在前端框架比如vue，react里我们很少会用到，因为它们拥有属于自己的一套数据流控制，比如，props这样的一个东西，它能够完成的功能和发挥的作用，远远比data-*要强大的多，但实际上，在一些小场景，甚至是一两个页面中，还是不建议引入一个框架的，基本上，js原生就可以满足大多数的需求。</p>\n</blockquote>\n<blockquote>\n<p>另外，可能有些同学，会比较在意，我先前说到的，如果非要通过驼峰去取值，那怎么才能取到，而不是undefined呢？</p>\n</blockquote>\n<blockquote>\n<p>在这里啊，要跟大家说一个小知识，就是我们一般写data-的时候，常用都是data-xxx，一般都是这种形式，而这种形式呢，我们在xxx的占位里无论写大写还是小写，取值的时候，这部分就必须按照全部小写的规则去取。那么，肯定还有另外一种规则，是的，还有一种规则，我们可以写出data-xx-xx的形式，那么看到这里，我想聪明的你已经明白了：</p>\n</blockquote>\n<blockquote>\n<p>woc，这种方式有些熟悉啊，习惯了使用vue框架来开发的你，肯定喜欢自定义组件吧，那么在Vue的自定义组件名称中，命名和引用，是要经过一层转换的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;test-component&gt;&lt;&#x2F;test-component&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import testComponent form &#39;.&#x2F;components&#x2F;test-component&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        testComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>连字符转驼峰，其实就是匹配 - 字符之后的第一个字母，将其转换成大写：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;str-arr-test&#x27;</span>;</span><br><span class=\"line\">str = str.split(<span class=\"string\">&#x27;-&#x27;</span>).reduce(<span class=\"function\">(<span class=\"params\">acc, val, idx</span>) =&gt;</span> idx === <span class=\"number\">0</span> ?</span><br><span class=\"line\">    acc + val : acc + val[<span class=\"number\">0</span>].toLocaleUpperCase() + val.slice(<span class=\"number\">1</span>), <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>驼峰转连字符，可以使用正则匹配的方式，匹配出所有大写字母的位置，替换成-小写的形式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;strArrTest&#x27;</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/([A-Z])/g</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;-&#x27;</span> + $<span class=\"number\">1.</span>toLocaleLowerCase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么，话说回来，如果我们必须要用驼峰的方式，去获取data-*的属性值，那么我们就需要在设值的时候，通过连字符短划线-的方式去命名，比如：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;testDiv&#x27;</span> <span class=\"attr\">data-card-cd</span>=<span class=\"string\">&#x27;24&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;testDiv&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cartCd);  <span class=\"comment\">//&#x27;24&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以在网页上面证实一下结果：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200106/1.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200106/2.png?raw=true\"></p>\n<blockquote>\n<p>由上图我们可以看出来，我们在元素上绑定了data-id-id的属性，顺利的通过dataset.idId的方式，获取到了属性值。简直就是强迫症患者的福音（手动狗头）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在HTML5中，添加了data-*的方式来自定义属性，所谓data-*实际上就是data-前缀加上自定义的属性名，命名可以使用驼峰格式，但是取值必须要是全部小写（后面会说到原因，如果非要使用驼峰去获取，该怎么去写），使用这样的结构可以进行数据存放，下面来说一下，它的基本的使用方式：</p>\n</blockquote>\n<ol>\n<li><p>html绑定的写法</p>\n<ol>\n<li>简单单词： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testDiv&quot;</span> <span class=\"attr\">data-cd</span>=<span class=\"string\">&quot;24&quot;</span>&gt;</span></span><br><span class=\"line\">    Click Here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用驼峰命名（这里需要特别注意的地方）: <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testDiv&quot;</span> <span class=\"attr\">data-cartCd</span>=<span class=\"string\">&quot;24&quot;</span>&gt;</span></span><br><span class=\"line\">    Click Here</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看到，上面的两种绑定方式，第一种是小写字母，第二种是驼峰式，那么这两种在取值的时候，又有何区别呢？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>取绑定的值的方法</p>\n<ol>\n<li>原生js的取法： <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生的dom对象上，有个dataset对象，里面包含了以data-为前缀的所有自定义属性的键值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;testDiv&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cd); <span class=\"comment\">//&#x27;24&#x27;  简单的单词取法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cartcd)  <span class=\"comment\">//&#x27;24&#x27; 这里要注意，大写的&#x27;C&#x27;需要写成小写才能获取到，否则就是undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>jq的取法 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jq在原生的基础上，做了一层封装，我们可以通过jq封装的dom对象来获取，jq封装的dom对象上，暴露了一个data()的方法，参数就是我们自定义的属性值，即 data-后面的字段名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;#testDiv&quot;</span>).data(<span class=\"string\">&quot;cd&quot;</span>));<span class=\"comment\">//&#x27;24&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;testDiv&quot;</span>).data(<span class=\"string\">&quot;cartcd&quot;</span>));<span class=\"comment\">//&#x27;24&#x27; 这里痛原生取法一样</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>修改绑定的数据</p>\n<ol>\n<li>原生js方式 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接赋值</span></span><br><span class=\"line\">testDiv.dataset.cartcd = <span class=\"string\">&#x27;新值&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>jq的方式 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//data()方法的第二个参数，为新值</span></span><br><span class=\"line\">$(“testDiv”).data(“cartcd”,”新值”)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>上面基本介绍了这个自定义属性的用法，其实这个应用场景还蛮多的，比方说：</p>\n</blockquote>\n<ul>\n<li>我们渲染列表，点击列表，可以跳转对应项目的详情，实际上我们可以通过渲染的时候，把id之类的值通过data-id绑定到模板标签上，再通过js去获取该属性，再去做相应的跳转逻辑。</li>\n<li>以前我们绑定一些数据的时候，通常都会使用隐藏的输入框去做。有了data-*，我们再也不用通过一个hidden的input的value去绑定数据，减少了页面的元素数量，简化dom结构，提升渲染性能.</li>\n</ul>\n<blockquote>\n<p>其实说白了就一点，配合js做更好地数据交互。</p>\n</blockquote>\n<blockquote>\n<p>当然，在前端框架比如vue，react里我们很少会用到，因为它们拥有属于自己的一套数据流控制，比如，props这样的一个东西，它能够完成的功能和发挥的作用，远远比data-*要强大的多，但实际上，在一些小场景，甚至是一两个页面中，还是不建议引入一个框架的，基本上，js原生就可以满足大多数的需求。</p>\n</blockquote>\n<blockquote>\n<p>另外，可能有些同学，会比较在意，我先前说到的，如果非要通过驼峰去取值，那怎么才能取到，而不是undefined呢？</p>\n</blockquote>\n<blockquote>\n<p>在这里啊，要跟大家说一个小知识，就是我们一般写data-的时候，常用都是data-xxx，一般都是这种形式，而这种形式呢，我们在xxx的占位里无论写大写还是小写，取值的时候，这部分就必须按照全部小写的规则去取。那么，肯定还有另外一种规则，是的，还有一种规则，我们可以写出data-xx-xx的形式，那么看到这里，我想聪明的你已经明白了：</p>\n</blockquote>\n<blockquote>\n<p>woc，这种方式有些熟悉啊，习惯了使用vue框架来开发的你，肯定喜欢自定义组件吧，那么在Vue的自定义组件名称中，命名和引用，是要经过一层转换的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;test-component&gt;&lt;&#x2F;test-component&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import testComponent form &#39;.&#x2F;components&#x2F;test-component&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        testComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>连字符转驼峰，其实就是匹配 - 字符之后的第一个字母，将其转换成大写：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;str-arr-test&#x27;</span>;</span><br><span class=\"line\">str = str.split(<span class=\"string\">&#x27;-&#x27;</span>).reduce(<span class=\"function\">(<span class=\"params\">acc, val, idx</span>) =&gt;</span> idx === <span class=\"number\">0</span> ?</span><br><span class=\"line\">    acc + val : acc + val[<span class=\"number\">0</span>].toLocaleUpperCase() + val.slice(<span class=\"number\">1</span>), <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>驼峰转连字符，可以使用正则匹配的方式，匹配出所有大写字母的位置，替换成-小写的形式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;strArrTest&#x27;</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/([A-Z])/g</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;-&#x27;</span> + $<span class=\"number\">1.</span>toLocaleLowerCase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么，话说回来，如果我们必须要用驼峰的方式，去获取data-*的属性值，那么我们就需要在设值的时候，通过连字符短划线-的方式去命名，比如：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;testDiv&#x27;</span> <span class=\"attr\">data-card-cd</span>=<span class=\"string\">&#x27;24&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;testDiv&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testDiv.dataset.cartCd);  <span class=\"comment\">//&#x27;24&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以在网页上面证实一下结果：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200106/1.png?raw=true\"></p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200106/2.png?raw=true\"></p>\n<blockquote>\n<p>由上图我们可以看出来，我们在元素上绑定了data-id-id的属性，顺利的通过dataset.idId的方式，获取到了属性值。简直就是强迫症患者的福音（手动狗头）</p>\n</blockquote>\n"},{"title":"img 标签 访问图片 返回403 forbidden问题","date":"2018-03-06T02:00:11.000Z","_content":"之前在项目里，本地调试的时候，图片src引用了第三方网站的图片资源，导致控制台出现了如下的报错：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180306/1.png?raw=true)\n\n403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的百度，找到了相关的解决方法，并去实际尝试：\n\n其实呢，解决这个问题只需要在头部添加一个meta   \n```html\n<meta name=\"referrer\" content=\"no-referrer\" />\n```\n关于meta referrer，有如下可设置的值：  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180306/2.png?raw=true)\n\n经过实际测试，该方法确实有效，能够解决这个问题。","source":"_posts/img-标签-访问图片-返回403-forbidden问题.md","raw":"---\ntitle: img 标签 访问图片 返回403 forbidden问题\ndate: 2018-03-06 10:00:11\ntags:\n  - 静态资源\ncategories:\n  - img\n---\n之前在项目里，本地调试的时候，图片src引用了第三方网站的图片资源，导致控制台出现了如下的报错：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180306/1.png?raw=true)\n\n403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的百度，找到了相关的解决方法，并去实际尝试：\n\n其实呢，解决这个问题只需要在头部添加一个meta   \n```html\n<meta name=\"referrer\" content=\"no-referrer\" />\n```\n关于meta referrer，有如下可设置的值：  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180306/2.png?raw=true)\n\n经过实际测试，该方法确实有效，能够解决这个问题。","slug":"img-标签-访问图片-返回403-forbidden问题","published":1,"updated":"2018-06-01T02:06:22.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlq0010msvi69oi5t7p","content":"<p>之前在项目里，本地调试的时候，图片src引用了第三方网站的图片资源，导致控制台出现了如下的报错：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180306/1.png?raw=true\"></p>\n<p>403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的百度，找到了相关的解决方法，并去实际尝试：</p>\n<p>其实呢，解决这个问题只需要在头部添加一个meta   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;referrer&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关于meta referrer，有如下可设置的值：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180306/2.png?raw=true\"></p>\n<p>经过实际测试，该方法确实有效，能够解决这个问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在项目里，本地调试的时候，图片src引用了第三方网站的图片资源，导致控制台出现了如下的报错：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180306/1.png?raw=true\"></p>\n<p>403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的百度，找到了相关的解决方法，并去实际尝试：</p>\n<p>其实呢，解决这个问题只需要在头部添加一个meta   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;referrer&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关于meta referrer，有如下可设置的值：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180306/2.png?raw=true\"></p>\n<p>经过实际测试，该方法确实有效，能够解决这个问题。</p>\n"},{"title":"ios移动端部分手机不支持background-attachment: fixed 的解决办法","date":"2018-04-30T03:08:52.000Z","_content":"\n之前在做的微信端相关页面开发的时候，在一些必要的需求场景下，ios系统和某些移动端background-attachment:fixed不兼容性，并不能够达到背景图不随滚动条而滚动的效果，随后在网上查找了相关的解决方案，经过实际测试，下面的hack是管用的，也就是在设置背景图的元素上面，加一个伪元素的样式表，如下：\n\n```css\n  (背景图所在的元素):before {\n  content: ' ';\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: url(path/to/image) center 0 no-repeat;\n  background-size: cover;\n}\n```\n\n亲测有效，遇到相关问题的童鞋，可以尝试一下这种解决方案。巧妙又方便。","source":"_posts/ios移动端部分手机不支持background-attachment-fixed-的解决办法.md","raw":"---\ntitle: 'ios移动端部分手机不支持background-attachment: fixed 的解决办法'\ndate: 2018-04-30 11:08:52\ntags:\n  - 移动端页面\n  - css3\ncategories:\n  - css\n---\n\n之前在做的微信端相关页面开发的时候，在一些必要的需求场景下，ios系统和某些移动端background-attachment:fixed不兼容性，并不能够达到背景图不随滚动条而滚动的效果，随后在网上查找了相关的解决方案，经过实际测试，下面的hack是管用的，也就是在设置背景图的元素上面，加一个伪元素的样式表，如下：\n\n```css\n  (背景图所在的元素):before {\n  content: ' ';\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: url(path/to/image) center 0 no-repeat;\n  background-size: cover;\n}\n```\n\n亲测有效，遇到相关问题的童鞋，可以尝试一下这种解决方案。巧妙又方便。","slug":"ios移动端部分手机不支持background-attachment-fixed-的解决办法","published":1,"updated":"2018-06-01T01:15:43.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlr0012msvi5k2ba17a","content":"<p>之前在做的微信端相关页面开发的时候，在一些必要的需求场景下，ios系统和某些移动端background-attachment:fixed不兼容性，并不能够达到背景图不随滚动条而滚动的效果，随后在网上查找了相关的解决方案，经过实际测试，下面的hack是管用的，也就是在设置背景图的元素上面，加一个伪元素的样式表，如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (背景图所在的元素)<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(path/to/image) center <span class=\"number\">0</span> no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>亲测有效，遇到相关问题的童鞋，可以尝试一下这种解决方案。巧妙又方便。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在做的微信端相关页面开发的时候，在一些必要的需求场景下，ios系统和某些移动端background-attachment:fixed不兼容性，并不能够达到背景图不随滚动条而滚动的效果，随后在网上查找了相关的解决方案，经过实际测试，下面的hack是管用的，也就是在设置背景图的元素上面，加一个伪元素的样式表，如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (背景图所在的元素)<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(path/to/image) center <span class=\"number\">0</span> no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>亲测有效，遇到相关问题的童鞋，可以尝试一下这种解决方案。巧妙又方便。</p>\n"},{"title":"input focus在iOS上失效的解决方法","date":"2018-06-11T14:20:00.000Z","_content":"\n之前在移动端页面的开发中，遇到个表单类的问题，项目需求是这样的，希望用户在漏填某一项的时候，input框自动聚焦，这样能友好的提醒用户，有漏填的选项，但是在实际的实现过程中，按如下的解决方法:   \n```js\nvar apple = document.getElementById('abc');\napple.focus();\n```\n\n就可以将焦点聚焦到输入框上，但是在iOS上不行，经过相关的查阅和尝试，发现，只有通过绑定在事件上的函数触发，才能聚焦，解决方案如下：  \n```js\nvar apple = document.getElementById('abc');\nbutton.addEventListener('click',function(){\n apple.focus();\n});\n```\n\n注意的一点是，不能将apple.focus()封装在函数中再由事件触发，这样也会失效。\n","source":"_posts/input-focus在iOS上失效的解决方法.md","raw":"---\ntitle: input focus在iOS上失效的解决方法\ndate: 2018-06-11 22:20:00\ntags:\n  - js \ncategories:\n  - input\n---\n\n之前在移动端页面的开发中，遇到个表单类的问题，项目需求是这样的，希望用户在漏填某一项的时候，input框自动聚焦，这样能友好的提醒用户，有漏填的选项，但是在实际的实现过程中，按如下的解决方法:   \n```js\nvar apple = document.getElementById('abc');\napple.focus();\n```\n\n就可以将焦点聚焦到输入框上，但是在iOS上不行，经过相关的查阅和尝试，发现，只有通过绑定在事件上的函数触发，才能聚焦，解决方案如下：  \n```js\nvar apple = document.getElementById('abc');\nbutton.addEventListener('click',function(){\n apple.focus();\n});\n```\n\n注意的一点是，不能将apple.focus()封装在函数中再由事件触发，这样也会失效。\n","slug":"input-focus在iOS上失效的解决方法","published":1,"updated":"2018-06-11T14:22:19.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxls0015msvieyksay1z","content":"<p>之前在移动端页面的开发中，遇到个表单类的问题，项目需求是这样的，希望用户在漏填某一项的时候，input框自动聚焦，这样能友好的提醒用户，有漏填的选项，但是在实际的实现过程中，按如下的解决方法:   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">apple.focus();</span><br></pre></td></tr></table></figure>\n<p>就可以将焦点聚焦到输入框上，但是在iOS上不行，经过相关的查阅和尝试，发现，只有通过绑定在事件上的函数触发，才能聚焦，解决方案如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">button.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> apple.focus();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意的一点是，不能将apple.focus()封装在函数中再由事件触发，这样也会失效。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在移动端页面的开发中，遇到个表单类的问题，项目需求是这样的，希望用户在漏填某一项的时候，input框自动聚焦，这样能友好的提醒用户，有漏填的选项，但是在实际的实现过程中，按如下的解决方法:   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">apple.focus();</span><br></pre></td></tr></table></figure>\n<p>就可以将焦点聚焦到输入框上，但是在iOS上不行，经过相关的查阅和尝试，发现，只有通过绑定在事件上的函数触发，才能聚焦，解决方案如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">button.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> apple.focus();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意的一点是，不能将apple.focus()封装在函数中再由事件触发，这样也会失效。</p>\n"},{"title":"js中高德百度地图坐标转换","date":"2018-06-20T13:49:34.000Z","_content":"\n\n在最近所做的项目里，使用到了地图相关的模块，前台功能展示采用的百度地图，而后台开发采用的是高德地图，那么在前后端联调的时候，就遇到了一个问题，两家地图坐标的表现方式标准是不一样的，那么怎么去转换两者之间的坐标呢，那么当然啦，java后台本来就可以做一层处理方法，可以交由后端开发去完成，但是作为一名励志当全栈的前端来说，当然是在不影响前端交互性能的前提下，能由前端完成的，尽量前端完成，就算是数据处理好么，哈哈哈，下面就进入正题，关于如何处理两者坐标的转换？  \n\n项目里，其实只需要将高德坐标转换成百度坐标，进行展示，那么高德转百度的方法代码如下：\n```js\nfunction gd_to_bd(gg_lng, gg_lat) {  \n    var X_PI = Math.PI * 3000.0 / 180.0;  \n    var x = gg_lng, y = gg_lat;  \n    var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * X_PI);  \n    var theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * X_PI);  \n    var bd_lng = z * Math.cos(theta) + 0.0065;  \n    var bd_lat = z * Math.sin(theta) + 0.006;  \n    return {  \n        bd_lat: bd_lat,  \n        bd_lng: bd_lng  \n    };  \n}  \n```\n\n举一反三，如果情况是反过来的，又怎么办么，所有情况毕竟都得考虑到嘛，所以，下面顺便提供下百度转高德的方法：\n```js\nfunction bd_to_gd(bd_lng, bd_lat) {  \n    var X_PI = Math.PI * 3000.0 / 180.0;  \n    var x = bd_lng - 0.0065;  \n    var y = bd_lat - 0.006;  \n    var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * X_PI);  \n    var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * X_PI);  \n    var gg_lng = z * Math.cos(theta);  \n    var gg_lat = z * Math.sin(theta);  \n    return {lng: gg_lng, lat: gg_lat}  \n}\n```\n\n学习是日积月累的过程，每一步都需要记录下来，共勉~\n\n\n","source":"_posts/js中高德百度地图坐标转换.md","raw":"---\ntitle: js中高德百度地图坐标转换\ndate: 2018-06-20 21:49:34\ntags:\n  - js \n  - 百度地图API\ncategories:\n  - js\n---\n\n\n在最近所做的项目里，使用到了地图相关的模块，前台功能展示采用的百度地图，而后台开发采用的是高德地图，那么在前后端联调的时候，就遇到了一个问题，两家地图坐标的表现方式标准是不一样的，那么怎么去转换两者之间的坐标呢，那么当然啦，java后台本来就可以做一层处理方法，可以交由后端开发去完成，但是作为一名励志当全栈的前端来说，当然是在不影响前端交互性能的前提下，能由前端完成的，尽量前端完成，就算是数据处理好么，哈哈哈，下面就进入正题，关于如何处理两者坐标的转换？  \n\n项目里，其实只需要将高德坐标转换成百度坐标，进行展示，那么高德转百度的方法代码如下：\n```js\nfunction gd_to_bd(gg_lng, gg_lat) {  \n    var X_PI = Math.PI * 3000.0 / 180.0;  \n    var x = gg_lng, y = gg_lat;  \n    var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * X_PI);  \n    var theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * X_PI);  \n    var bd_lng = z * Math.cos(theta) + 0.0065;  \n    var bd_lat = z * Math.sin(theta) + 0.006;  \n    return {  \n        bd_lat: bd_lat,  \n        bd_lng: bd_lng  \n    };  \n}  \n```\n\n举一反三，如果情况是反过来的，又怎么办么，所有情况毕竟都得考虑到嘛，所以，下面顺便提供下百度转高德的方法：\n```js\nfunction bd_to_gd(bd_lng, bd_lat) {  \n    var X_PI = Math.PI * 3000.0 / 180.0;  \n    var x = bd_lng - 0.0065;  \n    var y = bd_lat - 0.006;  \n    var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * X_PI);  \n    var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * X_PI);  \n    var gg_lng = z * Math.cos(theta);  \n    var gg_lat = z * Math.sin(theta);  \n    return {lng: gg_lng, lat: gg_lat}  \n}\n```\n\n学习是日积月累的过程，每一步都需要记录下来，共勉~\n\n\n","slug":"js中高德百度地图坐标转换","published":1,"updated":"2018-06-20T13:57:10.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlu0018msvi4e7velbz","content":"<p>在最近所做的项目里，使用到了地图相关的模块，前台功能展示采用的百度地图，而后台开发采用的是高德地图，那么在前后端联调的时候，就遇到了一个问题，两家地图坐标的表现方式标准是不一样的，那么怎么去转换两者之间的坐标呢，那么当然啦，java后台本来就可以做一层处理方法，可以交由后端开发去完成，但是作为一名励志当全栈的前端来说，当然是在不影响前端交互性能的前提下，能由前端完成的，尽量前端完成，就算是数据处理好么，哈哈哈，下面就进入正题，关于如何处理两者坐标的转换？  </p>\n<p>项目里，其实只需要将高德坐标转换成百度坐标，进行展示，那么高德转百度的方法代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gd_to_bd</span>(<span class=\"params\">gg_lng, gg_lat</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> X_PI = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3000.0</span> / <span class=\"number\">180.0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = gg_lng, y = gg_lat;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"built_in\">Math</span>.sqrt(x * x + y * y) + <span class=\"number\">0.00002</span> * <span class=\"built_in\">Math</span>.sin(y * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> theta = <span class=\"built_in\">Math</span>.atan2(y, x) + <span class=\"number\">0.000003</span> * <span class=\"built_in\">Math</span>.cos(x * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bd_lng = z * <span class=\"built_in\">Math</span>.cos(theta) + <span class=\"number\">0.0065</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bd_lat = z * <span class=\"built_in\">Math</span>.sin(theta) + <span class=\"number\">0.006</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;  </span><br><span class=\"line\">        bd_lat: bd_lat,  </span><br><span class=\"line\">        bd_lng: bd_lng  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>举一反三，如果情况是反过来的，又怎么办么，所有情况毕竟都得考虑到嘛，所以，下面顺便提供下百度转高德的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bd_to_gd</span>(<span class=\"params\">bd_lng, bd_lat</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> X_PI = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3000.0</span> / <span class=\"number\">180.0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = bd_lng - <span class=\"number\">0.0065</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = bd_lat - <span class=\"number\">0.006</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"built_in\">Math</span>.sqrt(x * x + y * y) - <span class=\"number\">0.00002</span> * <span class=\"built_in\">Math</span>.sin(y * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> theta = <span class=\"built_in\">Math</span>.atan2(y, x) - <span class=\"number\">0.000003</span> * <span class=\"built_in\">Math</span>.cos(x * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gg_lng = z * <span class=\"built_in\">Math</span>.cos(theta);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gg_lat = z * <span class=\"built_in\">Math</span>.sin(theta);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">lng</span>: gg_lng, <span class=\"attr\">lat</span>: gg_lat&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>学习是日积月累的过程，每一步都需要记录下来，共勉~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近所做的项目里，使用到了地图相关的模块，前台功能展示采用的百度地图，而后台开发采用的是高德地图，那么在前后端联调的时候，就遇到了一个问题，两家地图坐标的表现方式标准是不一样的，那么怎么去转换两者之间的坐标呢，那么当然啦，java后台本来就可以做一层处理方法，可以交由后端开发去完成，但是作为一名励志当全栈的前端来说，当然是在不影响前端交互性能的前提下，能由前端完成的，尽量前端完成，就算是数据处理好么，哈哈哈，下面就进入正题，关于如何处理两者坐标的转换？  </p>\n<p>项目里，其实只需要将高德坐标转换成百度坐标，进行展示，那么高德转百度的方法代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gd_to_bd</span>(<span class=\"params\">gg_lng, gg_lat</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> X_PI = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3000.0</span> / <span class=\"number\">180.0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = gg_lng, y = gg_lat;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"built_in\">Math</span>.sqrt(x * x + y * y) + <span class=\"number\">0.00002</span> * <span class=\"built_in\">Math</span>.sin(y * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> theta = <span class=\"built_in\">Math</span>.atan2(y, x) + <span class=\"number\">0.000003</span> * <span class=\"built_in\">Math</span>.cos(x * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bd_lng = z * <span class=\"built_in\">Math</span>.cos(theta) + <span class=\"number\">0.0065</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bd_lat = z * <span class=\"built_in\">Math</span>.sin(theta) + <span class=\"number\">0.006</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;  </span><br><span class=\"line\">        bd_lat: bd_lat,  </span><br><span class=\"line\">        bd_lng: bd_lng  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>举一反三，如果情况是反过来的，又怎么办么，所有情况毕竟都得考虑到嘛，所以，下面顺便提供下百度转高德的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bd_to_gd</span>(<span class=\"params\">bd_lng, bd_lat</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> X_PI = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3000.0</span> / <span class=\"number\">180.0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = bd_lng - <span class=\"number\">0.0065</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = bd_lat - <span class=\"number\">0.006</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"built_in\">Math</span>.sqrt(x * x + y * y) - <span class=\"number\">0.00002</span> * <span class=\"built_in\">Math</span>.sin(y * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> theta = <span class=\"built_in\">Math</span>.atan2(y, x) - <span class=\"number\">0.000003</span> * <span class=\"built_in\">Math</span>.cos(x * X_PI);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gg_lng = z * <span class=\"built_in\">Math</span>.cos(theta);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gg_lat = z * <span class=\"built_in\">Math</span>.sin(theta);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">lng</span>: gg_lng, <span class=\"attr\">lat</span>: gg_lat&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>学习是日积月累的过程，每一步都需要记录下来，共勉~</p>\n"},{"title":"vue-awesome-swiper如何竖向展示多条数据","date":"2018-12-23T11:19:35.000Z","_content":"\n\n在最近的项目里，有个功能需求，设计页面如下图所示：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/1.png?raw=true)\n\n如上图所示，banner 图的底部有个网站公告的信息栏，需求是竖向定时滚动，并且一行最多展示三条数据，多出的部分，则排入下一行展示。并且每条都可以点击进入对应的详情页面。其中后台给的数据结构是下图这样的，就是一个简单的数组，数组里面是每个信息的具体对象。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/2.png?raw=true)\n\n仔细分析下，这样的需求其实很常见，因此，既然使用了 swiper 这个组件，那么我们就去 swiper 组件的[官网](https://www.swiper.com.cn/)去找下符合需求的解决方式，其实之前在做别的项目的时候，实现过类似的需求，也就是 swiper 滚动的分组，每一轮里面包含多少个 slide，官网里配置如下两个属性，设置为 3，就能够实现上面的需求：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/4.png?raw=true)\n\n但是实际上，效果相差十万八千里啊，如下图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/3.png?raw=true)\n\n最关键的一点是，我们是纵向滚动的，而和官网给的例子，是不太一样的，官网的是排列方向与滚动方向一致，而我们这里，是不一致的，因此造成了布局上的差异。\n\n官网文档我还没有很仔细的尝试，具体还有没有可解决的方式了，目前我没去尝试，但是解决这个问题，可以有别的方式，其实可以从后台给的数据入手，后台接口给我的数据是个一维数组，但是我需要的是每 3 条一个小数组，外面嵌套一个大数组的二维数组，因此，我们可以做一下转换：\n\n```js\n    //这个函数主要是把一维数组处理成包含任意个数的小数组的二维数组\n    handleNewsList(data) {\n      //data是后台接口过来的一维数组\n      var num = 3; //每个子数组里的元素个数\n      //var arr = [1, 4, 5, 6, 34, 34, 67, 895, 2456, 87, 9, 5, 23, 884, 56];\n      var Arr = new Array(Math.ceil(data.length / num));\n      for (var i = 0; i < Arr.length; i++) {\n        Arr[i] = new Array();\n        for (var j = 0; j < num; j++) {\n          Arr[i][j] = \"\";\n        }\n      }\n      for (var i = 0; i < data.length; i++) {\n        Arr[parseInt(i / num)][i % num] = data[i];\n      }\n      return Arr;\n      //console.log(Arr);\n    },\n\n    //最后返回的Arr格式是[[...],[...],[...],...]\n```\n\n经过上面对于数据格式的处理后，很方便的，我们可以这样写html的结构\n```html\n  <!-- publicList是转换后的二维数组，并且子数组长度为3 -->\n  <swiper v-if=\"publicList.length\" :options=\"newsOption\" class=\"news-swiper cp cfff\">\n    <swiper-slide :key=\"index\" v-for=\"(item,index) in publicList\">\n      <span @click=\"tapToDetail(item[0].ncId,'首页','网站公告',item[0].title)\" class=\"sb-title ell\">{{item[0].title}}</span>\n      <span @click=\"tapToDetail(item[1].ncId,'首页','网站公告',item[1].title)\" class=\"sb-title ell\">{{item[1].title}}</span>\n      <span @click=\"tapToDetail(item[2].ncId,'首页','网站公告',item[2].title)\" class=\"sb-title ell\">{{item[2].title}}</span>\n    </swiper-slide>\n  </swiper>\n```\n\n经过上面，再加上样式的修改，我们可以正确得到所需要的展示效果了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/5.png?raw=true)\n\n并且可以发现，当最后一个数组，不满3条，也是可以正常展示的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/6.png?raw=true)\n\n\n\n\n","source":"_posts/vue-awesome-swiper如何竖向展示多条数据.md","raw":"---\ntitle: vue-awesome-swiper如何竖向展示多条数据\ndate: 2018-12-23 19:19:35\ntags:\n  - vue\n  - vue-awesome-swiper\ncategories:\n  - vue  \n  - vue-awesome-swiper\n---\n\n\n在最近的项目里，有个功能需求，设计页面如下图所示：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/1.png?raw=true)\n\n如上图所示，banner 图的底部有个网站公告的信息栏，需求是竖向定时滚动，并且一行最多展示三条数据，多出的部分，则排入下一行展示。并且每条都可以点击进入对应的详情页面。其中后台给的数据结构是下图这样的，就是一个简单的数组，数组里面是每个信息的具体对象。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/2.png?raw=true)\n\n仔细分析下，这样的需求其实很常见，因此，既然使用了 swiper 这个组件，那么我们就去 swiper 组件的[官网](https://www.swiper.com.cn/)去找下符合需求的解决方式，其实之前在做别的项目的时候，实现过类似的需求，也就是 swiper 滚动的分组，每一轮里面包含多少个 slide，官网里配置如下两个属性，设置为 3，就能够实现上面的需求：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/4.png?raw=true)\n\n但是实际上，效果相差十万八千里啊，如下图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/3.png?raw=true)\n\n最关键的一点是，我们是纵向滚动的，而和官网给的例子，是不太一样的，官网的是排列方向与滚动方向一致，而我们这里，是不一致的，因此造成了布局上的差异。\n\n官网文档我还没有很仔细的尝试，具体还有没有可解决的方式了，目前我没去尝试，但是解决这个问题，可以有别的方式，其实可以从后台给的数据入手，后台接口给我的数据是个一维数组，但是我需要的是每 3 条一个小数组，外面嵌套一个大数组的二维数组，因此，我们可以做一下转换：\n\n```js\n    //这个函数主要是把一维数组处理成包含任意个数的小数组的二维数组\n    handleNewsList(data) {\n      //data是后台接口过来的一维数组\n      var num = 3; //每个子数组里的元素个数\n      //var arr = [1, 4, 5, 6, 34, 34, 67, 895, 2456, 87, 9, 5, 23, 884, 56];\n      var Arr = new Array(Math.ceil(data.length / num));\n      for (var i = 0; i < Arr.length; i++) {\n        Arr[i] = new Array();\n        for (var j = 0; j < num; j++) {\n          Arr[i][j] = \"\";\n        }\n      }\n      for (var i = 0; i < data.length; i++) {\n        Arr[parseInt(i / num)][i % num] = data[i];\n      }\n      return Arr;\n      //console.log(Arr);\n    },\n\n    //最后返回的Arr格式是[[...],[...],[...],...]\n```\n\n经过上面对于数据格式的处理后，很方便的，我们可以这样写html的结构\n```html\n  <!-- publicList是转换后的二维数组，并且子数组长度为3 -->\n  <swiper v-if=\"publicList.length\" :options=\"newsOption\" class=\"news-swiper cp cfff\">\n    <swiper-slide :key=\"index\" v-for=\"(item,index) in publicList\">\n      <span @click=\"tapToDetail(item[0].ncId,'首页','网站公告',item[0].title)\" class=\"sb-title ell\">{{item[0].title}}</span>\n      <span @click=\"tapToDetail(item[1].ncId,'首页','网站公告',item[1].title)\" class=\"sb-title ell\">{{item[1].title}}</span>\n      <span @click=\"tapToDetail(item[2].ncId,'首页','网站公告',item[2].title)\" class=\"sb-title ell\">{{item[2].title}}</span>\n    </swiper-slide>\n  </swiper>\n```\n\n经过上面，再加上样式的修改，我们可以正确得到所需要的展示效果了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/5.png?raw=true)\n\n并且可以发现，当最后一个数组，不满3条，也是可以正常展示的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181223/6.png?raw=true)\n\n\n\n\n","slug":"vue-awesome-swiper如何竖向展示多条数据","published":1,"updated":"2018-12-23T11:24:47.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlw001cmsvi5b24angs","content":"<p>在最近的项目里，有个功能需求，设计页面如下图所示：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/1.png?raw=true\"></p>\n<p>如上图所示，banner 图的底部有个网站公告的信息栏，需求是竖向定时滚动，并且一行最多展示三条数据，多出的部分，则排入下一行展示。并且每条都可以点击进入对应的详情页面。其中后台给的数据结构是下图这样的，就是一个简单的数组，数组里面是每个信息的具体对象。</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/2.png?raw=true\"></p>\n<p>仔细分析下，这样的需求其实很常见，因此，既然使用了 swiper 这个组件，那么我们就去 swiper 组件的<a href=\"https://www.swiper.com.cn/\">官网</a>去找下符合需求的解决方式，其实之前在做别的项目的时候，实现过类似的需求，也就是 swiper 滚动的分组，每一轮里面包含多少个 slide，官网里配置如下两个属性，设置为 3，就能够实现上面的需求：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/4.png?raw=true\"></p>\n<p>但是实际上，效果相差十万八千里啊，如下图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/3.png?raw=true\"></p>\n<p>最关键的一点是，我们是纵向滚动的，而和官网给的例子，是不太一样的，官网的是排列方向与滚动方向一致，而我们这里，是不一致的，因此造成了布局上的差异。</p>\n<p>官网文档我还没有很仔细的尝试，具体还有没有可解决的方式了，目前我没去尝试，但是解决这个问题，可以有别的方式，其实可以从后台给的数据入手，后台接口给我的数据是个一维数组，但是我需要的是每 3 条一个小数组，外面嵌套一个大数组的二维数组，因此，我们可以做一下转换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个函数主要是把一维数组处理成包含任意个数的小数组的二维数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">handleNewsList</span>(<span class=\"params\">data</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//data是后台接口过来的一维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"number\">3</span>; <span class=\"comment\">//每个子数组里的元素个数</span></span><br><span class=\"line\">  <span class=\"comment\">//var arr = [1, 4, 5, 6, 34, 34, 67, 895, 2456, 87, 9, 5, 23, 884, 56];</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">Math</span>.ceil(data.length / num));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; Arr.length; i++) &#123;</span><br><span class=\"line\">    Arr[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; num; j++) &#123;</span><br><span class=\"line\">      Arr[i][j] = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">    Arr[<span class=\"built_in\">parseInt</span>(i / num)][i % num] = data[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Arr;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(Arr);</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后返回的Arr格式是[[...],[...],[...],...]</span></span><br></pre></td></tr></table></figure>\n<p>经过上面对于数据格式的处理后，很方便的，我们可以这样写html的结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- publicList是转换后的二维数组，并且子数组长度为3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;publicList.length&quot;</span> <span class=\"attr\">:options</span>=<span class=\"string\">&quot;newsOption&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;news-swiper cp cfff&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">swiper-slide</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in publicList&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[0].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[0].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[0].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[1].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[1].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[1].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[2].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[2].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[2].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">swiper-slide</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过上面，再加上样式的修改，我们可以正确得到所需要的展示效果了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/5.png?raw=true\"></p>\n<p>并且可以发现，当最后一个数组，不满3条，也是可以正常展示的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/6.png?raw=true\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近的项目里，有个功能需求，设计页面如下图所示：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/1.png?raw=true\"></p>\n<p>如上图所示，banner 图的底部有个网站公告的信息栏，需求是竖向定时滚动，并且一行最多展示三条数据，多出的部分，则排入下一行展示。并且每条都可以点击进入对应的详情页面。其中后台给的数据结构是下图这样的，就是一个简单的数组，数组里面是每个信息的具体对象。</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/2.png?raw=true\"></p>\n<p>仔细分析下，这样的需求其实很常见，因此，既然使用了 swiper 这个组件，那么我们就去 swiper 组件的<a href=\"https://www.swiper.com.cn/\">官网</a>去找下符合需求的解决方式，其实之前在做别的项目的时候，实现过类似的需求，也就是 swiper 滚动的分组，每一轮里面包含多少个 slide，官网里配置如下两个属性，设置为 3，就能够实现上面的需求：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/4.png?raw=true\"></p>\n<p>但是实际上，效果相差十万八千里啊，如下图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/3.png?raw=true\"></p>\n<p>最关键的一点是，我们是纵向滚动的，而和官网给的例子，是不太一样的，官网的是排列方向与滚动方向一致，而我们这里，是不一致的，因此造成了布局上的差异。</p>\n<p>官网文档我还没有很仔细的尝试，具体还有没有可解决的方式了，目前我没去尝试，但是解决这个问题，可以有别的方式，其实可以从后台给的数据入手，后台接口给我的数据是个一维数组，但是我需要的是每 3 条一个小数组，外面嵌套一个大数组的二维数组，因此，我们可以做一下转换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个函数主要是把一维数组处理成包含任意个数的小数组的二维数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">handleNewsList</span>(<span class=\"params\">data</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//data是后台接口过来的一维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"number\">3</span>; <span class=\"comment\">//每个子数组里的元素个数</span></span><br><span class=\"line\">  <span class=\"comment\">//var arr = [1, 4, 5, 6, 34, 34, 67, 895, 2456, 87, 9, 5, 23, 884, 56];</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">Math</span>.ceil(data.length / num));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; Arr.length; i++) &#123;</span><br><span class=\"line\">    Arr[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; num; j++) &#123;</span><br><span class=\"line\">      Arr[i][j] = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">    Arr[<span class=\"built_in\">parseInt</span>(i / num)][i % num] = data[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Arr;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(Arr);</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后返回的Arr格式是[[...],[...],[...],...]</span></span><br></pre></td></tr></table></figure>\n<p>经过上面对于数据格式的处理后，很方便的，我们可以这样写html的结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- publicList是转换后的二维数组，并且子数组长度为3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;publicList.length&quot;</span> <span class=\"attr\">:options</span>=<span class=\"string\">&quot;newsOption&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;news-swiper cp cfff&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">swiper-slide</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in publicList&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[0].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[0].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[0].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[1].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[1].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[1].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;tapToDetail(item[2].ncId,&#x27;首页&#x27;,&#x27;网站公告&#x27;,item[2].title)&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sb-title ell&quot;</span>&gt;</span>&#123;&#123;item[2].title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">swiper-slide</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过上面，再加上样式的修改，我们可以正确得到所需要的展示效果了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/5.png?raw=true\"></p>\n<p>并且可以发现，当最后一个数组，不满3条，也是可以正常展示的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181223/6.png?raw=true\"></p>\n"},{"title":"max-width在单行文字中的小技巧","date":"2018-07-13T14:14:27.000Z","_content":"\n\n最近的项目里，有个在百度地图上绘制相关地标的需求，后台回过来的相关数据如图所展示：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/1.png?raw=true)\n\n如上图所展示的那样，后台回过来的标题字段长度是不一样的，过长的需要进行截取显示，正常的单行文字截取，样式就不再提了，在元素定宽的前提下，也就简单的这几样：\n```css\nele {\n  overflow: hidden;\n  text-overflow:ellipsis;\n  white-space: nowrap;\n}\n\n```\n\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/2.png?raw=true)\n\n就可以实现单行文字超出截断的效果了，但是呢，有个问题，如果字数少于规定的界限值呢？那么，在定宽元素下，展示，肯定会露出如上图所示的，大片空白区域，那这样的展示效果，肯定是不太好的，那么在width定宽，限定太死的情况下，那么只能采用max-width来解决了。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/3.png?raw=true)\n\n顾名思义，max-width的意思也就是，在width不超过某值的区间内，元素宽度完全是由内部元素撑开，也就是自适应的，当元素达到max-width限定值之后，就开始以设定值固定宽度，那么设置的截断属性，也就自然而然的开始生效了，最终效果如下图所示：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/4.png?raw=true)\n\n最终，当文字内容没超出规定值的时候，元素宽度根据内容自适应展示，文字内容超出，则正常截断展示，提高了页面的兼容友好的展示性。\n","source":"_posts/max-width在单行文字中的小技巧.md","raw":"---\ntitle: max-width在单行文字中的小技巧\ndate: 2018-07-13 22:14:27\ntags:\n  - css\ncategories:\n  - css  \n  - 页面布局\n---\n\n\n最近的项目里，有个在百度地图上绘制相关地标的需求，后台回过来的相关数据如图所展示：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/1.png?raw=true)\n\n如上图所展示的那样，后台回过来的标题字段长度是不一样的，过长的需要进行截取显示，正常的单行文字截取，样式就不再提了，在元素定宽的前提下，也就简单的这几样：\n```css\nele {\n  overflow: hidden;\n  text-overflow:ellipsis;\n  white-space: nowrap;\n}\n\n```\n\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/2.png?raw=true)\n\n就可以实现单行文字超出截断的效果了，但是呢，有个问题，如果字数少于规定的界限值呢？那么，在定宽元素下，展示，肯定会露出如上图所示的，大片空白区域，那这样的展示效果，肯定是不太好的，那么在width定宽，限定太死的情况下，那么只能采用max-width来解决了。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/3.png?raw=true)\n\n顾名思义，max-width的意思也就是，在width不超过某值的区间内，元素宽度完全是由内部元素撑开，也就是自适应的，当元素达到max-width限定值之后，就开始以设定值固定宽度，那么设置的截断属性，也就自然而然的开始生效了，最终效果如下图所示：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180713/4.png?raw=true)\n\n最终，当文字内容没超出规定值的时候，元素宽度根据内容自适应展示，文字内容超出，则正常截断展示，提高了页面的兼容友好的展示性。\n","slug":"max-width在单行文字中的小技巧","published":1,"updated":"2018-07-13T14:15:33.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxly001gmsvihzbphsto","content":"<p>最近的项目里，有个在百度地图上绘制相关地标的需求，后台回过来的相关数据如图所展示：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/1.png?raw=true\"></p>\n<p>如上图所展示的那样，后台回过来的标题字段长度是不一样的，过长的需要进行截取显示，正常的单行文字截取，样式就不再提了，在元素定宽的前提下，也就简单的这几样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/2.png?raw=true\"></p>\n<p>就可以实现单行文字超出截断的效果了，但是呢，有个问题，如果字数少于规定的界限值呢？那么，在定宽元素下，展示，肯定会露出如上图所示的，大片空白区域，那这样的展示效果，肯定是不太好的，那么在width定宽，限定太死的情况下，那么只能采用max-width来解决了。</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/3.png?raw=true\"></p>\n<p>顾名思义，max-width的意思也就是，在width不超过某值的区间内，元素宽度完全是由内部元素撑开，也就是自适应的，当元素达到max-width限定值之后，就开始以设定值固定宽度，那么设置的截断属性，也就自然而然的开始生效了，最终效果如下图所示：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/4.png?raw=true\"></p>\n<p>最终，当文字内容没超出规定值的时候，元素宽度根据内容自适应展示，文字内容超出，则正常截断展示，提高了页面的兼容友好的展示性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的项目里，有个在百度地图上绘制相关地标的需求，后台回过来的相关数据如图所展示：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/1.png?raw=true\"></p>\n<p>如上图所展示的那样，后台回过来的标题字段长度是不一样的，过长的需要进行截取显示，正常的单行文字截取，样式就不再提了，在元素定宽的前提下，也就简单的这几样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/2.png?raw=true\"></p>\n<p>就可以实现单行文字超出截断的效果了，但是呢，有个问题，如果字数少于规定的界限值呢？那么，在定宽元素下，展示，肯定会露出如上图所示的，大片空白区域，那这样的展示效果，肯定是不太好的，那么在width定宽，限定太死的情况下，那么只能采用max-width来解决了。</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/3.png?raw=true\"></p>\n<p>顾名思义，max-width的意思也就是，在width不超过某值的区间内，元素宽度完全是由内部元素撑开，也就是自适应的，当元素达到max-width限定值之后，就开始以设定值固定宽度，那么设置的截断属性，也就自然而然的开始生效了，最终效果如下图所示：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180713/4.png?raw=true\"></p>\n<p>最终，当文字内容没超出规定值的时候，元素宽度根据内容自适应展示，文字内容超出，则正常截断展示，提高了页面的兼容友好的展示性。</p>\n"},{"title":"vue中面包屑使用心得","date":"2019-07-06T01:46:27.000Z","_content":"\n>做了几个vue的项目，其中面包屑在PC的需求中很常见，其实一路走来，也算是不断在改变优化的，记得刚开始用vue的时候，实现面包屑，是最笨的方式，就是直接在页面写死，这样，就得在每个页面都得写一遍，而且如果，遇到后期需求变化，维护起来也很浪费时间。后来，想到了路由元信息。\n\n>路由提供了meta属性，用来给页面访问，我们其实只要在路由配置里加上相关meta配置，之后，在页面中，通过this.$route.meta去访问，就可以了。\n\n>但是后期发现，这样做，也很不好，对于路由配置，会产生大量的冗余，当然可以另写一份对象配置文件，但是，总觉得，这还不是最好的解决方案。\n\n>最终的解决方案是，利用路由的matched属性，这个属性是干嘛的呢，官方有介绍，这个属性，返回当前路由访问的记录数组，也就是说，我们只要定义好了路由以及路由的相关meta属性，就能够在路由发生变化的时候，页面里通过this.$route.matched访问到路由记录数组，那么自然，我们的面包屑数据就可以获取到啦。\n","source":"_posts/vue中面包屑使用心得.md","raw":"---\ntitle: vue中面包屑使用心得\ndate: 2019-07-06 09:46:27\ntags:\n  - vue\n  - vue-router\ncategories:\n  - vue\n  - vue-router\n---\n\n>做了几个vue的项目，其中面包屑在PC的需求中很常见，其实一路走来，也算是不断在改变优化的，记得刚开始用vue的时候，实现面包屑，是最笨的方式，就是直接在页面写死，这样，就得在每个页面都得写一遍，而且如果，遇到后期需求变化，维护起来也很浪费时间。后来，想到了路由元信息。\n\n>路由提供了meta属性，用来给页面访问，我们其实只要在路由配置里加上相关meta配置，之后，在页面中，通过this.$route.meta去访问，就可以了。\n\n>但是后期发现，这样做，也很不好，对于路由配置，会产生大量的冗余，当然可以另写一份对象配置文件，但是，总觉得，这还不是最好的解决方案。\n\n>最终的解决方案是，利用路由的matched属性，这个属性是干嘛的呢，官方有介绍，这个属性，返回当前路由访问的记录数组，也就是说，我们只要定义好了路由以及路由的相关meta属性，就能够在路由发生变化的时候，页面里通过this.$route.matched访问到路由记录数组，那么自然，我们的面包屑数据就可以获取到啦。\n","slug":"vue中面包屑使用心得","published":1,"updated":"2019-07-06T02:03:50.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxlz001kmsvi94rn16yy","content":"<blockquote>\n<p>做了几个vue的项目，其中面包屑在PC的需求中很常见，其实一路走来，也算是不断在改变优化的，记得刚开始用vue的时候，实现面包屑，是最笨的方式，就是直接在页面写死，这样，就得在每个页面都得写一遍，而且如果，遇到后期需求变化，维护起来也很浪费时间。后来，想到了路由元信息。</p>\n</blockquote>\n<blockquote>\n<p>路由提供了meta属性，用来给页面访问，我们其实只要在路由配置里加上相关meta配置，之后，在页面中，通过this.$route.meta去访问，就可以了。</p>\n</blockquote>\n<blockquote>\n<p>但是后期发现，这样做，也很不好，对于路由配置，会产生大量的冗余，当然可以另写一份对象配置文件，但是，总觉得，这还不是最好的解决方案。</p>\n</blockquote>\n<blockquote>\n<p>最终的解决方案是，利用路由的matched属性，这个属性是干嘛的呢，官方有介绍，这个属性，返回当前路由访问的记录数组，也就是说，我们只要定义好了路由以及路由的相关meta属性，就能够在路由发生变化的时候，页面里通过this.$route.matched访问到路由记录数组，那么自然，我们的面包屑数据就可以获取到啦。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>做了几个vue的项目，其中面包屑在PC的需求中很常见，其实一路走来，也算是不断在改变优化的，记得刚开始用vue的时候，实现面包屑，是最笨的方式，就是直接在页面写死，这样，就得在每个页面都得写一遍，而且如果，遇到后期需求变化，维护起来也很浪费时间。后来，想到了路由元信息。</p>\n</blockquote>\n<blockquote>\n<p>路由提供了meta属性，用来给页面访问，我们其实只要在路由配置里加上相关meta配置，之后，在页面中，通过this.$route.meta去访问，就可以了。</p>\n</blockquote>\n<blockquote>\n<p>但是后期发现，这样做，也很不好，对于路由配置，会产生大量的冗余，当然可以另写一份对象配置文件，但是，总觉得，这还不是最好的解决方案。</p>\n</blockquote>\n<blockquote>\n<p>最终的解决方案是，利用路由的matched属性，这个属性是干嘛的呢，官方有介绍，这个属性，返回当前路由访问的记录数组，也就是说，我们只要定义好了路由以及路由的相关meta属性，就能够在路由发生变化的时候，页面里通过this.$route.matched访问到路由记录数组，那么自然，我们的面包屑数据就可以获取到啦。</p>\n</blockquote>\n"},{"title":"vue-validate使用心得","date":"2018-12-31T08:46:23.000Z","_content":"\n\n在最近的项目里，使用vee-validate表单验证组件的时候，出现了这样一个问题：\n\n如图下所示的表单：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/1.png?raw=true)\n\n当我在输入一些非法值的时候，表单是可以提示验证的，并且，在输入后删除，也是可以自动提示required必须的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/3.png?raw=true)\n\n但是，当我成功提交之后，会发现，当我把表单数据清空了，required提示却出现了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/2.png?raw=true)\n\n这样的方式，完全不符合需求的预期，无缘无故出现提示，也说不过去，所以，就查一查vee-validate的官方文档看看，虽然网上一堆vee-validate的使用教程，但是都很乱，并不完整，所以还是看官方的[vee-validate API 文档](https://baianat.github.io/vee-validate/api/validator.html#api)，才能找到正解。\n\n\n简单分析下，我们现在的需求只不过是，要求在成功提交表单之后，把提示给去掉，用专业的说法，就是重置reset一下，所以，为了准确快速找到关键词，我就在全是英文的API文档中，搜索reset这个关键词，果然搜到了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/4.png?raw=true)\n\n从上图可以看出来，官方API里这个reset方法就是重置验证组件的作用，那么具体我们应该怎么使用呢，官方文档里是这么写的：\n\n```js\n\nthis.$validator.reset()\n\n```\n\n这里的this，其实就是vue组件实力，我们在控制台里打印一下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/5.png?raw=true)\n\n确实是有 $validator 这个属性的，那么很好办了，我们只需要在提交成功的回调里，加上这么一句话：\n\n```js\n\nthis.$validator.reset()\n\n```\n\n就可以达到预期的效果了。\n\n\n\n\n\n","source":"_posts/vue-validate使用心得.md","raw":"---\ntitle: vue-validate使用心得\ndate: 2018-12-31 16:46:23\ntags:\n  - vue\n  - vue-validate\ncategories:\n  - vue  \n  - vue-validate\n---\n\n\n在最近的项目里，使用vee-validate表单验证组件的时候，出现了这样一个问题：\n\n如图下所示的表单：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/1.png?raw=true)\n\n当我在输入一些非法值的时候，表单是可以提示验证的，并且，在输入后删除，也是可以自动提示required必须的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/3.png?raw=true)\n\n但是，当我成功提交之后，会发现，当我把表单数据清空了，required提示却出现了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/2.png?raw=true)\n\n这样的方式，完全不符合需求的预期，无缘无故出现提示，也说不过去，所以，就查一查vee-validate的官方文档看看，虽然网上一堆vee-validate的使用教程，但是都很乱，并不完整，所以还是看官方的[vee-validate API 文档](https://baianat.github.io/vee-validate/api/validator.html#api)，才能找到正解。\n\n\n简单分析下，我们现在的需求只不过是，要求在成功提交表单之后，把提示给去掉，用专业的说法，就是重置reset一下，所以，为了准确快速找到关键词，我就在全是英文的API文档中，搜索reset这个关键词，果然搜到了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/4.png?raw=true)\n\n从上图可以看出来，官方API里这个reset方法就是重置验证组件的作用，那么具体我们应该怎么使用呢，官方文档里是这么写的：\n\n```js\n\nthis.$validator.reset()\n\n```\n\n这里的this，其实就是vue组件实力，我们在控制台里打印一下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181224/5.png?raw=true)\n\n确实是有 $validator 这个属性的，那么很好办了，我们只需要在提交成功的回调里，加上这么一句话：\n\n```js\n\nthis.$validator.reset()\n\n```\n\n就可以达到预期的效果了。\n\n\n\n\n\n","slug":"vue-validate使用心得","published":1,"updated":"2018-12-31T08:47:37.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm0001omsvi643gacss","content":"<p>在最近的项目里，使用vee-validate表单验证组件的时候，出现了这样一个问题：</p>\n<p>如图下所示的表单：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/1.png?raw=true\"></p>\n<p>当我在输入一些非法值的时候，表单是可以提示验证的，并且，在输入后删除，也是可以自动提示required必须的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/3.png?raw=true\"></p>\n<p>但是，当我成功提交之后，会发现，当我把表单数据清空了，required提示却出现了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/2.png?raw=true\"></p>\n<p>这样的方式，完全不符合需求的预期，无缘无故出现提示，也说不过去，所以，就查一查vee-validate的官方文档看看，虽然网上一堆vee-validate的使用教程，但是都很乱，并不完整，所以还是看官方的<a href=\"https://baianat.github.io/vee-validate/api/validator.html#api\">vee-validate API 文档</a>，才能找到正解。</p>\n<p>简单分析下，我们现在的需求只不过是，要求在成功提交表单之后，把提示给去掉，用专业的说法，就是重置reset一下，所以，为了准确快速找到关键词，我就在全是英文的API文档中，搜索reset这个关键词，果然搜到了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/4.png?raw=true\"></p>\n<p>从上图可以看出来，官方API里这个reset方法就是重置验证组件的作用，那么具体我们应该怎么使用呢，官方文档里是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$validator.reset()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里的this，其实就是vue组件实力，我们在控制台里打印一下：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/5.png?raw=true\"></p>\n<p>确实是有 $validator 这个属性的，那么很好办了，我们只需要在提交成功的回调里，加上这么一句话：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$validator.reset()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就可以达到预期的效果了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近的项目里，使用vee-validate表单验证组件的时候，出现了这样一个问题：</p>\n<p>如图下所示的表单：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/1.png?raw=true\"></p>\n<p>当我在输入一些非法值的时候，表单是可以提示验证的，并且，在输入后删除，也是可以自动提示required必须的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/3.png?raw=true\"></p>\n<p>但是，当我成功提交之后，会发现，当我把表单数据清空了，required提示却出现了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/2.png?raw=true\"></p>\n<p>这样的方式，完全不符合需求的预期，无缘无故出现提示，也说不过去，所以，就查一查vee-validate的官方文档看看，虽然网上一堆vee-validate的使用教程，但是都很乱，并不完整，所以还是看官方的<a href=\"https://baianat.github.io/vee-validate/api/validator.html#api\">vee-validate API 文档</a>，才能找到正解。</p>\n<p>简单分析下，我们现在的需求只不过是，要求在成功提交表单之后，把提示给去掉，用专业的说法，就是重置reset一下，所以，为了准确快速找到关键词，我就在全是英文的API文档中，搜索reset这个关键词，果然搜到了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/4.png?raw=true\"></p>\n<p>从上图可以看出来，官方API里这个reset方法就是重置验证组件的作用，那么具体我们应该怎么使用呢，官方文档里是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$validator.reset()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里的this，其实就是vue组件实力，我们在控制台里打印一下：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181224/5.png?raw=true\"></p>\n<p>确实是有 $validator 这个属性的，那么很好办了，我们只需要在提交成功的回调里，加上这么一句话：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$validator.reset()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就可以达到预期的效果了。</p>\n"},{"title":"vue单页面新建tab页跳转的方法","date":"2019-01-14T12:11:16.000Z","_content":"\n最近在项目里遇到一个需求，列表页跳转到详情页的时候，希望可以另开一个页面，打开详情页。其实这个需求在传统的前端开发中十分常见，其实就是 a 标签加上一个—blank 的属性，表示新窗口打开。当然，js 也是有办法解决的，window 的 open 方法，第二个参数决定了采取什么方式去打开：\n\n```js\nwindow.open(url, \"_blank\");\n```\n\n上面的代码，也是可以完成的，但是我们这个项目是单页的，如何去获取这个 url 呢？其实在 vue router 的 api 里提供了这样一个方法：[官网地址](https://router.vuejs.org/zh/api/#router-resolve) router 实例有个 resolve 方法，用来解析路由，在现在这个场景中，只需要将想去跳转的页面的路由对象，当做第一个参数传入：\n\n```js\nlet routerObj = this.$router.resolve({\n  name: \"detail\",\n  query: {\n    id: id,\n  }\n});\nconsole.log(routerObj)\n\n```\n返回值是解析后的一个对象，我们在控制台打印一下看看：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190112/1.png?raw=true)\n\n可以看到，其中的href属性就是我们需要的，用来新建窗口的url，接下来，我们只需要这么使用就好了：\n\n```js\nlet href = this.$router.resolve({\n  name: \"detail\",\n  query: {\n    id: id,\n  }\n}).href;\n\nwindow.open(href, \"_blank\");\n\n```\n\n其实想说的是，很多时候，我们不知道的东西，就会觉得做不到，但其实，如果对于文档稍微熟一点，对自己限制小一点，静下心来多想想，多去尝试尝试，会发现，其实问题很简单。\n\n\n\n\n","source":"_posts/vue单页面新建tab页跳转的方法.md","raw":"---\ntitle: vue单页面新建tab页跳转的方法\ndate: 2019-01-14 20:11:16\ntags:\n  - vue\n  - vue-router\ncategories:\n  - vue\n  - vue-router\n---\n\n最近在项目里遇到一个需求，列表页跳转到详情页的时候，希望可以另开一个页面，打开详情页。其实这个需求在传统的前端开发中十分常见，其实就是 a 标签加上一个—blank 的属性，表示新窗口打开。当然，js 也是有办法解决的，window 的 open 方法，第二个参数决定了采取什么方式去打开：\n\n```js\nwindow.open(url, \"_blank\");\n```\n\n上面的代码，也是可以完成的，但是我们这个项目是单页的，如何去获取这个 url 呢？其实在 vue router 的 api 里提供了这样一个方法：[官网地址](https://router.vuejs.org/zh/api/#router-resolve) router 实例有个 resolve 方法，用来解析路由，在现在这个场景中，只需要将想去跳转的页面的路由对象，当做第一个参数传入：\n\n```js\nlet routerObj = this.$router.resolve({\n  name: \"detail\",\n  query: {\n    id: id,\n  }\n});\nconsole.log(routerObj)\n\n```\n返回值是解析后的一个对象，我们在控制台打印一下看看：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190112/1.png?raw=true)\n\n可以看到，其中的href属性就是我们需要的，用来新建窗口的url，接下来，我们只需要这么使用就好了：\n\n```js\nlet href = this.$router.resolve({\n  name: \"detail\",\n  query: {\n    id: id,\n  }\n}).href;\n\nwindow.open(href, \"_blank\");\n\n```\n\n其实想说的是，很多时候，我们不知道的东西，就会觉得做不到，但其实，如果对于文档稍微熟一点，对自己限制小一点，静下心来多想想，多去尝试尝试，会发现，其实问题很简单。\n\n\n\n\n","slug":"vue单页面新建tab页跳转的方法","published":1,"updated":"2019-01-14T12:19:53.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm4001rmsviardcbs8v","content":"<p>最近在项目里遇到一个需求，列表页跳转到详情页的时候，希望可以另开一个页面，打开详情页。其实这个需求在传统的前端开发中十分常见，其实就是 a 标签加上一个—blank 的属性，表示新窗口打开。当然，js 也是有办法解决的，window 的 open 方法，第二个参数决定了采取什么方式去打开：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.open(url, <span class=\"string\">&quot;_blank&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码，也是可以完成的，但是我们这个项目是单页的，如何去获取这个 url 呢？其实在 vue router 的 api 里提供了这样一个方法：<a href=\"https://router.vuejs.org/zh/api/#router-resolve\">官网地址</a> router 实例有个 resolve 方法，用来解析路由，在现在这个场景中，只需要将想去跳转的页面的路由对象，当做第一个参数传入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routerObj = <span class=\"built_in\">this</span>.$router.resolve(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">  query: &#123;</span><br><span class=\"line\">    id: id,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(routerObj)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>返回值是解析后的一个对象，我们在控制台打印一下看看：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190112/1.png?raw=true\"></p>\n<p>可以看到，其中的href属性就是我们需要的，用来新建窗口的url，接下来，我们只需要这么使用就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> href = <span class=\"built_in\">this</span>.$router.resolve(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">  query: &#123;</span><br><span class=\"line\">    id: id,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).href;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(href, <span class=\"string\">&quot;_blank&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实想说的是，很多时候，我们不知道的东西，就会觉得做不到，但其实，如果对于文档稍微熟一点，对自己限制小一点，静下心来多想想，多去尝试尝试，会发现，其实问题很简单。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在项目里遇到一个需求，列表页跳转到详情页的时候，希望可以另开一个页面，打开详情页。其实这个需求在传统的前端开发中十分常见，其实就是 a 标签加上一个—blank 的属性，表示新窗口打开。当然，js 也是有办法解决的，window 的 open 方法，第二个参数决定了采取什么方式去打开：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.open(url, <span class=\"string\">&quot;_blank&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码，也是可以完成的，但是我们这个项目是单页的，如何去获取这个 url 呢？其实在 vue router 的 api 里提供了这样一个方法：<a href=\"https://router.vuejs.org/zh/api/#router-resolve\">官网地址</a> router 实例有个 resolve 方法，用来解析路由，在现在这个场景中，只需要将想去跳转的页面的路由对象，当做第一个参数传入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routerObj = <span class=\"built_in\">this</span>.$router.resolve(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">  query: &#123;</span><br><span class=\"line\">    id: id,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(routerObj)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>返回值是解析后的一个对象，我们在控制台打印一下看看：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190112/1.png?raw=true\"></p>\n<p>可以看到，其中的href属性就是我们需要的，用来新建窗口的url，接下来，我们只需要这么使用就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> href = <span class=\"built_in\">this</span>.$router.resolve(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;detail&quot;</span>,</span><br><span class=\"line\">  query: &#123;</span><br><span class=\"line\">    id: id,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).href;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(href, <span class=\"string\">&quot;_blank&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实想说的是，很多时候，我们不知道的东西，就会觉得做不到，但其实，如果对于文档稍微熟一点，对自己限制小一点，静下心来多想想，多去尝试尝试，会发现，其实问题很简单。</p>\n"},{"title":"vue项目使用分页组件的心得","date":"2018-12-20T13:37:59.000Z","_content":"\n\n最近在新的项目里，使用了vue全家桶来进行开发，之前公司的前端技术栈基本就是jq，这次的新项目是个新闻资讯网站，用vue来上手开发，应该不难，就当是个入门级的练手项目。\n\n当然，第一次的开发过程，总是会遇到各种各样的问题，今天要跟大家分享的是一个很常见的功能，就是列表的分页。既然是资讯网，那么很多场景下面，都会需要用到分页，而PC端，基本就是分页按钮式的交互，移动端则是上拉下拉加载刷新的交互。由于我负责的是pc端的实现，因此来分享下，PC端分页的心得。\n\n一般来说，像前端分页这种功能，在网上都会有大量的轮子可以使用，但是良莠不齐，需要细心分辨，一开始，我选用的分页组件是基于vue的[v-page](https://github.com/TerryZ/v-page)，具体的使用，可以根据它的[文档](https://terryz.gitee.io/vue/#/page)来按步骤完成，虽然这个分页控件star数不多，但我实际使用起来，还是感觉非常方便的，只需要传入相应的props，就可以完成正常的分页数据的交互，而且是按页加载的。\n\n如果，一切都像上面用的那么顺利，那我现在就不应该再继续往下分享了，大功告成很嗨皮啊，但是，有些时候，项目的复杂度，是不能单单靠这些单薄的轮子可以支撑的，在我自以为完成功能之后的几天，测试就打过来了一个bug，说是分页数据会乱掉，当时我是不太信的，后来run了一下项目，检查了下，发现问题是这样的：\n\n首先，我们这个资讯网项目，有两种不同的分页情况：\n\n* 类似列表页的这种，全局的接口请求只有唯一一个，因此数据接口是单一的\n\n* 类似分类列表的这种，如下图，它是需要根据左侧的分类id去分别查询相应的列表信息，因此，数据接口是多个的，而且不固定，当时考虑到代码的简洁性，肯定全局只能用一个分页组件，然后，根据不同的接口回来的数据，去更新信息列表以及分页组件。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181220/1.png?raw=true)\n\n测试所发现的问题是这样的，问题出现在第二种情况的页面里，也就是存在多个数据接口动态获取列表数据的情况：\n\n首先，假如，我当前的分类下面，商品数量超过一页10条的数据，当我点击第二页的时候，此时展示的是当前分类的第二页的数据，这是没毛病的，但是然后当我再切换左侧的分类，那么，应该重新去获取另一个分类的数据，而且是要按照页码默认是第一页去取，这一步也没毛病，因为我在改变分类的事件的时候，接口调用的是按照第一页的去取，因此展示的也是第一页的数据。但是问题来了，如果这个时候，我再点一下上一页这个按钮，你会发现，神奇的事情是，数据请求了，竟然，而且是第一页的数据。而且，如果第一次的数据多，你点了3,4,5甚至更多的页码，那么再按照之前的操作，跳到一个分类列表数据很少的分页下，点击上一页，你会发现，数据请求了，但是没有数据。简单思考了下，查了下请求，发现，如果上一次请求的是第5页的信息，那么这一顿操作之后，第二次的请求，则是第4页的信息，然而，当前分类下并没有第4页的信息，这才是最重要的问题所在，数据混乱的根源，就在这里，当前的page被组件记住了，而且，我查看了下api，并没有可以重置当前page页码信息的props，基本上可以说，这个组件，是没办法满足当前需求的，那么继续换，反正[vue官方资源](https://github.com/vuejs/awesome-vue)也有很多其他类似的分页插件可以使用。\n\n那么我又花了半天的时间，去查看其他的分页组件的文档，终于物色到了一款，并且试了之后，刚好可以满足当前需求的组件，就是[vuejs-paginate](https://github.com/lokyoung/vuejs-paginate)\n\n\n这个文档，写的还是很详细的，毕竟star数417 是v-page的十倍还多，具体的使用，可以参照上面的链接里的文档，下面只是说下，如何来解决上述的问题，很明显，我们需要的是，分页组件能够重置当前的页码数，方便我们在重新请求分类列表数据的情况下，都能够重置成最开始的情况，也就是默认第一页的数据，因此，需要这个组件，能够拥有一个改变这个变量的props，那么，仔细阅读文档，会发现，下面这段话：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181220/2.png?raw=true)\n\n是的，v-model这个属性绑定，经过我的简单测试，就是设置组件当前的页码数，因此一切问题迎刃而解了，我们只需要在改变左侧分类栏目的点击事件中，调用一下this.page = 1，将组件内置的page页数给重置回去，就可以了。\n\n## 总结\n\n来做个简单的总结，如果场景里需要的仅仅是一个数据接口回来数据的列表展示，那么使用v-page是完全没有问题的，但是如果场景开始变得复杂，需要根据不同的id去获取不同类型的列表数据，那么我们就需要考虑组件的完备性和可扩展性了，那么还是推荐使用vuejs-paginate这个组件。   \n\n另外，v-page里的样式，不支持外联props扩展，因此，一般在项目里需要做重写，尽可能高的还原ui设计。而vuejs-pagination这个组件，支持props传入className的值，允许我们进行自定义样式的设置，这一点做的还是很到位的。    \n\n前几天，在知乎上看到一个评论，说业务远远没有技术重要，这种言论还是过于偏激了。因为单单从前端方面来说，其实前端还是偏向于业务场景的实现的，是客户和需求最直接的接收者，而技术，只是一种手段，一种达成业务，完善业务，扩展业务的手段，说到业务和技术，其实缺一不可，不可脱离技术谈业务，不然会是空谈，不切实际的。也不能脱离业务谈技术，不然也只能是纸上谈兵，并没有可用之处。\n只有二者很好的结合，才能给所在的公司创造价值，才能带来更多的利益。不过技术还是很单纯的，活到老，学到老，共勉。\n\n\n\n\n\n","source":"_posts/vue项目使用分页组件的心得.md","raw":"---\ntitle: vue项目使用分页组件的心得\ndate: 2018-12-20 21:37:59\ntags:\n  - vue\n  - vuejs-paginate\ncategories:\n  - vue  \n  - pagination\n---\n\n\n最近在新的项目里，使用了vue全家桶来进行开发，之前公司的前端技术栈基本就是jq，这次的新项目是个新闻资讯网站，用vue来上手开发，应该不难，就当是个入门级的练手项目。\n\n当然，第一次的开发过程，总是会遇到各种各样的问题，今天要跟大家分享的是一个很常见的功能，就是列表的分页。既然是资讯网，那么很多场景下面，都会需要用到分页，而PC端，基本就是分页按钮式的交互，移动端则是上拉下拉加载刷新的交互。由于我负责的是pc端的实现，因此来分享下，PC端分页的心得。\n\n一般来说，像前端分页这种功能，在网上都会有大量的轮子可以使用，但是良莠不齐，需要细心分辨，一开始，我选用的分页组件是基于vue的[v-page](https://github.com/TerryZ/v-page)，具体的使用，可以根据它的[文档](https://terryz.gitee.io/vue/#/page)来按步骤完成，虽然这个分页控件star数不多，但我实际使用起来，还是感觉非常方便的，只需要传入相应的props，就可以完成正常的分页数据的交互，而且是按页加载的。\n\n如果，一切都像上面用的那么顺利，那我现在就不应该再继续往下分享了，大功告成很嗨皮啊，但是，有些时候，项目的复杂度，是不能单单靠这些单薄的轮子可以支撑的，在我自以为完成功能之后的几天，测试就打过来了一个bug，说是分页数据会乱掉，当时我是不太信的，后来run了一下项目，检查了下，发现问题是这样的：\n\n首先，我们这个资讯网项目，有两种不同的分页情况：\n\n* 类似列表页的这种，全局的接口请求只有唯一一个，因此数据接口是单一的\n\n* 类似分类列表的这种，如下图，它是需要根据左侧的分类id去分别查询相应的列表信息，因此，数据接口是多个的，而且不固定，当时考虑到代码的简洁性，肯定全局只能用一个分页组件，然后，根据不同的接口回来的数据，去更新信息列表以及分页组件。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181220/1.png?raw=true)\n\n测试所发现的问题是这样的，问题出现在第二种情况的页面里，也就是存在多个数据接口动态获取列表数据的情况：\n\n首先，假如，我当前的分类下面，商品数量超过一页10条的数据，当我点击第二页的时候，此时展示的是当前分类的第二页的数据，这是没毛病的，但是然后当我再切换左侧的分类，那么，应该重新去获取另一个分类的数据，而且是要按照页码默认是第一页去取，这一步也没毛病，因为我在改变分类的事件的时候，接口调用的是按照第一页的去取，因此展示的也是第一页的数据。但是问题来了，如果这个时候，我再点一下上一页这个按钮，你会发现，神奇的事情是，数据请求了，竟然，而且是第一页的数据。而且，如果第一次的数据多，你点了3,4,5甚至更多的页码，那么再按照之前的操作，跳到一个分类列表数据很少的分页下，点击上一页，你会发现，数据请求了，但是没有数据。简单思考了下，查了下请求，发现，如果上一次请求的是第5页的信息，那么这一顿操作之后，第二次的请求，则是第4页的信息，然而，当前分类下并没有第4页的信息，这才是最重要的问题所在，数据混乱的根源，就在这里，当前的page被组件记住了，而且，我查看了下api，并没有可以重置当前page页码信息的props，基本上可以说，这个组件，是没办法满足当前需求的，那么继续换，反正[vue官方资源](https://github.com/vuejs/awesome-vue)也有很多其他类似的分页插件可以使用。\n\n那么我又花了半天的时间，去查看其他的分页组件的文档，终于物色到了一款，并且试了之后，刚好可以满足当前需求的组件，就是[vuejs-paginate](https://github.com/lokyoung/vuejs-paginate)\n\n\n这个文档，写的还是很详细的，毕竟star数417 是v-page的十倍还多，具体的使用，可以参照上面的链接里的文档，下面只是说下，如何来解决上述的问题，很明显，我们需要的是，分页组件能够重置当前的页码数，方便我们在重新请求分类列表数据的情况下，都能够重置成最开始的情况，也就是默认第一页的数据，因此，需要这个组件，能够拥有一个改变这个变量的props，那么，仔细阅读文档，会发现，下面这段话：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181220/2.png?raw=true)\n\n是的，v-model这个属性绑定，经过我的简单测试，就是设置组件当前的页码数，因此一切问题迎刃而解了，我们只需要在改变左侧分类栏目的点击事件中，调用一下this.page = 1，将组件内置的page页数给重置回去，就可以了。\n\n## 总结\n\n来做个简单的总结，如果场景里需要的仅仅是一个数据接口回来数据的列表展示，那么使用v-page是完全没有问题的，但是如果场景开始变得复杂，需要根据不同的id去获取不同类型的列表数据，那么我们就需要考虑组件的完备性和可扩展性了，那么还是推荐使用vuejs-paginate这个组件。   \n\n另外，v-page里的样式，不支持外联props扩展，因此，一般在项目里需要做重写，尽可能高的还原ui设计。而vuejs-pagination这个组件，支持props传入className的值，允许我们进行自定义样式的设置，这一点做的还是很到位的。    \n\n前几天，在知乎上看到一个评论，说业务远远没有技术重要，这种言论还是过于偏激了。因为单单从前端方面来说，其实前端还是偏向于业务场景的实现的，是客户和需求最直接的接收者，而技术，只是一种手段，一种达成业务，完善业务，扩展业务的手段，说到业务和技术，其实缺一不可，不可脱离技术谈业务，不然会是空谈，不切实际的。也不能脱离业务谈技术，不然也只能是纸上谈兵，并没有可用之处。\n只有二者很好的结合，才能给所在的公司创造价值，才能带来更多的利益。不过技术还是很单纯的，活到老，学到老，共勉。\n\n\n\n\n\n","slug":"vue项目使用分页组件的心得","published":1,"updated":"2018-12-20T13:41:58.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm5001tmsvihpdg1hqr","content":"<p>最近在新的项目里，使用了vue全家桶来进行开发，之前公司的前端技术栈基本就是jq，这次的新项目是个新闻资讯网站，用vue来上手开发，应该不难，就当是个入门级的练手项目。</p>\n<p>当然，第一次的开发过程，总是会遇到各种各样的问题，今天要跟大家分享的是一个很常见的功能，就是列表的分页。既然是资讯网，那么很多场景下面，都会需要用到分页，而PC端，基本就是分页按钮式的交互，移动端则是上拉下拉加载刷新的交互。由于我负责的是pc端的实现，因此来分享下，PC端分页的心得。</p>\n<p>一般来说，像前端分页这种功能，在网上都会有大量的轮子可以使用，但是良莠不齐，需要细心分辨，一开始，我选用的分页组件是基于vue的<a href=\"https://github.com/TerryZ/v-page\">v-page</a>，具体的使用，可以根据它的<a href=\"https://terryz.gitee.io/vue/#/page\">文档</a>来按步骤完成，虽然这个分页控件star数不多，但我实际使用起来，还是感觉非常方便的，只需要传入相应的props，就可以完成正常的分页数据的交互，而且是按页加载的。</p>\n<p>如果，一切都像上面用的那么顺利，那我现在就不应该再继续往下分享了，大功告成很嗨皮啊，但是，有些时候，项目的复杂度，是不能单单靠这些单薄的轮子可以支撑的，在我自以为完成功能之后的几天，测试就打过来了一个bug，说是分页数据会乱掉，当时我是不太信的，后来run了一下项目，检查了下，发现问题是这样的：</p>\n<p>首先，我们这个资讯网项目，有两种不同的分页情况：</p>\n<ul>\n<li><p>类似列表页的这种，全局的接口请求只有唯一一个，因此数据接口是单一的</p>\n</li>\n<li><p>类似分类列表的这种，如下图，它是需要根据左侧的分类id去分别查询相应的列表信息，因此，数据接口是多个的，而且不固定，当时考虑到代码的简洁性，肯定全局只能用一个分页组件，然后，根据不同的接口回来的数据，去更新信息列表以及分页组件。</p>\n</li>\n</ul>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181220/1.png?raw=true\"></p>\n<p>测试所发现的问题是这样的，问题出现在第二种情况的页面里，也就是存在多个数据接口动态获取列表数据的情况：</p>\n<p>首先，假如，我当前的分类下面，商品数量超过一页10条的数据，当我点击第二页的时候，此时展示的是当前分类的第二页的数据，这是没毛病的，但是然后当我再切换左侧的分类，那么，应该重新去获取另一个分类的数据，而且是要按照页码默认是第一页去取，这一步也没毛病，因为我在改变分类的事件的时候，接口调用的是按照第一页的去取，因此展示的也是第一页的数据。但是问题来了，如果这个时候，我再点一下上一页这个按钮，你会发现，神奇的事情是，数据请求了，竟然，而且是第一页的数据。而且，如果第一次的数据多，你点了3,4,5甚至更多的页码，那么再按照之前的操作，跳到一个分类列表数据很少的分页下，点击上一页，你会发现，数据请求了，但是没有数据。简单思考了下，查了下请求，发现，如果上一次请求的是第5页的信息，那么这一顿操作之后，第二次的请求，则是第4页的信息，然而，当前分类下并没有第4页的信息，这才是最重要的问题所在，数据混乱的根源，就在这里，当前的page被组件记住了，而且，我查看了下api，并没有可以重置当前page页码信息的props，基本上可以说，这个组件，是没办法满足当前需求的，那么继续换，反正<a href=\"https://github.com/vuejs/awesome-vue\">vue官方资源</a>也有很多其他类似的分页插件可以使用。</p>\n<p>那么我又花了半天的时间，去查看其他的分页组件的文档，终于物色到了一款，并且试了之后，刚好可以满足当前需求的组件，就是<a href=\"https://github.com/lokyoung/vuejs-paginate\">vuejs-paginate</a></p>\n<p>这个文档，写的还是很详细的，毕竟star数417 是v-page的十倍还多，具体的使用，可以参照上面的链接里的文档，下面只是说下，如何来解决上述的问题，很明显，我们需要的是，分页组件能够重置当前的页码数，方便我们在重新请求分类列表数据的情况下，都能够重置成最开始的情况，也就是默认第一页的数据，因此，需要这个组件，能够拥有一个改变这个变量的props，那么，仔细阅读文档，会发现，下面这段话：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181220/2.png?raw=true\"></p>\n<p>是的，v-model这个属性绑定，经过我的简单测试，就是设置组件当前的页码数，因此一切问题迎刃而解了，我们只需要在改变左侧分类栏目的点击事件中，调用一下this.page = 1，将组件内置的page页数给重置回去，就可以了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>来做个简单的总结，如果场景里需要的仅仅是一个数据接口回来数据的列表展示，那么使用v-page是完全没有问题的，但是如果场景开始变得复杂，需要根据不同的id去获取不同类型的列表数据，那么我们就需要考虑组件的完备性和可扩展性了，那么还是推荐使用vuejs-paginate这个组件。   </p>\n<p>另外，v-page里的样式，不支持外联props扩展，因此，一般在项目里需要做重写，尽可能高的还原ui设计。而vuejs-pagination这个组件，支持props传入className的值，允许我们进行自定义样式的设置，这一点做的还是很到位的。    </p>\n<p>前几天，在知乎上看到一个评论，说业务远远没有技术重要，这种言论还是过于偏激了。因为单单从前端方面来说，其实前端还是偏向于业务场景的实现的，是客户和需求最直接的接收者，而技术，只是一种手段，一种达成业务，完善业务，扩展业务的手段，说到业务和技术，其实缺一不可，不可脱离技术谈业务，不然会是空谈，不切实际的。也不能脱离业务谈技术，不然也只能是纸上谈兵，并没有可用之处。<br>只有二者很好的结合，才能给所在的公司创造价值，才能带来更多的利益。不过技术还是很单纯的，活到老，学到老，共勉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在新的项目里，使用了vue全家桶来进行开发，之前公司的前端技术栈基本就是jq，这次的新项目是个新闻资讯网站，用vue来上手开发，应该不难，就当是个入门级的练手项目。</p>\n<p>当然，第一次的开发过程，总是会遇到各种各样的问题，今天要跟大家分享的是一个很常见的功能，就是列表的分页。既然是资讯网，那么很多场景下面，都会需要用到分页，而PC端，基本就是分页按钮式的交互，移动端则是上拉下拉加载刷新的交互。由于我负责的是pc端的实现，因此来分享下，PC端分页的心得。</p>\n<p>一般来说，像前端分页这种功能，在网上都会有大量的轮子可以使用，但是良莠不齐，需要细心分辨，一开始，我选用的分页组件是基于vue的<a href=\"https://github.com/TerryZ/v-page\">v-page</a>，具体的使用，可以根据它的<a href=\"https://terryz.gitee.io/vue/#/page\">文档</a>来按步骤完成，虽然这个分页控件star数不多，但我实际使用起来，还是感觉非常方便的，只需要传入相应的props，就可以完成正常的分页数据的交互，而且是按页加载的。</p>\n<p>如果，一切都像上面用的那么顺利，那我现在就不应该再继续往下分享了，大功告成很嗨皮啊，但是，有些时候，项目的复杂度，是不能单单靠这些单薄的轮子可以支撑的，在我自以为完成功能之后的几天，测试就打过来了一个bug，说是分页数据会乱掉，当时我是不太信的，后来run了一下项目，检查了下，发现问题是这样的：</p>\n<p>首先，我们这个资讯网项目，有两种不同的分页情况：</p>\n<ul>\n<li><p>类似列表页的这种，全局的接口请求只有唯一一个，因此数据接口是单一的</p>\n</li>\n<li><p>类似分类列表的这种，如下图，它是需要根据左侧的分类id去分别查询相应的列表信息，因此，数据接口是多个的，而且不固定，当时考虑到代码的简洁性，肯定全局只能用一个分页组件，然后，根据不同的接口回来的数据，去更新信息列表以及分页组件。</p>\n</li>\n</ul>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181220/1.png?raw=true\"></p>\n<p>测试所发现的问题是这样的，问题出现在第二种情况的页面里，也就是存在多个数据接口动态获取列表数据的情况：</p>\n<p>首先，假如，我当前的分类下面，商品数量超过一页10条的数据，当我点击第二页的时候，此时展示的是当前分类的第二页的数据，这是没毛病的，但是然后当我再切换左侧的分类，那么，应该重新去获取另一个分类的数据，而且是要按照页码默认是第一页去取，这一步也没毛病，因为我在改变分类的事件的时候，接口调用的是按照第一页的去取，因此展示的也是第一页的数据。但是问题来了，如果这个时候，我再点一下上一页这个按钮，你会发现，神奇的事情是，数据请求了，竟然，而且是第一页的数据。而且，如果第一次的数据多，你点了3,4,5甚至更多的页码，那么再按照之前的操作，跳到一个分类列表数据很少的分页下，点击上一页，你会发现，数据请求了，但是没有数据。简单思考了下，查了下请求，发现，如果上一次请求的是第5页的信息，那么这一顿操作之后，第二次的请求，则是第4页的信息，然而，当前分类下并没有第4页的信息，这才是最重要的问题所在，数据混乱的根源，就在这里，当前的page被组件记住了，而且，我查看了下api，并没有可以重置当前page页码信息的props，基本上可以说，这个组件，是没办法满足当前需求的，那么继续换，反正<a href=\"https://github.com/vuejs/awesome-vue\">vue官方资源</a>也有很多其他类似的分页插件可以使用。</p>\n<p>那么我又花了半天的时间，去查看其他的分页组件的文档，终于物色到了一款，并且试了之后，刚好可以满足当前需求的组件，就是<a href=\"https://github.com/lokyoung/vuejs-paginate\">vuejs-paginate</a></p>\n<p>这个文档，写的还是很详细的，毕竟star数417 是v-page的十倍还多，具体的使用，可以参照上面的链接里的文档，下面只是说下，如何来解决上述的问题，很明显，我们需要的是，分页组件能够重置当前的页码数，方便我们在重新请求分类列表数据的情况下，都能够重置成最开始的情况，也就是默认第一页的数据，因此，需要这个组件，能够拥有一个改变这个变量的props，那么，仔细阅读文档，会发现，下面这段话：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181220/2.png?raw=true\"></p>\n<p>是的，v-model这个属性绑定，经过我的简单测试，就是设置组件当前的页码数，因此一切问题迎刃而解了，我们只需要在改变左侧分类栏目的点击事件中，调用一下this.page = 1，将组件内置的page页数给重置回去，就可以了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>来做个简单的总结，如果场景里需要的仅仅是一个数据接口回来数据的列表展示，那么使用v-page是完全没有问题的，但是如果场景开始变得复杂，需要根据不同的id去获取不同类型的列表数据，那么我们就需要考虑组件的完备性和可扩展性了，那么还是推荐使用vuejs-paginate这个组件。   </p>\n<p>另外，v-page里的样式，不支持外联props扩展，因此，一般在项目里需要做重写，尽可能高的还原ui设计。而vuejs-pagination这个组件，支持props传入className的值，允许我们进行自定义样式的设置，这一点做的还是很到位的。    </p>\n<p>前几天，在知乎上看到一个评论，说业务远远没有技术重要，这种言论还是过于偏激了。因为单单从前端方面来说，其实前端还是偏向于业务场景的实现的，是客户和需求最直接的接收者，而技术，只是一种手段，一种达成业务，完善业务，扩展业务的手段，说到业务和技术，其实缺一不可，不可脱离技术谈业务，不然会是空谈，不切实际的。也不能脱离业务谈技术，不然也只能是纸上谈兵，并没有可用之处。<br>只有二者很好的结合，才能给所在的公司创造价值，才能带来更多的利益。不过技术还是很单纯的，活到老，学到老，共勉。</p>\n"},{"title":"vue项目总结","date":"2019-01-31T13:38:42.000Z","_content":"\n\n最近刚完成第一个vue的实际业务项目，这里抽出一些时间，来对做这个项目的时候的一些经验和感悟，以及需要注意的地方，做个总结。\n\n## 一、结合设计需求，完成组件的编写和复用\n\n举个例子，比方说，下面这张图是资讯网首页的导航栏分类的交互动图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/2.gif?raw=true)\n\n而下面这张，是旅游风光页面下面的导航栏分类的交互动图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/1.gif?raw=true)\n\n可以看到，二者的样式布局，以及交互，基本是相同的，唯一的差别就是，旅游风光页面，多了一项交互，也就是鼠标移到某个栏目上的时候，需要在下方显示其对应的栏目列表，就在组件下方展示。\n\n思路是这样的，当时在做的过程中，因为为了节省时间，达到组件最大化的复用原则，因此将导航栏效果作为单独的一个组件来开发，而另一个需要在下方展示对应列表的容器，是与导航组件同级的：\n\n首页的组件，是这样的，传入一个数据列表props，用来进行数据展示\n```\n  <Blinds :blindsList=\"blindsList\" />\n\n```\n\n而旅游风光页面的组件是这样的,多传了两个props，isBlinds用来给组件内部判断，是否是需要展示字列表的字段，而getActiveIndex这个是用来让子组件给父组件emit事件使用的，也就是，监听子组件当前鼠标移到哪一个元素的上面，记住index，然后，传给父组件，根据index去显示数据里对应的列表\n\n```\n<Blinds ftitle=\"栾川风光\" :blindsList=\"blindsList\" :isBlinds=\"isBlinds\" @getActiveIndex=\"changeIndex\"/>\n```\n\n其实一般来说，组件的复用基于props传参，为什么这么说呢，很多时候，实际情况里没有完全一模一样的模块，多少都会有些区别，我们需要抽离出这些区别，通过外部props来控制它们的表现形式，从而达到复用而多态的方式，比方说，这个项目里，光是简单的title标题，就有5种：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/3.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/4.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/5.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/6.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/7.png?raw=true)\n\n从上面的几张图里可以发现，其实都比较类似，比如都有标题这个字段，样式也大多类似，这样就足够了，其他的不同的地方，交给props来控制，比如什么时候展示更多，什么时候，有下面的绿条，什么时候又会有哪些特殊的样式。\n\nprops给我们带来了更多的灵活性，我们可以方便的控制住组件的表现形式和交互效果，这也是vue组件使用的一个较为核心的知识。   \n\n不过除了props来动态控制，我们还可以使用slot插槽的形式来完成以上多类似组件的开发，比方说上面的更多，绿条，以及其他的特殊样式，我们可以通过slot动态插入不同的样式元素，来做到动态的展示。也是最大化复用组件的一种有效方式。\n\n\n## 代码层级的优化\n\n### 不建议v-for 和 v-if 在同一个标签里使用：\n\n```\n<li v-for=\"item in list\" v-if=\"item.active===0\"></li>\n```\n\n比方说，上面的这句代码，实际上，vue会在渲染的时候，才去进行判断，这样会造成一些性能损耗，特别是在大量数据的时候，我们需要做的优化就是，尽量将数据处理提前，而不是放入渲染阶段来进行，比如我们可以在拿到list数据中之后，可以通过computed属性来进行数据过滤：\n\n```\ncomputed:{\n  activeList(){\n    return this.list.filter((item)=>item.active === 0)\n  }\n}\n```\n\n之后我们直接使用activeList来渲染列表就可以了：\n\n```\n<li v-for=\"item in activeList\"></li>\n```\n\n### v-if和v-show的使用场景\n\n二者之间的区别是，v-if是懒加载，只有值为true的时候，才会进行渲染加载，而为false的时候，元素根本不存在，就不会占用布局空间。而v-show无论状态是true还是false，都会进行渲染，并且占据空间，也就是说，我们是可以获取到元素的。\n\n如何正确的分场景来使用它们呢？\n\n举个例子，比方说，我们需要通过登录状态来显示对应的展示：\n\n```\n<span v-if=\"!isLogin\">请先登录</span>\n<span v-else>你好，XXX</span>\n```\n比如上面的代码，如果用户没登录，我们需要展示请先登录，如果用户登录了，我们需要展示的是你好，XXX，那么其实当前的场景，是有序性的，也就是说，不可逆，要么就登录，要么就没登录，不会出现两种状态频繁切换，因此，使用v-if来一步到位比较合适。但是下面这种情况：\n\n```\n<dialog v-show=\"isShow\"></dialog>\n```\n弹窗是很常见的一种交互方式，我们知道，用户点击的时候，弹出，再点击相应区域或者取消按钮的时候，再隐藏，其实这是属于状态频繁切换的场景，因此，v-show比较适合。\n\n另外呢，我们在v-if或者v-show的表示布尔值的表达式不适合特别长的，至少内联不能写成如下这样：\n\n```\nv-if=\"isShow && isAdmin && (a || b)\"\n```\n这样的复杂判断，其实可以在computed计算属性里面写个方法，来return这个表达式。如果其他地方要复用这个判断逻辑，那么只需要使用这个computed属性就可以了:\n\n```\n\n<span v-if=\"isAdmin\">请先登录</span>\n\ncomputed:{\n  isAdmin(){\n    return this.isShow && this.isAdmin && (this.a || this.b)\n  }\n}\n\n```\n\n### 路由优化懒加载\n\n懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。在单页应用中，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。\n\n```\nconst router = new Router({\n      routes: [{\n          path: '/',\n          name: 'home',\n          component: Home\n        },\n        {\n          path: '/guide',\n          name: 'guide',\n          component: () => import('./views/guide-tour.vue')  /* webpackChunkName: \"guide-tour\" */ \n        },\n      ]\n})\n```\n\n比方说上面的代码，就是项目里router.js的部分代码，可以看到，我们的home组件，使用的是正常加载，也就是，页面初次渲染就加载，而guide语音导览页面的写法则是当路由指向guide的时候，才会加载的异步写法。我们希望的是，访问哪个页面，再去加载，从而减轻首次加载的压力，这样我们再看下，实际的请求，也是按照我们的期待一样，分别跳转对应的页面，切换路由的时候，才去加载对应的脚本片段：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/8.png?raw=true)\n\n\n### keep-alive的使用\n\nvue2.0提供了一个keep-alive组件，用来缓存组件,避免多次加载相应的组件,减少性能消耗:\n\n```\n<keep-alive>\n<component>\n  <!-- 组件将被缓存 -->\n</component>\n</keep-alive>\n```\n\n我们实际需求里面，并不是所有的组件都需要进行缓存，有的需要即时更新的，那么我们就需要有选择性的进行缓存操作，router中有个meta配置，我们可以在template里这么配置：\n\n```\n// 这是目前用的比较多的方式\n<keep-alive>\n    <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n也就是，我们判断meta属性的boolean值，来进行选择性的渲染，keep-alive标签是不占据实际空间的，因此上面的方式是实现选择性缓存的较好方式。那么我们的router.js里应该这么写：\n\n```\nroutes: [\n    { path: '/', redirect: '/index',  component: Index, meta: { keepAlive: true }},\n    {\n      path: '/common',\n      component: TestParent,\n      children: [\n        { path: '/test2', component: Test2, meta: { keepAlive: true } } \n      ]\n    }\n    ....\n    // 表示index和test2都使用keep-alive\n```\n\n通过设置meta.keepAlive为true，来让组件进行缓存，当然如果没有该项配置的，则组件是不进行缓存的。\n\n\n\n","source":"_posts/vue项目总结.md","raw":"---\ntitle: vue项目总结\ndate: 2019-01-31 21:38:42\ntags:\n  - vue\ncategories:\n  - vue\n---\n\n\n最近刚完成第一个vue的实际业务项目，这里抽出一些时间，来对做这个项目的时候的一些经验和感悟，以及需要注意的地方，做个总结。\n\n## 一、结合设计需求，完成组件的编写和复用\n\n举个例子，比方说，下面这张图是资讯网首页的导航栏分类的交互动图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/2.gif?raw=true)\n\n而下面这张，是旅游风光页面下面的导航栏分类的交互动图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/1.gif?raw=true)\n\n可以看到，二者的样式布局，以及交互，基本是相同的，唯一的差别就是，旅游风光页面，多了一项交互，也就是鼠标移到某个栏目上的时候，需要在下方显示其对应的栏目列表，就在组件下方展示。\n\n思路是这样的，当时在做的过程中，因为为了节省时间，达到组件最大化的复用原则，因此将导航栏效果作为单独的一个组件来开发，而另一个需要在下方展示对应列表的容器，是与导航组件同级的：\n\n首页的组件，是这样的，传入一个数据列表props，用来进行数据展示\n```\n  <Blinds :blindsList=\"blindsList\" />\n\n```\n\n而旅游风光页面的组件是这样的,多传了两个props，isBlinds用来给组件内部判断，是否是需要展示字列表的字段，而getActiveIndex这个是用来让子组件给父组件emit事件使用的，也就是，监听子组件当前鼠标移到哪一个元素的上面，记住index，然后，传给父组件，根据index去显示数据里对应的列表\n\n```\n<Blinds ftitle=\"栾川风光\" :blindsList=\"blindsList\" :isBlinds=\"isBlinds\" @getActiveIndex=\"changeIndex\"/>\n```\n\n其实一般来说，组件的复用基于props传参，为什么这么说呢，很多时候，实际情况里没有完全一模一样的模块，多少都会有些区别，我们需要抽离出这些区别，通过外部props来控制它们的表现形式，从而达到复用而多态的方式，比方说，这个项目里，光是简单的title标题，就有5种：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/3.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/4.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/5.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/6.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/7.png?raw=true)\n\n从上面的几张图里可以发现，其实都比较类似，比如都有标题这个字段，样式也大多类似，这样就足够了，其他的不同的地方，交给props来控制，比如什么时候展示更多，什么时候，有下面的绿条，什么时候又会有哪些特殊的样式。\n\nprops给我们带来了更多的灵活性，我们可以方便的控制住组件的表现形式和交互效果，这也是vue组件使用的一个较为核心的知识。   \n\n不过除了props来动态控制，我们还可以使用slot插槽的形式来完成以上多类似组件的开发，比方说上面的更多，绿条，以及其他的特殊样式，我们可以通过slot动态插入不同的样式元素，来做到动态的展示。也是最大化复用组件的一种有效方式。\n\n\n## 代码层级的优化\n\n### 不建议v-for 和 v-if 在同一个标签里使用：\n\n```\n<li v-for=\"item in list\" v-if=\"item.active===0\"></li>\n```\n\n比方说，上面的这句代码，实际上，vue会在渲染的时候，才去进行判断，这样会造成一些性能损耗，特别是在大量数据的时候，我们需要做的优化就是，尽量将数据处理提前，而不是放入渲染阶段来进行，比如我们可以在拿到list数据中之后，可以通过computed属性来进行数据过滤：\n\n```\ncomputed:{\n  activeList(){\n    return this.list.filter((item)=>item.active === 0)\n  }\n}\n```\n\n之后我们直接使用activeList来渲染列表就可以了：\n\n```\n<li v-for=\"item in activeList\"></li>\n```\n\n### v-if和v-show的使用场景\n\n二者之间的区别是，v-if是懒加载，只有值为true的时候，才会进行渲染加载，而为false的时候，元素根本不存在，就不会占用布局空间。而v-show无论状态是true还是false，都会进行渲染，并且占据空间，也就是说，我们是可以获取到元素的。\n\n如何正确的分场景来使用它们呢？\n\n举个例子，比方说，我们需要通过登录状态来显示对应的展示：\n\n```\n<span v-if=\"!isLogin\">请先登录</span>\n<span v-else>你好，XXX</span>\n```\n比如上面的代码，如果用户没登录，我们需要展示请先登录，如果用户登录了，我们需要展示的是你好，XXX，那么其实当前的场景，是有序性的，也就是说，不可逆，要么就登录，要么就没登录，不会出现两种状态频繁切换，因此，使用v-if来一步到位比较合适。但是下面这种情况：\n\n```\n<dialog v-show=\"isShow\"></dialog>\n```\n弹窗是很常见的一种交互方式，我们知道，用户点击的时候，弹出，再点击相应区域或者取消按钮的时候，再隐藏，其实这是属于状态频繁切换的场景，因此，v-show比较适合。\n\n另外呢，我们在v-if或者v-show的表示布尔值的表达式不适合特别长的，至少内联不能写成如下这样：\n\n```\nv-if=\"isShow && isAdmin && (a || b)\"\n```\n这样的复杂判断，其实可以在computed计算属性里面写个方法，来return这个表达式。如果其他地方要复用这个判断逻辑，那么只需要使用这个computed属性就可以了:\n\n```\n\n<span v-if=\"isAdmin\">请先登录</span>\n\ncomputed:{\n  isAdmin(){\n    return this.isShow && this.isAdmin && (this.a || this.b)\n  }\n}\n\n```\n\n### 路由优化懒加载\n\n懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。在单页应用中，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。\n\n```\nconst router = new Router({\n      routes: [{\n          path: '/',\n          name: 'home',\n          component: Home\n        },\n        {\n          path: '/guide',\n          name: 'guide',\n          component: () => import('./views/guide-tour.vue')  /* webpackChunkName: \"guide-tour\" */ \n        },\n      ]\n})\n```\n\n比方说上面的代码，就是项目里router.js的部分代码，可以看到，我们的home组件，使用的是正常加载，也就是，页面初次渲染就加载，而guide语音导览页面的写法则是当路由指向guide的时候，才会加载的异步写法。我们希望的是，访问哪个页面，再去加载，从而减轻首次加载的压力，这样我们再看下，实际的请求，也是按照我们的期待一样，分别跳转对应的页面，切换路由的时候，才去加载对应的脚本片段：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190130/8.png?raw=true)\n\n\n### keep-alive的使用\n\nvue2.0提供了一个keep-alive组件，用来缓存组件,避免多次加载相应的组件,减少性能消耗:\n\n```\n<keep-alive>\n<component>\n  <!-- 组件将被缓存 -->\n</component>\n</keep-alive>\n```\n\n我们实际需求里面，并不是所有的组件都需要进行缓存，有的需要即时更新的，那么我们就需要有选择性的进行缓存操作，router中有个meta配置，我们可以在template里这么配置：\n\n```\n// 这是目前用的比较多的方式\n<keep-alive>\n    <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n也就是，我们判断meta属性的boolean值，来进行选择性的渲染，keep-alive标签是不占据实际空间的，因此上面的方式是实现选择性缓存的较好方式。那么我们的router.js里应该这么写：\n\n```\nroutes: [\n    { path: '/', redirect: '/index',  component: Index, meta: { keepAlive: true }},\n    {\n      path: '/common',\n      component: TestParent,\n      children: [\n        { path: '/test2', component: Test2, meta: { keepAlive: true } } \n      ]\n    }\n    ....\n    // 表示index和test2都使用keep-alive\n```\n\n通过设置meta.keepAlive为true，来让组件进行缓存，当然如果没有该项配置的，则组件是不进行缓存的。\n\n\n\n","slug":"vue项目总结","published":1,"updated":"2019-02-08T02:08:23.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm7001wmsvi36m535nk","content":"<p>最近刚完成第一个vue的实际业务项目，这里抽出一些时间，来对做这个项目的时候的一些经验和感悟，以及需要注意的地方，做个总结。</p>\n<h2 id=\"一、结合设计需求，完成组件的编写和复用\"><a href=\"#一、结合设计需求，完成组件的编写和复用\" class=\"headerlink\" title=\"一、结合设计需求，完成组件的编写和复用\"></a>一、结合设计需求，完成组件的编写和复用</h2><p>举个例子，比方说，下面这张图是资讯网首页的导航栏分类的交互动图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/2.gif?raw=true\"></p>\n<p>而下面这张，是旅游风光页面下面的导航栏分类的交互动图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/1.gif?raw=true\"></p>\n<p>可以看到，二者的样式布局，以及交互，基本是相同的，唯一的差别就是，旅游风光页面，多了一项交互，也就是鼠标移到某个栏目上的时候，需要在下方显示其对应的栏目列表，就在组件下方展示。</p>\n<p>思路是这样的，当时在做的过程中，因为为了节省时间，达到组件最大化的复用原则，因此将导航栏效果作为单独的一个组件来开发，而另一个需要在下方展示对应列表的容器，是与导航组件同级的：</p>\n<p>首页的组件，是这样的，传入一个数据列表props，用来进行数据展示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Blinds :blindsList&#x3D;&quot;blindsList&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>而旅游风光页面的组件是这样的,多传了两个props，isBlinds用来给组件内部判断，是否是需要展示字列表的字段，而getActiveIndex这个是用来让子组件给父组件emit事件使用的，也就是，监听子组件当前鼠标移到哪一个元素的上面，记住index，然后，传给父组件，根据index去显示数据里对应的列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Blinds ftitle&#x3D;&quot;栾川风光&quot; :blindsList&#x3D;&quot;blindsList&quot; :isBlinds&#x3D;&quot;isBlinds&quot; @getActiveIndex&#x3D;&quot;changeIndex&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>其实一般来说，组件的复用基于props传参，为什么这么说呢，很多时候，实际情况里没有完全一模一样的模块，多少都会有些区别，我们需要抽离出这些区别，通过外部props来控制它们的表现形式，从而达到复用而多态的方式，比方说，这个项目里，光是简单的title标题，就有5种：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/3.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/4.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/5.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/6.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/7.png?raw=true\"></p>\n<p>从上面的几张图里可以发现，其实都比较类似，比如都有标题这个字段，样式也大多类似，这样就足够了，其他的不同的地方，交给props来控制，比如什么时候展示更多，什么时候，有下面的绿条，什么时候又会有哪些特殊的样式。</p>\n<p>props给我们带来了更多的灵活性，我们可以方便的控制住组件的表现形式和交互效果，这也是vue组件使用的一个较为核心的知识。   </p>\n<p>不过除了props来动态控制，我们还可以使用slot插槽的形式来完成以上多类似组件的开发，比方说上面的更多，绿条，以及其他的特殊样式，我们可以通过slot动态插入不同的样式元素，来做到动态的展示。也是最大化复用组件的一种有效方式。</p>\n<h2 id=\"代码层级的优化\"><a href=\"#代码层级的优化\" class=\"headerlink\" title=\"代码层级的优化\"></a>代码层级的优化</h2><h3 id=\"不建议v-for-和-v-if-在同一个标签里使用：\"><a href=\"#不建议v-for-和-v-if-在同一个标签里使用：\" class=\"headerlink\" title=\"不建议v-for 和 v-if 在同一个标签里使用：\"></a>不建议v-for 和 v-if 在同一个标签里使用：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for&#x3D;&quot;item in list&quot; v-if&#x3D;&quot;item.active&#x3D;&#x3D;&#x3D;0&quot;&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>\n<p>比方说，上面的这句代码，实际上，vue会在渲染的时候，才去进行判断，这样会造成一些性能损耗，特别是在大量数据的时候，我们需要做的优化就是，尽量将数据处理提前，而不是放入渲染阶段来进行，比如我们可以在拿到list数据中之后，可以通过computed属性来进行数据过滤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">  activeList()&#123;</span><br><span class=\"line\">    return this.list.filter((item)&#x3D;&gt;item.active &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们直接使用activeList来渲染列表就可以了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for&#x3D;&quot;item in activeList&quot;&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"v-if和v-show的使用场景\"><a href=\"#v-if和v-show的使用场景\" class=\"headerlink\" title=\"v-if和v-show的使用场景\"></a>v-if和v-show的使用场景</h3><p>二者之间的区别是，v-if是懒加载，只有值为true的时候，才会进行渲染加载，而为false的时候，元素根本不存在，就不会占用布局空间。而v-show无论状态是true还是false，都会进行渲染，并且占据空间，也就是说，我们是可以获取到元素的。</p>\n<p>如何正确的分场景来使用它们呢？</p>\n<p>举个例子，比方说，我们需要通过登录状态来显示对应的展示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span v-if&#x3D;&quot;!isLogin&quot;&gt;请先登录&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span v-else&gt;你好，XXX&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n<p>比如上面的代码，如果用户没登录，我们需要展示请先登录，如果用户登录了，我们需要展示的是你好，XXX，那么其实当前的场景，是有序性的，也就是说，不可逆，要么就登录，要么就没登录，不会出现两种状态频繁切换，因此，使用v-if来一步到位比较合适。但是下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;dialog&gt;</span><br></pre></td></tr></table></figure>\n<p>弹窗是很常见的一种交互方式，我们知道，用户点击的时候，弹出，再点击相应区域或者取消按钮的时候，再隐藏，其实这是属于状态频繁切换的场景，因此，v-show比较适合。</p>\n<p>另外呢，我们在v-if或者v-show的表示布尔值的表达式不适合特别长的，至少内联不能写成如下这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-if&#x3D;&quot;isShow &amp;&amp; isAdmin &amp;&amp; (a || b)&quot;</span><br></pre></td></tr></table></figure>\n<p>这样的复杂判断，其实可以在computed计算属性里面写个方法，来return这个表达式。如果其他地方要复用这个判断逻辑，那么只需要使用这个computed属性就可以了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;span v-if&#x3D;&quot;isAdmin&quot;&gt;请先登录&lt;&#x2F;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">  isAdmin()&#123;</span><br><span class=\"line\">    return this.isShow &amp;&amp; this.isAdmin &amp;&amp; (this.a || this.b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"路由优化懒加载\"><a href=\"#路由优化懒加载\" class=\"headerlink\" title=\"路由优化懒加载\"></a>路由优化懒加载</h3><p>懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。在单页应用中，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router &#x3D; new Router(&#123;</span><br><span class=\"line\">      routes: [&#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">          name: &#39;home&#39;,</span><br><span class=\"line\">          component: Home</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;guide&#39;,</span><br><span class=\"line\">          name: &#39;guide&#39;,</span><br><span class=\"line\">          component: () &#x3D;&gt; import(&#39;.&#x2F;views&#x2F;guide-tour.vue&#39;)  &#x2F;* webpackChunkName: &quot;guide-tour&quot; *&#x2F; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>比方说上面的代码，就是项目里router.js的部分代码，可以看到，我们的home组件，使用的是正常加载，也就是，页面初次渲染就加载，而guide语音导览页面的写法则是当路由指向guide的时候，才会加载的异步写法。我们希望的是，访问哪个页面，再去加载，从而减轻首次加载的压力，这样我们再看下，实际的请求，也是按照我们的期待一样，分别跳转对应的页面，切换路由的时候，才去加载对应的脚本片段：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/8.png?raw=true\"></p>\n<h3 id=\"keep-alive的使用\"><a href=\"#keep-alive的使用\" class=\"headerlink\" title=\"keep-alive的使用\"></a>keep-alive的使用</h3><p>vue2.0提供了一个keep-alive组件，用来缓存组件,避免多次加载相应的组件,减少性能消耗:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">&lt;component&gt;</span><br><span class=\"line\">  &lt;!-- 组件将被缓存 --&gt;</span><br><span class=\"line\">&lt;&#x2F;component&gt;</span><br><span class=\"line\">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<p>我们实际需求里面，并不是所有的组件都需要进行缓存，有的需要即时更新的，那么我们就需要有选择性的进行缓存操作，router中有个meta配置，我们可以在template里这么配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 这是目前用的比较多的方式</span><br><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">    &lt;router-view v-if&#x3D;&quot;$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;keep-alive&gt;</span><br><span class=\"line\">&lt;router-view v-if&#x3D;&quot;!$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>也就是，我们判断meta属性的boolean值，来进行选择性的渲染，keep-alive标签是不占据实际空间的，因此上面的方式是实现选择性缓存的较好方式。那么我们的router.js里应该这么写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;index&#39;,  component: Index, meta: &#123; keepAlive: true &#125;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;common&#39;,</span><br><span class=\"line\">      component: TestParent,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;test2&#39;, component: Test2, meta: &#123; keepAlive: true &#125; &#125; </span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    &#x2F;&#x2F; 表示index和test2都使用keep-alive</span><br></pre></td></tr></table></figure>\n<p>通过设置meta.keepAlive为true，来让组件进行缓存，当然如果没有该项配置的，则组件是不进行缓存的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近刚完成第一个vue的实际业务项目，这里抽出一些时间，来对做这个项目的时候的一些经验和感悟，以及需要注意的地方，做个总结。</p>\n<h2 id=\"一、结合设计需求，完成组件的编写和复用\"><a href=\"#一、结合设计需求，完成组件的编写和复用\" class=\"headerlink\" title=\"一、结合设计需求，完成组件的编写和复用\"></a>一、结合设计需求，完成组件的编写和复用</h2><p>举个例子，比方说，下面这张图是资讯网首页的导航栏分类的交互动图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/2.gif?raw=true\"></p>\n<p>而下面这张，是旅游风光页面下面的导航栏分类的交互动图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/1.gif?raw=true\"></p>\n<p>可以看到，二者的样式布局，以及交互，基本是相同的，唯一的差别就是，旅游风光页面，多了一项交互，也就是鼠标移到某个栏目上的时候，需要在下方显示其对应的栏目列表，就在组件下方展示。</p>\n<p>思路是这样的，当时在做的过程中，因为为了节省时间，达到组件最大化的复用原则，因此将导航栏效果作为单独的一个组件来开发，而另一个需要在下方展示对应列表的容器，是与导航组件同级的：</p>\n<p>首页的组件，是这样的，传入一个数据列表props，用来进行数据展示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Blinds :blindsList&#x3D;&quot;blindsList&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>而旅游风光页面的组件是这样的,多传了两个props，isBlinds用来给组件内部判断，是否是需要展示字列表的字段，而getActiveIndex这个是用来让子组件给父组件emit事件使用的，也就是，监听子组件当前鼠标移到哪一个元素的上面，记住index，然后，传给父组件，根据index去显示数据里对应的列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Blinds ftitle&#x3D;&quot;栾川风光&quot; :blindsList&#x3D;&quot;blindsList&quot; :isBlinds&#x3D;&quot;isBlinds&quot; @getActiveIndex&#x3D;&quot;changeIndex&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>其实一般来说，组件的复用基于props传参，为什么这么说呢，很多时候，实际情况里没有完全一模一样的模块，多少都会有些区别，我们需要抽离出这些区别，通过外部props来控制它们的表现形式，从而达到复用而多态的方式，比方说，这个项目里，光是简单的title标题，就有5种：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/3.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/4.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/5.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/6.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/7.png?raw=true\"></p>\n<p>从上面的几张图里可以发现，其实都比较类似，比如都有标题这个字段，样式也大多类似，这样就足够了，其他的不同的地方，交给props来控制，比如什么时候展示更多，什么时候，有下面的绿条，什么时候又会有哪些特殊的样式。</p>\n<p>props给我们带来了更多的灵活性，我们可以方便的控制住组件的表现形式和交互效果，这也是vue组件使用的一个较为核心的知识。   </p>\n<p>不过除了props来动态控制，我们还可以使用slot插槽的形式来完成以上多类似组件的开发，比方说上面的更多，绿条，以及其他的特殊样式，我们可以通过slot动态插入不同的样式元素，来做到动态的展示。也是最大化复用组件的一种有效方式。</p>\n<h2 id=\"代码层级的优化\"><a href=\"#代码层级的优化\" class=\"headerlink\" title=\"代码层级的优化\"></a>代码层级的优化</h2><h3 id=\"不建议v-for-和-v-if-在同一个标签里使用：\"><a href=\"#不建议v-for-和-v-if-在同一个标签里使用：\" class=\"headerlink\" title=\"不建议v-for 和 v-if 在同一个标签里使用：\"></a>不建议v-for 和 v-if 在同一个标签里使用：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for&#x3D;&quot;item in list&quot; v-if&#x3D;&quot;item.active&#x3D;&#x3D;&#x3D;0&quot;&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>\n<p>比方说，上面的这句代码，实际上，vue会在渲染的时候，才去进行判断，这样会造成一些性能损耗，特别是在大量数据的时候，我们需要做的优化就是，尽量将数据处理提前，而不是放入渲染阶段来进行，比如我们可以在拿到list数据中之后，可以通过computed属性来进行数据过滤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">  activeList()&#123;</span><br><span class=\"line\">    return this.list.filter((item)&#x3D;&gt;item.active &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们直接使用activeList来渲染列表就可以了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for&#x3D;&quot;item in activeList&quot;&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"v-if和v-show的使用场景\"><a href=\"#v-if和v-show的使用场景\" class=\"headerlink\" title=\"v-if和v-show的使用场景\"></a>v-if和v-show的使用场景</h3><p>二者之间的区别是，v-if是懒加载，只有值为true的时候，才会进行渲染加载，而为false的时候，元素根本不存在，就不会占用布局空间。而v-show无论状态是true还是false，都会进行渲染，并且占据空间，也就是说，我们是可以获取到元素的。</p>\n<p>如何正确的分场景来使用它们呢？</p>\n<p>举个例子，比方说，我们需要通过登录状态来显示对应的展示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span v-if&#x3D;&quot;!isLogin&quot;&gt;请先登录&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span v-else&gt;你好，XXX&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n<p>比如上面的代码，如果用户没登录，我们需要展示请先登录，如果用户登录了，我们需要展示的是你好，XXX，那么其实当前的场景，是有序性的，也就是说，不可逆，要么就登录，要么就没登录，不会出现两种状态频繁切换，因此，使用v-if来一步到位比较合适。但是下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;dialog&gt;</span><br></pre></td></tr></table></figure>\n<p>弹窗是很常见的一种交互方式，我们知道，用户点击的时候，弹出，再点击相应区域或者取消按钮的时候，再隐藏，其实这是属于状态频繁切换的场景，因此，v-show比较适合。</p>\n<p>另外呢，我们在v-if或者v-show的表示布尔值的表达式不适合特别长的，至少内联不能写成如下这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-if&#x3D;&quot;isShow &amp;&amp; isAdmin &amp;&amp; (a || b)&quot;</span><br></pre></td></tr></table></figure>\n<p>这样的复杂判断，其实可以在computed计算属性里面写个方法，来return这个表达式。如果其他地方要复用这个判断逻辑，那么只需要使用这个computed属性就可以了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;span v-if&#x3D;&quot;isAdmin&quot;&gt;请先登录&lt;&#x2F;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">  isAdmin()&#123;</span><br><span class=\"line\">    return this.isShow &amp;&amp; this.isAdmin &amp;&amp; (this.a || this.b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"路由优化懒加载\"><a href=\"#路由优化懒加载\" class=\"headerlink\" title=\"路由优化懒加载\"></a>路由优化懒加载</h3><p>懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。在单页应用中，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router &#x3D; new Router(&#123;</span><br><span class=\"line\">      routes: [&#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">          name: &#39;home&#39;,</span><br><span class=\"line\">          component: Home</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;guide&#39;,</span><br><span class=\"line\">          name: &#39;guide&#39;,</span><br><span class=\"line\">          component: () &#x3D;&gt; import(&#39;.&#x2F;views&#x2F;guide-tour.vue&#39;)  &#x2F;* webpackChunkName: &quot;guide-tour&quot; *&#x2F; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>比方说上面的代码，就是项目里router.js的部分代码，可以看到，我们的home组件，使用的是正常加载，也就是，页面初次渲染就加载，而guide语音导览页面的写法则是当路由指向guide的时候，才会加载的异步写法。我们希望的是，访问哪个页面，再去加载，从而减轻首次加载的压力，这样我们再看下，实际的请求，也是按照我们的期待一样，分别跳转对应的页面，切换路由的时候，才去加载对应的脚本片段：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190130/8.png?raw=true\"></p>\n<h3 id=\"keep-alive的使用\"><a href=\"#keep-alive的使用\" class=\"headerlink\" title=\"keep-alive的使用\"></a>keep-alive的使用</h3><p>vue2.0提供了一个keep-alive组件，用来缓存组件,避免多次加载相应的组件,减少性能消耗:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">&lt;component&gt;</span><br><span class=\"line\">  &lt;!-- 组件将被缓存 --&gt;</span><br><span class=\"line\">&lt;&#x2F;component&gt;</span><br><span class=\"line\">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<p>我们实际需求里面，并不是所有的组件都需要进行缓存，有的需要即时更新的，那么我们就需要有选择性的进行缓存操作，router中有个meta配置，我们可以在template里这么配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 这是目前用的比较多的方式</span><br><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">    &lt;router-view v-if&#x3D;&quot;$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;keep-alive&gt;</span><br><span class=\"line\">&lt;router-view v-if&#x3D;&quot;!$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>也就是，我们判断meta属性的boolean值，来进行选择性的渲染，keep-alive标签是不占据实际空间的，因此上面的方式是实现选择性缓存的较好方式。那么我们的router.js里应该这么写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;index&#39;,  component: Index, meta: &#123; keepAlive: true &#125;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;common&#39;,</span><br><span class=\"line\">      component: TestParent,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;test2&#39;, component: Test2, meta: &#123; keepAlive: true &#125; &#125; </span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    &#x2F;&#x2F; 表示index和test2都使用keep-alive</span><br></pre></td></tr></table></figure>\n<p>通过设置meta.keepAlive为true，来让组件进行缓存，当然如果没有该项配置的，则组件是不进行缓存的。</p>\n"},{"title":"关于input的一些问题解决方法分享","date":"2018-05-22T01:38:54.000Z","_content":"\ninput框是我们接受来自用户的数据常用标签，在前端开发中，相信每个人都会用到这个标签，特别是在移动端H5页面的开发中，也会经常遇到一些问题，下面我将根据自己的开发过程中遇到的那些关于input的问题，在这里向大家集中分享一下，所对应的的解决方案。\n\n\n\n## 1、移动端底部input被弹出的键盘遮挡\ninput输入框是通过position:fixed一直放在页面底部，当点击input进行输入的时候，就会出现如下的图片情况\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180522/input%E8%A7%A3%E5%86%B3.jpg?raw=true)\n\n其实这个问题是我去年年后在一个微信H5项目里遇到的，当时公司的测试机，ios9的系统，出现的这个bug，但在新的ios系统里，貌似已经解决了这个bug，但是为了向下兼容以及防止其他机型也出现这样的问题，解决方法如下：\n\n```\n  Element.scrollIntoView()\n```\n\n顾名思义，该方法是让当前的元素滚动到浏览器窗口的可视区域内\n\n```javascript\ndocument.querySelector('#inputId').scrollIntoView();  //只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了\n ```\n\n\n## 2、控制input显隐密码\n这个就很简单了，只需要改变input的type属性就可以了：\n```javascript\n  //点击函数，获取dom，判断更改属性。\n    show(){\n        let input=document.getElementById(\"inputId\");  \n        if(input.type==\"password\"){ \n          input.type='text';\n        }else{\n          input.type='password';\n        } \n    }\n```\n\n\n## 3、textarea多行回车换行，显示的时候换行设置：\n这个问题是在今年5月做的上海的一个智慧旅游亭项目的时候，后台编辑相关酒店景点的时候，有用到textarea，原本在textarea里设置的多行回车换行，结果在前台显示的页面里，没有换行，查找了相关资料，解决方法如下：  \ncss属性：white-space\n```css\n  ele {\n    white-space:pre-wrap;\n  }\n```\n只要在显示内容的地方，将该属性设置为white-space:pre-line或者white-space:pre-wrap,多行文本就可以换行了。  \n\n上述内容就是我遇到的一些input问题的解决方式以及跟input相关的一些东西，如果有什么错误，欢迎指正！","source":"_posts/关于input的一些问题解决方法分享.md","raw":"---\ntitle: 关于input的一些问题解决方法分享\ndate: 2018-05-22 09:38:54\ntags:\n  - input\n  - bug\ncategories:\n  - js\n---\n\ninput框是我们接受来自用户的数据常用标签，在前端开发中，相信每个人都会用到这个标签，特别是在移动端H5页面的开发中，也会经常遇到一些问题，下面我将根据自己的开发过程中遇到的那些关于input的问题，在这里向大家集中分享一下，所对应的的解决方案。\n\n\n\n## 1、移动端底部input被弹出的键盘遮挡\ninput输入框是通过position:fixed一直放在页面底部，当点击input进行输入的时候，就会出现如下的图片情况\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180522/input%E8%A7%A3%E5%86%B3.jpg?raw=true)\n\n其实这个问题是我去年年后在一个微信H5项目里遇到的，当时公司的测试机，ios9的系统，出现的这个bug，但在新的ios系统里，貌似已经解决了这个bug，但是为了向下兼容以及防止其他机型也出现这样的问题，解决方法如下：\n\n```\n  Element.scrollIntoView()\n```\n\n顾名思义，该方法是让当前的元素滚动到浏览器窗口的可视区域内\n\n```javascript\ndocument.querySelector('#inputId').scrollIntoView();  //只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了\n ```\n\n\n## 2、控制input显隐密码\n这个就很简单了，只需要改变input的type属性就可以了：\n```javascript\n  //点击函数，获取dom，判断更改属性。\n    show(){\n        let input=document.getElementById(\"inputId\");  \n        if(input.type==\"password\"){ \n          input.type='text';\n        }else{\n          input.type='password';\n        } \n    }\n```\n\n\n## 3、textarea多行回车换行，显示的时候换行设置：\n这个问题是在今年5月做的上海的一个智慧旅游亭项目的时候，后台编辑相关酒店景点的时候，有用到textarea，原本在textarea里设置的多行回车换行，结果在前台显示的页面里，没有换行，查找了相关资料，解决方法如下：  \ncss属性：white-space\n```css\n  ele {\n    white-space:pre-wrap;\n  }\n```\n只要在显示内容的地方，将该属性设置为white-space:pre-line或者white-space:pre-wrap,多行文本就可以换行了。  \n\n上述内容就是我遇到的一些input问题的解决方式以及跟input相关的一些东西，如果有什么错误，欢迎指正！","slug":"关于input的一些问题解决方法分享","published":1,"updated":"2018-06-01T01:17:16.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm8001ymsvi6aj7bdo1","content":"<p>input框是我们接受来自用户的数据常用标签，在前端开发中，相信每个人都会用到这个标签，特别是在移动端H5页面的开发中，也会经常遇到一些问题，下面我将根据自己的开发过程中遇到的那些关于input的问题，在这里向大家集中分享一下，所对应的的解决方案。</p>\n<h2 id=\"1、移动端底部input被弹出的键盘遮挡\"><a href=\"#1、移动端底部input被弹出的键盘遮挡\" class=\"headerlink\" title=\"1、移动端底部input被弹出的键盘遮挡\"></a>1、移动端底部input被弹出的键盘遮挡</h2><p>input输入框是通过position:fixed一直放在页面底部，当点击input进行输入的时候，就会出现如下的图片情况<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180522/input%E8%A7%A3%E5%86%B3.jpg?raw=true\"></p>\n<p>其实这个问题是我去年年后在一个微信H5项目里遇到的，当时公司的测试机，ios9的系统，出现的这个bug，但在新的ios系统里，貌似已经解决了这个bug，但是为了向下兼容以及防止其他机型也出现这样的问题，解决方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element.scrollIntoView()</span><br></pre></td></tr></table></figure>\n<p>顾名思义，该方法是让当前的元素滚动到浏览器窗口的可视区域内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#inputId&#x27;</span>).scrollIntoView();  <span class=\"comment\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、控制input显隐密码\"><a href=\"#2、控制input显隐密码\" class=\"headerlink\" title=\"2、控制input显隐密码\"></a>2、控制input显隐密码</h2><p>这个就很简单了，只需要改变input的type属性就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击函数，获取dom，判断更改属性。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> input=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;inputId&quot;</span>);  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(input.type==<span class=\"string\">&quot;password&quot;</span>)&#123; </span><br><span class=\"line\">        input.type=<span class=\"string\">&#x27;text&#x27;</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        input.type=<span class=\"string\">&#x27;password&#x27;</span>;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、textarea多行回车换行，显示的时候换行设置：\"><a href=\"#3、textarea多行回车换行，显示的时候换行设置：\" class=\"headerlink\" title=\"3、textarea多行回车换行，显示的时候换行设置：\"></a>3、textarea多行回车换行，显示的时候换行设置：</h2><p>这个问题是在今年5月做的上海的一个智慧旅游亭项目的时候，后台编辑相关酒店景点的时候，有用到textarea，原本在textarea里设置的多行回车换行，结果在前台显示的页面里，没有换行，查找了相关资料，解决方法如下：<br>css属性：white-space</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:pre-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要在显示内容的地方，将该属性设置为white-space:pre-line或者white-space:pre-wrap,多行文本就可以换行了。  </p>\n<p>上述内容就是我遇到的一些input问题的解决方式以及跟input相关的一些东西，如果有什么错误，欢迎指正！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>input框是我们接受来自用户的数据常用标签，在前端开发中，相信每个人都会用到这个标签，特别是在移动端H5页面的开发中，也会经常遇到一些问题，下面我将根据自己的开发过程中遇到的那些关于input的问题，在这里向大家集中分享一下，所对应的的解决方案。</p>\n<h2 id=\"1、移动端底部input被弹出的键盘遮挡\"><a href=\"#1、移动端底部input被弹出的键盘遮挡\" class=\"headerlink\" title=\"1、移动端底部input被弹出的键盘遮挡\"></a>1、移动端底部input被弹出的键盘遮挡</h2><p>input输入框是通过position:fixed一直放在页面底部，当点击input进行输入的时候，就会出现如下的图片情况<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180522/input%E8%A7%A3%E5%86%B3.jpg?raw=true\"></p>\n<p>其实这个问题是我去年年后在一个微信H5项目里遇到的，当时公司的测试机，ios9的系统，出现的这个bug，但在新的ios系统里，貌似已经解决了这个bug，但是为了向下兼容以及防止其他机型也出现这样的问题，解决方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element.scrollIntoView()</span><br></pre></td></tr></table></figure>\n<p>顾名思义，该方法是让当前的元素滚动到浏览器窗口的可视区域内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#inputId&#x27;</span>).scrollIntoView();  <span class=\"comment\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、控制input显隐密码\"><a href=\"#2、控制input显隐密码\" class=\"headerlink\" title=\"2、控制input显隐密码\"></a>2、控制input显隐密码</h2><p>这个就很简单了，只需要改变input的type属性就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击函数，获取dom，判断更改属性。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> input=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;inputId&quot;</span>);  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(input.type==<span class=\"string\">&quot;password&quot;</span>)&#123; </span><br><span class=\"line\">        input.type=<span class=\"string\">&#x27;text&#x27;</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        input.type=<span class=\"string\">&#x27;password&#x27;</span>;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、textarea多行回车换行，显示的时候换行设置：\"><a href=\"#3、textarea多行回车换行，显示的时候换行设置：\" class=\"headerlink\" title=\"3、textarea多行回车换行，显示的时候换行设置：\"></a>3、textarea多行回车换行，显示的时候换行设置：</h2><p>这个问题是在今年5月做的上海的一个智慧旅游亭项目的时候，后台编辑相关酒店景点的时候，有用到textarea，原本在textarea里设置的多行回车换行，结果在前台显示的页面里，没有换行，查找了相关资料，解决方法如下：<br>css属性：white-space</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:pre-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要在显示内容的地方，将该属性设置为white-space:pre-line或者white-space:pre-wrap,多行文本就可以换行了。  </p>\n<p>上述内容就是我遇到的一些input问题的解决方式以及跟input相关的一些东西，如果有什么错误，欢迎指正！</p>\n"},{"title":"全景框架krpano.js介绍分享","date":"2019-07-26T15:05:23.000Z","_content":"\n\n# 全景框架krpano.js介绍\n\n## 概览\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/13.png?raw=true)\n\n\n## 一、全景vr概念\n\n> 在2016年上半年的这个时候，VR、AR概念炒得很火。室内，室外景观等行业，均利用这波热潮，借全景的力来拓展自己的市场，我们旅游业务线当时也基于目前的需求，希望能让游客不出家门，只用浏览器，便能提前了解景点情况。打算做一套自己的全景旅游导览系统，这也就是我今天打算分享的由来。\n\n> 全景漫游（英文：panorama）技术可以让体验者在全景图像构建的全景空间里切换视角的浏览。它是通过拍摄全景图像，再采用计算机图形图像技术构建出全景空间，让使用者能用控制浏览的方向，或左或右、或上或下观看物体或场景，仿佛身临其境一般。与传统的3D建模相比，全景漫游技术制作简单，数据量小，系统消耗低，且更有真实感。\n\n\n## 二、需求分析和解决方案\n> 有了想做一个自己的全景系统这样一个想法之后，就得想办法如何去实现它，那么首先，我们参考了业界流行的解决方案，比方说，在当时很流行的[720云](https://720yun.com/)等全景制作平台，当时刚打开他们的网站，确实被惊艳到了，原来浏览器可以展示这么酷炫的效果，下一秒就开始好奇，他们是如何做到的。虽然他们提供了一套的制作流程，但是我们的需求是自己搞一个高度定制化的全景系统。所以职业习惯，下意识的我便按下了F12，找到source面板，在一堆文件夹下面开始找，终于给我找到了： \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/1.png?raw=true)\n\n> 上图可以看到注释......原来他们用的是krpano.js 顺藤摸瓜便打开了[krpano.js的官网](https://krpano.com/),打开后，刚开始一脸懵逼，全部都是英文，原来开发框架的是德国人，关键点是，框架收费的，129英镑，人民币1000多，但是项目组任性出钱买了下来（因为没有买版权，做出来的场景是带满屏的水印的，但其实到最近这一两年我们才发现，竟然有注册机可以破解版权了，莫名感觉有点亏了）\n\n> 2016年当时其实还没有krpano相关的中文文档可以查阅，唯一的文档就是全英文的官网，而且，将近2000的api，可以说是巨量的，当时也是边做边学。不像现在，入门都有中文文档，有个[krpano中文网](http://www.krpano360.com)，个人维护的，质量不错，入门足够。\n\n## 三、krpano.js简介\n\n> krpano是一款全景漫游制作软件和工具。其具有以下特点：\n* 高度灵活、性能卓越的轻量化全景漫游浏览器。\n* 兼容HTML5和Flash，支持Webgl下的WebVR展示。\n* 使用专用的krpano xml代码编写全景漫游，可开发出高度定制化的项目，也可利用krpano工具开发在线全景制作及展示平台。\n* 支持多种类型的全景图以及全景视频和环物全景。\n* 支持多种投影模式。\n* 同时提供简单高效的批处理方式，可在无需代码干预下迅速生成一个基本功能兼备的全景漫游项目。\n\n## 四、原理\n\n> 其原理主要就是利用全景图制作工具，将一张全景图，制作成6张图片切片，这6张图片分别对应六面体的前后左右上下，六个方位，人的视角在六面体的中间位置，四周形成720°球面坐标系。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/3.png?raw=true)\n\n> 切片的特殊地方就在于边缘的虚化效果，使得过渡非常自然，如果我们把切片替换成未处理的图片，那么会出现如下的效果，至少能看的出来，其实就是图片拼接出来的六面体而已：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/2.png?raw=true)\n\n\n## 五、应用\n\n> 那么应用的话呢，主要看你需求了，单纯的展示，就很简单，去业界主流的全景制作平台，或者，使用krpano自己的制作工具来进行制作。如果是想定制化一个系统或者产品，那就得深入krpano的文档进行学习了。\n\n### 一、单纯的展示\n> 业界的全景制作平台流程就不说了，基本都是傻瓜式的操作，下面给大家简单介绍一下，官网下载的包里都有些什么东西，首先放一张图,大概看下结构：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/4.png?raw=true)\n\n#### examples文件夹\n> 这是krpano的案例文件夹(1.19的examples文件夹在viewer文件夹下)，这些案例都是学习krpano代码的很好的素材。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/8.png?raw=true)\n\n#### templates文件夹\n> 官方一系列模版所在的文件夹，包括了图片、xml、html以及相关配置文件等。通过对这里的了解和修改，我们可以做出自己的皮肤模版，然后一键生成，实现批量的工作流。不过正常情况下，我们通过批量处理工具，会自动生成，不需要从这里拷贝。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/9.png?raw=true)\n\n#### viewer文件夹\n> krpano 下载包的官方插件、引擎、案例的存放位置，同时也是让案例文件夹能够正确显示的 viewer 所在的位置。其中plugins是当前版本的所有官方插件；examples是官方提供的案例。 \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/10.png?raw=true)\n\n#### droplet.bat 文件\n> Krpano Droplets 是krpano命令行工具加上配置文件config的一个快捷方式。droplets使用方式非常简单，将文件（通常是图片或者xml等文件）直接拖放在droplet图标上松开即可。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/11.png?raw=true)\n\n* MAKE PANO开头的，是只制作全景图片，并不整合成漫游文件夹\n* MAKE VTOUR开头的，是制作全景图片，并且将他们整合到一个虚拟漫游中\n* 我们一般常用带有MULTIRES的处理文件，因为这样会生成所有类型的全景图像，而NORMAL只能生成360°的全景图像\n\n#### krpano Tools.exe\n\n> 用来加密保护全景项目的可视化工具，需要注册才可以使用  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/6.png?raw=true)\n\n#### krpano Testing Server\n> krpano 自带的静态文件本地服务环境，使用它可以路过本地文件案例限制来查看 Flash 与 HTML5 效果，。我们如果想要本地查看效果的时候，需要启动它，然后再打开对应的案例的html文件。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/5.png?raw=true)\n\n#### 生成文件说明\n> 通过使用上述的droplet.bat文件，也就是将全景图拖到droplet.bat文件上面，会打开控制台，等程序跑完，就会出现一个vtour文件夹，文件夹内容如下：\n\n```\nvtour/\n| -- panos/             #存放全景切片图片的文件夹\n| -- skin/              #存放皮肤相关文件\n| -- plugins/           #用来存放插件\n| -- tour.swf           #krpano flash viewer\n| -- tour.js            #krpano HTML5 viewer\n| -- tour.xml           #生成全景的相关配置\n| -- tour.html          #用来浏览全景的页面，需要本地服务环境\n| -- tour_editor.html   #添加热点（hotspot）与初始化视角设置的编辑器\n| -- tour_testingserver.exe #windows系统中打开测试服务器并打开html文件进行本地浏览。\n| -- tour_testingserver_macos #mac系统中打开测试服务器并打开html文件进行本地浏览。\n\n```\n\n### 二、自定义\n\n> 说是自定义，其实代码结构和工具生成的方式一样，只不过形式上有所区别，下面，工具生成的代码结构，给大家讲解下，它究竟是如何运行的。\n\n#### 1、代码结构\n\n##### tour.html\n```html\n<div id=\"pano\"></div>\n<script src=\"tour.js\"></script>\n<script>\n    embedpano({\n        swf: \"tour.swf\", //有则表示加载flash引擎，如果设置html5:only则不需要该值\n        xml: \"tour.xml\", //启动时的配置文件\n        target: \"pano\", //要渲染到的目标容器ID\n        html5: \"only\", //如果有需要用到flash，可设置为auto\n        //id: \"krpanoSWFObject\", //默认的krpano对象，每一个viewer对应唯一id，与JS交互时要用到\n        mobilescale: 1.0, //移动设备缩放，1表示不缩放，默认0.5\n        passQueryParameters: false //是否接受URL传参，例如：tour.html?html5=only&startscene=scene2\n    });\n</script>\n```\n\n##### tour.xml\n```xml\n<krpano version=\"1.19\"     //版本号\n        onstart=\"\"         //进入漫游时，xml加载和解析后执行的动作\n        basedir=\"%FIRSTXML%\" //设置程序根目录\n        bgcolor=\"\"      //全景播放器的背景色，不设置则为透明\n        colorcorrection=\"default\" //改变Flashplayer 10的色彩修正设置(Flash only)　可选的值：default、on、off\n        logkey=\"true\"     //当为Ture时，按O可查看log日志\n        strict=\"false\"            //严格代码模式\n        showerrors=\"true\"  //是否输出错误信息\n        debugmode=\"false\"  //当为True时，显示来自插件中的trace(0,text)中的text信息\n    >\n    ...\n</krpano>\n```\n> krpano作为XML文件唯一根元素，必须设置！\n\n##### XML文件配置\n\n```xml\n<krpano>\n    <include>  //xml文件的相互引用，比如皮肤xml等\n    <preview> //预览，加载预览图，渲染优化\n    <image> //六个方位的切片图\n    <view>  //具体场景的视图，对应六面体的六个方位\n    <autorotate>  //场景自动旋转\n    <plugin>  //插件 背景音乐，陀螺仪等\n    <layer>    //图层，比如控制器\n    <hotspot>  //切换场景热点\n    <events> //事件响应\n    <action> //交互指令\n    <scene> //场景\n</krpano>\n```\n\n#### 2、渲染处理\n\n> a、首先，我们需要根据UI设计图，参照文档API，来对xml模板进行修改处理，来达到我们自己想要的那种效果。\n\n> b、然后呢，我们会将主xml和公用的xml，放到后台java目录webapp下面的resource文件夹，这样，我们在js读取的时候，只需要采用相对路径即可\n\n> c、动态场景所需要的对应的xml，只能由后台生成，后台有一套场景模板，和一套对xml进行节点操作的处理逻辑，然后将xml路径以正常的ajax请求返回给前端，前端进行场景加载等操作\n\n> krpano渲染的方式如下，可以看到，主要的就是tour.xml文件，其他诸如插件，皮肤之类的，也是xml，不过将会被include标签引入tour.xml\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/7.png?raw=true)\n#### 3、交互处理\n\n> 既然是浏览器展示型的框架，那么交互一定是不能少了，你们一定很好奇，那像上面那样说的，krpano通过xml配置进行渲染，而js脚本又是单独的，那么如何去完成统一的交互呢？说白了，也就是说，如何去完成krpano和js脚本之间的通信？其实有几种方式：\n\n##### krpano内置指令\n```\n<layer name=\"skin_btn_comment\"  onclick=\"skin_add_comment()\" />\n\n<action name=\"skin_add_comment\">\n    set(hotspot[get(hotspotName)].width, '30px');\n    set(hotspot[get(hotspotName)].height, '30px');\n</action>\n\n```\n> 如上代码，layer是krpano内置的图层标签，类似于地图交互上的覆盖物，action呢之前也提了，表示声明一个交互指令，layer上可以绑定各种各样的方法，具体可以参考官网文档，这个方法的值，就是action标签name值的函数调用，当我们点击这个layer的时候，action包裹的各种操作就会被触发，action里包裹的便是krpano的内置语法处理。\n\n##### call的方式\n\n> 所谓的call方式，其实和js里call,apply的语义是类似的，也就是借调，这里的call，就是指krpano和js脚本互相调用。\n\n> 其实大部分的场景，我们是需要这样的一种通信方式的，比如参数传递，数据存储之类的，很多时候，krpano的操作，需要用到js脚本的变量，而自定义的页面元素，js脚本又得调用krpano的指令。\n\n> 首先，我们来看下，krpano的xml中，如何调用js里声明的方法呢\n\n```\n//xxx.js\n\nfunction callKrpano(id) {\n    $(\"#vrHotspotID\").val(id);\n}\n\n```\n> 我们在js脚本里声明一个方法，这个方法接受一个id的参数\n\n```\n//xxx.xml\n\n<action name=\"skin_add_comment\">\n    js(callKrpano(get(hotspotName)));\n</action>\n\n```\n\n> 我们在xml里可以使用js(functionName)的方式，来调用js的方法\n\n> 然后，我们再看下，js里调用krpano的语法\n\n```\n\nfunction loadPano(xmlPath) {\n    var krpano = document.getElementById(\"krpanoSWFObject\");\n    krpano.call('loadpano(' + xmlPath + ')');\n}\n\n```\n> 我们可以通过dom操作，获取到krpano对象，krpano对象里集成了一个call方法，这个方法接收的是字符串形式的kapano内置语法段，注意，如果有js变量，我们需要进行拼接。比方说上面表示，就是js执行krpano的加载场景的这个指令。\n\n\n## 六、结语\n\n> 其实今天时间不多，只能给大家讲个极其入门的大概，krpano这个全景框架，大家有兴趣可以去了解下，入门的话就去krpano中文网，如果想深入了解，建议还是慢慢看官网文档，全英文的，配合有道词典什么的，慢慢嗑。说实话，这东西过了这么长时间，没怎么用，很多东西都忘记了，只能到再用到的时候，再去边查边用，因为人的精力是有限的，合理的分配时间和精力，才是最重要的选择。\n\n\n\n\n\n\n\n\n","source":"_posts/全景框架krpano-js介绍分享.md","raw":"---\ntitle: 全景框架krpano.js介绍分享\ndate: 2019-07-26 23:05:23\ntags:\n  - krpano.js\n  - 全景漫游\ncategories:\n  - krpano.js\n  - 全景漫游\n---\n\n\n# 全景框架krpano.js介绍\n\n## 概览\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/13.png?raw=true)\n\n\n## 一、全景vr概念\n\n> 在2016年上半年的这个时候，VR、AR概念炒得很火。室内，室外景观等行业，均利用这波热潮，借全景的力来拓展自己的市场，我们旅游业务线当时也基于目前的需求，希望能让游客不出家门，只用浏览器，便能提前了解景点情况。打算做一套自己的全景旅游导览系统，这也就是我今天打算分享的由来。\n\n> 全景漫游（英文：panorama）技术可以让体验者在全景图像构建的全景空间里切换视角的浏览。它是通过拍摄全景图像，再采用计算机图形图像技术构建出全景空间，让使用者能用控制浏览的方向，或左或右、或上或下观看物体或场景，仿佛身临其境一般。与传统的3D建模相比，全景漫游技术制作简单，数据量小，系统消耗低，且更有真实感。\n\n\n## 二、需求分析和解决方案\n> 有了想做一个自己的全景系统这样一个想法之后，就得想办法如何去实现它，那么首先，我们参考了业界流行的解决方案，比方说，在当时很流行的[720云](https://720yun.com/)等全景制作平台，当时刚打开他们的网站，确实被惊艳到了，原来浏览器可以展示这么酷炫的效果，下一秒就开始好奇，他们是如何做到的。虽然他们提供了一套的制作流程，但是我们的需求是自己搞一个高度定制化的全景系统。所以职业习惯，下意识的我便按下了F12，找到source面板，在一堆文件夹下面开始找，终于给我找到了： \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/1.png?raw=true)\n\n> 上图可以看到注释......原来他们用的是krpano.js 顺藤摸瓜便打开了[krpano.js的官网](https://krpano.com/),打开后，刚开始一脸懵逼，全部都是英文，原来开发框架的是德国人，关键点是，框架收费的，129英镑，人民币1000多，但是项目组任性出钱买了下来（因为没有买版权，做出来的场景是带满屏的水印的，但其实到最近这一两年我们才发现，竟然有注册机可以破解版权了，莫名感觉有点亏了）\n\n> 2016年当时其实还没有krpano相关的中文文档可以查阅，唯一的文档就是全英文的官网，而且，将近2000的api，可以说是巨量的，当时也是边做边学。不像现在，入门都有中文文档，有个[krpano中文网](http://www.krpano360.com)，个人维护的，质量不错，入门足够。\n\n## 三、krpano.js简介\n\n> krpano是一款全景漫游制作软件和工具。其具有以下特点：\n* 高度灵活、性能卓越的轻量化全景漫游浏览器。\n* 兼容HTML5和Flash，支持Webgl下的WebVR展示。\n* 使用专用的krpano xml代码编写全景漫游，可开发出高度定制化的项目，也可利用krpano工具开发在线全景制作及展示平台。\n* 支持多种类型的全景图以及全景视频和环物全景。\n* 支持多种投影模式。\n* 同时提供简单高效的批处理方式，可在无需代码干预下迅速生成一个基本功能兼备的全景漫游项目。\n\n## 四、原理\n\n> 其原理主要就是利用全景图制作工具，将一张全景图，制作成6张图片切片，这6张图片分别对应六面体的前后左右上下，六个方位，人的视角在六面体的中间位置，四周形成720°球面坐标系。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/3.png?raw=true)\n\n> 切片的特殊地方就在于边缘的虚化效果，使得过渡非常自然，如果我们把切片替换成未处理的图片，那么会出现如下的效果，至少能看的出来，其实就是图片拼接出来的六面体而已：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/2.png?raw=true)\n\n\n## 五、应用\n\n> 那么应用的话呢，主要看你需求了，单纯的展示，就很简单，去业界主流的全景制作平台，或者，使用krpano自己的制作工具来进行制作。如果是想定制化一个系统或者产品，那就得深入krpano的文档进行学习了。\n\n### 一、单纯的展示\n> 业界的全景制作平台流程就不说了，基本都是傻瓜式的操作，下面给大家简单介绍一下，官网下载的包里都有些什么东西，首先放一张图,大概看下结构：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/4.png?raw=true)\n\n#### examples文件夹\n> 这是krpano的案例文件夹(1.19的examples文件夹在viewer文件夹下)，这些案例都是学习krpano代码的很好的素材。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/8.png?raw=true)\n\n#### templates文件夹\n> 官方一系列模版所在的文件夹，包括了图片、xml、html以及相关配置文件等。通过对这里的了解和修改，我们可以做出自己的皮肤模版，然后一键生成，实现批量的工作流。不过正常情况下，我们通过批量处理工具，会自动生成，不需要从这里拷贝。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/9.png?raw=true)\n\n#### viewer文件夹\n> krpano 下载包的官方插件、引擎、案例的存放位置，同时也是让案例文件夹能够正确显示的 viewer 所在的位置。其中plugins是当前版本的所有官方插件；examples是官方提供的案例。 \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/10.png?raw=true)\n\n#### droplet.bat 文件\n> Krpano Droplets 是krpano命令行工具加上配置文件config的一个快捷方式。droplets使用方式非常简单，将文件（通常是图片或者xml等文件）直接拖放在droplet图标上松开即可。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/11.png?raw=true)\n\n* MAKE PANO开头的，是只制作全景图片，并不整合成漫游文件夹\n* MAKE VTOUR开头的，是制作全景图片，并且将他们整合到一个虚拟漫游中\n* 我们一般常用带有MULTIRES的处理文件，因为这样会生成所有类型的全景图像，而NORMAL只能生成360°的全景图像\n\n#### krpano Tools.exe\n\n> 用来加密保护全景项目的可视化工具，需要注册才可以使用  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/6.png?raw=true)\n\n#### krpano Testing Server\n> krpano 自带的静态文件本地服务环境，使用它可以路过本地文件案例限制来查看 Flash 与 HTML5 效果，。我们如果想要本地查看效果的时候，需要启动它，然后再打开对应的案例的html文件。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/5.png?raw=true)\n\n#### 生成文件说明\n> 通过使用上述的droplet.bat文件，也就是将全景图拖到droplet.bat文件上面，会打开控制台，等程序跑完，就会出现一个vtour文件夹，文件夹内容如下：\n\n```\nvtour/\n| -- panos/             #存放全景切片图片的文件夹\n| -- skin/              #存放皮肤相关文件\n| -- plugins/           #用来存放插件\n| -- tour.swf           #krpano flash viewer\n| -- tour.js            #krpano HTML5 viewer\n| -- tour.xml           #生成全景的相关配置\n| -- tour.html          #用来浏览全景的页面，需要本地服务环境\n| -- tour_editor.html   #添加热点（hotspot）与初始化视角设置的编辑器\n| -- tour_testingserver.exe #windows系统中打开测试服务器并打开html文件进行本地浏览。\n| -- tour_testingserver_macos #mac系统中打开测试服务器并打开html文件进行本地浏览。\n\n```\n\n### 二、自定义\n\n> 说是自定义，其实代码结构和工具生成的方式一样，只不过形式上有所区别，下面，工具生成的代码结构，给大家讲解下，它究竟是如何运行的。\n\n#### 1、代码结构\n\n##### tour.html\n```html\n<div id=\"pano\"></div>\n<script src=\"tour.js\"></script>\n<script>\n    embedpano({\n        swf: \"tour.swf\", //有则表示加载flash引擎，如果设置html5:only则不需要该值\n        xml: \"tour.xml\", //启动时的配置文件\n        target: \"pano\", //要渲染到的目标容器ID\n        html5: \"only\", //如果有需要用到flash，可设置为auto\n        //id: \"krpanoSWFObject\", //默认的krpano对象，每一个viewer对应唯一id，与JS交互时要用到\n        mobilescale: 1.0, //移动设备缩放，1表示不缩放，默认0.5\n        passQueryParameters: false //是否接受URL传参，例如：tour.html?html5=only&startscene=scene2\n    });\n</script>\n```\n\n##### tour.xml\n```xml\n<krpano version=\"1.19\"     //版本号\n        onstart=\"\"         //进入漫游时，xml加载和解析后执行的动作\n        basedir=\"%FIRSTXML%\" //设置程序根目录\n        bgcolor=\"\"      //全景播放器的背景色，不设置则为透明\n        colorcorrection=\"default\" //改变Flashplayer 10的色彩修正设置(Flash only)　可选的值：default、on、off\n        logkey=\"true\"     //当为Ture时，按O可查看log日志\n        strict=\"false\"            //严格代码模式\n        showerrors=\"true\"  //是否输出错误信息\n        debugmode=\"false\"  //当为True时，显示来自插件中的trace(0,text)中的text信息\n    >\n    ...\n</krpano>\n```\n> krpano作为XML文件唯一根元素，必须设置！\n\n##### XML文件配置\n\n```xml\n<krpano>\n    <include>  //xml文件的相互引用，比如皮肤xml等\n    <preview> //预览，加载预览图，渲染优化\n    <image> //六个方位的切片图\n    <view>  //具体场景的视图，对应六面体的六个方位\n    <autorotate>  //场景自动旋转\n    <plugin>  //插件 背景音乐，陀螺仪等\n    <layer>    //图层，比如控制器\n    <hotspot>  //切换场景热点\n    <events> //事件响应\n    <action> //交互指令\n    <scene> //场景\n</krpano>\n```\n\n#### 2、渲染处理\n\n> a、首先，我们需要根据UI设计图，参照文档API，来对xml模板进行修改处理，来达到我们自己想要的那种效果。\n\n> b、然后呢，我们会将主xml和公用的xml，放到后台java目录webapp下面的resource文件夹，这样，我们在js读取的时候，只需要采用相对路径即可\n\n> c、动态场景所需要的对应的xml，只能由后台生成，后台有一套场景模板，和一套对xml进行节点操作的处理逻辑，然后将xml路径以正常的ajax请求返回给前端，前端进行场景加载等操作\n\n> krpano渲染的方式如下，可以看到，主要的就是tour.xml文件，其他诸如插件，皮肤之类的，也是xml，不过将会被include标签引入tour.xml\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190719/7.png?raw=true)\n#### 3、交互处理\n\n> 既然是浏览器展示型的框架，那么交互一定是不能少了，你们一定很好奇，那像上面那样说的，krpano通过xml配置进行渲染，而js脚本又是单独的，那么如何去完成统一的交互呢？说白了，也就是说，如何去完成krpano和js脚本之间的通信？其实有几种方式：\n\n##### krpano内置指令\n```\n<layer name=\"skin_btn_comment\"  onclick=\"skin_add_comment()\" />\n\n<action name=\"skin_add_comment\">\n    set(hotspot[get(hotspotName)].width, '30px');\n    set(hotspot[get(hotspotName)].height, '30px');\n</action>\n\n```\n> 如上代码，layer是krpano内置的图层标签，类似于地图交互上的覆盖物，action呢之前也提了，表示声明一个交互指令，layer上可以绑定各种各样的方法，具体可以参考官网文档，这个方法的值，就是action标签name值的函数调用，当我们点击这个layer的时候，action包裹的各种操作就会被触发，action里包裹的便是krpano的内置语法处理。\n\n##### call的方式\n\n> 所谓的call方式，其实和js里call,apply的语义是类似的，也就是借调，这里的call，就是指krpano和js脚本互相调用。\n\n> 其实大部分的场景，我们是需要这样的一种通信方式的，比如参数传递，数据存储之类的，很多时候，krpano的操作，需要用到js脚本的变量，而自定义的页面元素，js脚本又得调用krpano的指令。\n\n> 首先，我们来看下，krpano的xml中，如何调用js里声明的方法呢\n\n```\n//xxx.js\n\nfunction callKrpano(id) {\n    $(\"#vrHotspotID\").val(id);\n}\n\n```\n> 我们在js脚本里声明一个方法，这个方法接受一个id的参数\n\n```\n//xxx.xml\n\n<action name=\"skin_add_comment\">\n    js(callKrpano(get(hotspotName)));\n</action>\n\n```\n\n> 我们在xml里可以使用js(functionName)的方式，来调用js的方法\n\n> 然后，我们再看下，js里调用krpano的语法\n\n```\n\nfunction loadPano(xmlPath) {\n    var krpano = document.getElementById(\"krpanoSWFObject\");\n    krpano.call('loadpano(' + xmlPath + ')');\n}\n\n```\n> 我们可以通过dom操作，获取到krpano对象，krpano对象里集成了一个call方法，这个方法接收的是字符串形式的kapano内置语法段，注意，如果有js变量，我们需要进行拼接。比方说上面表示，就是js执行krpano的加载场景的这个指令。\n\n\n## 六、结语\n\n> 其实今天时间不多，只能给大家讲个极其入门的大概，krpano这个全景框架，大家有兴趣可以去了解下，入门的话就去krpano中文网，如果想深入了解，建议还是慢慢看官网文档，全英文的，配合有道词典什么的，慢慢嗑。说实话，这东西过了这么长时间，没怎么用，很多东西都忘记了，只能到再用到的时候，再去边查边用，因为人的精力是有限的，合理的分配时间和精力，才是最重要的选择。\n\n\n\n\n\n\n\n\n","slug":"全景框架krpano-js介绍分享","published":1,"updated":"2019-07-26T15:06:21.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxm90021msvi98qt9yzn","content":"<h1 id=\"全景框架krpano-js介绍\"><a href=\"#全景框架krpano-js介绍\" class=\"headerlink\" title=\"全景框架krpano.js介绍\"></a>全景框架krpano.js介绍</h1><h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/13.png?raw=true\"></p>\n<h2 id=\"一、全景vr概念\"><a href=\"#一、全景vr概念\" class=\"headerlink\" title=\"一、全景vr概念\"></a>一、全景vr概念</h2><blockquote>\n<p>在2016年上半年的这个时候，VR、AR概念炒得很火。室内，室外景观等行业，均利用这波热潮，借全景的力来拓展自己的市场，我们旅游业务线当时也基于目前的需求，希望能让游客不出家门，只用浏览器，便能提前了解景点情况。打算做一套自己的全景旅游导览系统，这也就是我今天打算分享的由来。</p>\n</blockquote>\n<blockquote>\n<p>全景漫游（英文：panorama）技术可以让体验者在全景图像构建的全景空间里切换视角的浏览。它是通过拍摄全景图像，再采用计算机图形图像技术构建出全景空间，让使用者能用控制浏览的方向，或左或右、或上或下观看物体或场景，仿佛身临其境一般。与传统的3D建模相比，全景漫游技术制作简单，数据量小，系统消耗低，且更有真实感。</p>\n</blockquote>\n<h2 id=\"二、需求分析和解决方案\"><a href=\"#二、需求分析和解决方案\" class=\"headerlink\" title=\"二、需求分析和解决方案\"></a>二、需求分析和解决方案</h2><blockquote>\n<p>有了想做一个自己的全景系统这样一个想法之后，就得想办法如何去实现它，那么首先，我们参考了业界流行的解决方案，比方说，在当时很流行的<a href=\"https://720yun.com/\">720云</a>等全景制作平台，当时刚打开他们的网站，确实被惊艳到了，原来浏览器可以展示这么酷炫的效果，下一秒就开始好奇，他们是如何做到的。虽然他们提供了一套的制作流程，但是我们的需求是自己搞一个高度定制化的全景系统。所以职业习惯，下意识的我便按下了F12，找到source面板，在一堆文件夹下面开始找，终于给我找到了： </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/1.png?raw=true\"></p>\n<blockquote>\n<p>上图可以看到注释……原来他们用的是krpano.js 顺藤摸瓜便打开了<a href=\"https://krpano.com/\">krpano.js的官网</a>,打开后，刚开始一脸懵逼，全部都是英文，原来开发框架的是德国人，关键点是，框架收费的，129英镑，人民币1000多，但是项目组任性出钱买了下来（因为没有买版权，做出来的场景是带满屏的水印的，但其实到最近这一两年我们才发现，竟然有注册机可以破解版权了，莫名感觉有点亏了）</p>\n</blockquote>\n<blockquote>\n<p>2016年当时其实还没有krpano相关的中文文档可以查阅，唯一的文档就是全英文的官网，而且，将近2000的api，可以说是巨量的，当时也是边做边学。不像现在，入门都有中文文档，有个<a href=\"http://www.krpano360.com/\">krpano中文网</a>，个人维护的，质量不错，入门足够。</p>\n</blockquote>\n<h2 id=\"三、krpano-js简介\"><a href=\"#三、krpano-js简介\" class=\"headerlink\" title=\"三、krpano.js简介\"></a>三、krpano.js简介</h2><blockquote>\n<p>krpano是一款全景漫游制作软件和工具。其具有以下特点：</p>\n</blockquote>\n<ul>\n<li>高度灵活、性能卓越的轻量化全景漫游浏览器。</li>\n<li>兼容HTML5和Flash，支持Webgl下的WebVR展示。</li>\n<li>使用专用的krpano xml代码编写全景漫游，可开发出高度定制化的项目，也可利用krpano工具开发在线全景制作及展示平台。</li>\n<li>支持多种类型的全景图以及全景视频和环物全景。</li>\n<li>支持多种投影模式。</li>\n<li>同时提供简单高效的批处理方式，可在无需代码干预下迅速生成一个基本功能兼备的全景漫游项目。</li>\n</ul>\n<h2 id=\"四、原理\"><a href=\"#四、原理\" class=\"headerlink\" title=\"四、原理\"></a>四、原理</h2><blockquote>\n<p>其原理主要就是利用全景图制作工具，将一张全景图，制作成6张图片切片，这6张图片分别对应六面体的前后左右上下，六个方位，人的视角在六面体的中间位置，四周形成720°球面坐标系。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/3.png?raw=true\"></p>\n<blockquote>\n<p>切片的特殊地方就在于边缘的虚化效果，使得过渡非常自然，如果我们把切片替换成未处理的图片，那么会出现如下的效果，至少能看的出来，其实就是图片拼接出来的六面体而已：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/2.png?raw=true\"></p>\n<h2 id=\"五、应用\"><a href=\"#五、应用\" class=\"headerlink\" title=\"五、应用\"></a>五、应用</h2><blockquote>\n<p>那么应用的话呢，主要看你需求了，单纯的展示，就很简单，去业界主流的全景制作平台，或者，使用krpano自己的制作工具来进行制作。如果是想定制化一个系统或者产品，那就得深入krpano的文档进行学习了。</p>\n</blockquote>\n<h3 id=\"一、单纯的展示\"><a href=\"#一、单纯的展示\" class=\"headerlink\" title=\"一、单纯的展示\"></a>一、单纯的展示</h3><blockquote>\n<p>业界的全景制作平台流程就不说了，基本都是傻瓜式的操作，下面给大家简单介绍一下，官网下载的包里都有些什么东西，首先放一张图,大概看下结构：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/4.png?raw=true\"></p>\n<h4 id=\"examples文件夹\"><a href=\"#examples文件夹\" class=\"headerlink\" title=\"examples文件夹\"></a>examples文件夹</h4><blockquote>\n<p>这是krpano的案例文件夹(1.19的examples文件夹在viewer文件夹下)，这些案例都是学习krpano代码的很好的素材。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/8.png?raw=true\"></p>\n<h4 id=\"templates文件夹\"><a href=\"#templates文件夹\" class=\"headerlink\" title=\"templates文件夹\"></a>templates文件夹</h4><blockquote>\n<p>官方一系列模版所在的文件夹，包括了图片、xml、html以及相关配置文件等。通过对这里的了解和修改，我们可以做出自己的皮肤模版，然后一键生成，实现批量的工作流。不过正常情况下，我们通过批量处理工具，会自动生成，不需要从这里拷贝。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/9.png?raw=true\"></p>\n<h4 id=\"viewer文件夹\"><a href=\"#viewer文件夹\" class=\"headerlink\" title=\"viewer文件夹\"></a>viewer文件夹</h4><blockquote>\n<p>krpano 下载包的官方插件、引擎、案例的存放位置，同时也是让案例文件夹能够正确显示的 viewer 所在的位置。其中plugins是当前版本的所有官方插件；examples是官方提供的案例。 </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/10.png?raw=true\"></p>\n<h4 id=\"droplet-bat-文件\"><a href=\"#droplet-bat-文件\" class=\"headerlink\" title=\"droplet.bat 文件\"></a>droplet.bat 文件</h4><blockquote>\n<p>Krpano Droplets 是krpano命令行工具加上配置文件config的一个快捷方式。droplets使用方式非常简单，将文件（通常是图片或者xml等文件）直接拖放在droplet图标上松开即可。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/11.png?raw=true\"></p>\n<ul>\n<li>MAKE PANO开头的，是只制作全景图片，并不整合成漫游文件夹</li>\n<li>MAKE VTOUR开头的，是制作全景图片，并且将他们整合到一个虚拟漫游中</li>\n<li>我们一般常用带有MULTIRES的处理文件，因为这样会生成所有类型的全景图像，而NORMAL只能生成360°的全景图像</li>\n</ul>\n<h4 id=\"krpano-Tools-exe\"><a href=\"#krpano-Tools-exe\" class=\"headerlink\" title=\"krpano Tools.exe\"></a>krpano Tools.exe</h4><blockquote>\n<p>用来加密保护全景项目的可视化工具，需要注册才可以使用  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/6.png?raw=true\"></p>\n<h4 id=\"krpano-Testing-Server\"><a href=\"#krpano-Testing-Server\" class=\"headerlink\" title=\"krpano Testing Server\"></a>krpano Testing Server</h4><blockquote>\n<p>krpano 自带的静态文件本地服务环境，使用它可以路过本地文件案例限制来查看 Flash 与 HTML5 效果，。我们如果想要本地查看效果的时候，需要启动它，然后再打开对应的案例的html文件。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/5.png?raw=true\"></p>\n<h4 id=\"生成文件说明\"><a href=\"#生成文件说明\" class=\"headerlink\" title=\"生成文件说明\"></a>生成文件说明</h4><blockquote>\n<p>通过使用上述的droplet.bat文件，也就是将全景图拖到droplet.bat文件上面，会打开控制台，等程序跑完，就会出现一个vtour文件夹，文件夹内容如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vtour&#x2F;</span><br><span class=\"line\">| -- panos&#x2F;             #存放全景切片图片的文件夹</span><br><span class=\"line\">| -- skin&#x2F;              #存放皮肤相关文件</span><br><span class=\"line\">| -- plugins&#x2F;           #用来存放插件</span><br><span class=\"line\">| -- tour.swf           #krpano flash viewer</span><br><span class=\"line\">| -- tour.js            #krpano HTML5 viewer</span><br><span class=\"line\">| -- tour.xml           #生成全景的相关配置</span><br><span class=\"line\">| -- tour.html          #用来浏览全景的页面，需要本地服务环境</span><br><span class=\"line\">| -- tour_editor.html   #添加热点（hotspot）与初始化视角设置的编辑器</span><br><span class=\"line\">| -- tour_testingserver.exe #windows系统中打开测试服务器并打开html文件进行本地浏览。</span><br><span class=\"line\">| -- tour_testingserver_macos #mac系统中打开测试服务器并打开html文件进行本地浏览。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、自定义\"><a href=\"#二、自定义\" class=\"headerlink\" title=\"二、自定义\"></a>二、自定义</h3><blockquote>\n<p>说是自定义，其实代码结构和工具生成的方式一样，只不过形式上有所区别，下面，工具生成的代码结构，给大家讲解下，它究竟是如何运行的。</p>\n</blockquote>\n<h4 id=\"1、代码结构\"><a href=\"#1、代码结构\" class=\"headerlink\" title=\"1、代码结构\"></a>1、代码结构</h4><h5 id=\"tour-html\"><a href=\"#tour-html\" class=\"headerlink\" title=\"tour.html\"></a>tour.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pano&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;tour.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    embedpano(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        swf: <span class=\"string\">&quot;tour.swf&quot;</span>, <span class=\"comment\">//有则表示加载flash引擎，如果设置html5:only则不需要该值</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xml: <span class=\"string\">&quot;tour.xml&quot;</span>, <span class=\"comment\">//启动时的配置文件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        target: <span class=\"string\">&quot;pano&quot;</span>, <span class=\"comment\">//要渲染到的目标容器ID</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html5: <span class=\"string\">&quot;only&quot;</span>, <span class=\"comment\">//如果有需要用到flash，可设置为auto</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//id: &quot;krpanoSWFObject&quot;, //默认的krpano对象，每一个viewer对应唯一id，与JS交互时要用到</span></span></span><br><span class=\"line\"><span class=\"javascript\">        mobilescale: <span class=\"number\">1.0</span>, <span class=\"comment\">//移动设备缩放，1表示不缩放，默认0.5</span></span></span><br><span class=\"line\"><span class=\"javascript\">        passQueryParameters: <span class=\"literal\">false</span> <span class=\"comment\">//是否接受URL传参，例如：tour.html?html5=only&amp;startscene=scene2</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"tour-xml\"><a href=\"#tour-xml\" class=\"headerlink\" title=\"tour.xml\"></a>tour.xml</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">krpano</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.19&quot;</span>     //版本号</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">onstart</span>=<span class=\"string\">&quot;&quot;</span>         //进入漫游时，<span class=\"attr\">xml</span>加载和解析后执行的动作</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">basedir</span>=<span class=\"string\">&quot;%FIRSTXML%&quot;</span> //设置程序根目录</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">bgcolor</span>=<span class=\"string\">&quot;&quot;</span>      //全景播放器的背景色，不设置则为透明</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">colorcorrection</span>=<span class=\"string\">&quot;default&quot;</span> //改变<span class=\"attr\">Flashplayer</span> <span class=\"attr\">10</span>的色彩修正设置(<span class=\"attr\">Flash</span> <span class=\"attr\">only</span>)　可选的值：<span class=\"attr\">default</span>、<span class=\"attr\">on</span>、<span class=\"attr\">off</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">logkey</span>=<span class=\"string\">&quot;true&quot;</span>     //当为<span class=\"attr\">Ture</span>时，按<span class=\"attr\">O</span>可查看<span class=\"attr\">log</span>日志</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">strict</span>=<span class=\"string\">&quot;false&quot;</span>            //严格代码模式</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">showerrors</span>=<span class=\"string\">&quot;true&quot;</span>  //是否输出错误信息</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">debugmode</span>=<span class=\"string\">&quot;false&quot;</span>  //当为<span class=\"attr\">True</span>时，显示来自插件中的<span class=\"attr\">trace</span>(<span class=\"attr\">0</span>,<span class=\"attr\">text</span>)中的<span class=\"attr\">text</span>信息</span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">krpano</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>krpano作为XML文件唯一根元素，必须设置！</p>\n</blockquote>\n<h5 id=\"XML文件配置\"><a href=\"#XML文件配置\" class=\"headerlink\" title=\"XML文件配置\"></a>XML文件配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">krpano</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>  //xml文件的相互引用，比如皮肤xml等</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">preview</span>&gt;</span> //预览，加载预览图，渲染优化</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span> //六个方位的切片图</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>  //具体场景的视图，对应六面体的六个方位</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">autorotate</span>&gt;</span>  //场景自动旋转</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span>  //插件 背景音乐，陀螺仪等</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layer</span>&gt;</span>    //图层，比如控制器</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hotspot</span>&gt;</span>  //切换场景热点</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">events</span>&gt;</span> //事件响应</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span>&gt;</span> //交互指令</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scene</span>&gt;</span> //场景</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">krpano</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、渲染处理\"><a href=\"#2、渲染处理\" class=\"headerlink\" title=\"2、渲染处理\"></a>2、渲染处理</h4><blockquote>\n<p>a、首先，我们需要根据UI设计图，参照文档API，来对xml模板进行修改处理，来达到我们自己想要的那种效果。</p>\n</blockquote>\n<blockquote>\n<p>b、然后呢，我们会将主xml和公用的xml，放到后台java目录webapp下面的resource文件夹，这样，我们在js读取的时候，只需要采用相对路径即可</p>\n</blockquote>\n<blockquote>\n<p>c、动态场景所需要的对应的xml，只能由后台生成，后台有一套场景模板，和一套对xml进行节点操作的处理逻辑，然后将xml路径以正常的ajax请求返回给前端，前端进行场景加载等操作</p>\n</blockquote>\n<blockquote>\n<p>krpano渲染的方式如下，可以看到，主要的就是tour.xml文件，其他诸如插件，皮肤之类的，也是xml，不过将会被include标签引入tour.xml</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/7.png?raw=true\"></p>\n<h4 id=\"3、交互处理\"><a href=\"#3、交互处理\" class=\"headerlink\" title=\"3、交互处理\"></a>3、交互处理</h4><blockquote>\n<p>既然是浏览器展示型的框架，那么交互一定是不能少了，你们一定很好奇，那像上面那样说的，krpano通过xml配置进行渲染，而js脚本又是单独的，那么如何去完成统一的交互呢？说白了，也就是说，如何去完成krpano和js脚本之间的通信？其实有几种方式：</p>\n</blockquote>\n<h5 id=\"krpano内置指令\"><a href=\"#krpano内置指令\" class=\"headerlink\" title=\"krpano内置指令\"></a>krpano内置指令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;layer name&#x3D;&quot;skin_btn_comment&quot;  onclick&#x3D;&quot;skin_add_comment()&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action name&#x3D;&quot;skin_add_comment&quot;&gt;</span><br><span class=\"line\">    set(hotspot[get(hotspotName)].width, &#39;30px&#39;);</span><br><span class=\"line\">    set(hotspot[get(hotspotName)].height, &#39;30px&#39;);</span><br><span class=\"line\">&lt;&#x2F;action&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上代码，layer是krpano内置的图层标签，类似于地图交互上的覆盖物，action呢之前也提了，表示声明一个交互指令，layer上可以绑定各种各样的方法，具体可以参考官网文档，这个方法的值，就是action标签name值的函数调用，当我们点击这个layer的时候，action包裹的各种操作就会被触发，action里包裹的便是krpano的内置语法处理。</p>\n</blockquote>\n<h5 id=\"call的方式\"><a href=\"#call的方式\" class=\"headerlink\" title=\"call的方式\"></a>call的方式</h5><blockquote>\n<p>所谓的call方式，其实和js里call,apply的语义是类似的，也就是借调，这里的call，就是指krpano和js脚本互相调用。</p>\n</blockquote>\n<blockquote>\n<p>其实大部分的场景，我们是需要这样的一种通信方式的，比如参数传递，数据存储之类的，很多时候，krpano的操作，需要用到js脚本的变量，而自定义的页面元素，js脚本又得调用krpano的指令。</p>\n</blockquote>\n<blockquote>\n<p>首先，我们来看下，krpano的xml中，如何调用js里声明的方法呢</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;xxx.js</span><br><span class=\"line\"></span><br><span class=\"line\">function callKrpano(id) &#123;</span><br><span class=\"line\">    $(&quot;#vrHotspotID&quot;).val(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在js脚本里声明一个方法，这个方法接受一个id的参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action name&#x3D;&quot;skin_add_comment&quot;&gt;</span><br><span class=\"line\">    js(callKrpano(get(hotspotName)));</span><br><span class=\"line\">&lt;&#x2F;action&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在xml里可以使用js(functionName)的方式，来调用js的方法</p>\n</blockquote>\n<blockquote>\n<p>然后，我们再看下，js里调用krpano的语法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function loadPano(xmlPath) &#123;</span><br><span class=\"line\">    var krpano &#x3D; document.getElementById(&quot;krpanoSWFObject&quot;);</span><br><span class=\"line\">    krpano.call(&#39;loadpano(&#39; + xmlPath + &#39;)&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以通过dom操作，获取到krpano对象，krpano对象里集成了一个call方法，这个方法接收的是字符串形式的kapano内置语法段，注意，如果有js变量，我们需要进行拼接。比方说上面表示，就是js执行krpano的加载场景的这个指令。</p>\n</blockquote>\n<h2 id=\"六、结语\"><a href=\"#六、结语\" class=\"headerlink\" title=\"六、结语\"></a>六、结语</h2><blockquote>\n<p>其实今天时间不多，只能给大家讲个极其入门的大概，krpano这个全景框架，大家有兴趣可以去了解下，入门的话就去krpano中文网，如果想深入了解，建议还是慢慢看官网文档，全英文的，配合有道词典什么的，慢慢嗑。说实话，这东西过了这么长时间，没怎么用，很多东西都忘记了，只能到再用到的时候，再去边查边用，因为人的精力是有限的，合理的分配时间和精力，才是最重要的选择。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"全景框架krpano-js介绍\"><a href=\"#全景框架krpano-js介绍\" class=\"headerlink\" title=\"全景框架krpano.js介绍\"></a>全景框架krpano.js介绍</h1><h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/13.png?raw=true\"></p>\n<h2 id=\"一、全景vr概念\"><a href=\"#一、全景vr概念\" class=\"headerlink\" title=\"一、全景vr概念\"></a>一、全景vr概念</h2><blockquote>\n<p>在2016年上半年的这个时候，VR、AR概念炒得很火。室内，室外景观等行业，均利用这波热潮，借全景的力来拓展自己的市场，我们旅游业务线当时也基于目前的需求，希望能让游客不出家门，只用浏览器，便能提前了解景点情况。打算做一套自己的全景旅游导览系统，这也就是我今天打算分享的由来。</p>\n</blockquote>\n<blockquote>\n<p>全景漫游（英文：panorama）技术可以让体验者在全景图像构建的全景空间里切换视角的浏览。它是通过拍摄全景图像，再采用计算机图形图像技术构建出全景空间，让使用者能用控制浏览的方向，或左或右、或上或下观看物体或场景，仿佛身临其境一般。与传统的3D建模相比，全景漫游技术制作简单，数据量小，系统消耗低，且更有真实感。</p>\n</blockquote>\n<h2 id=\"二、需求分析和解决方案\"><a href=\"#二、需求分析和解决方案\" class=\"headerlink\" title=\"二、需求分析和解决方案\"></a>二、需求分析和解决方案</h2><blockquote>\n<p>有了想做一个自己的全景系统这样一个想法之后，就得想办法如何去实现它，那么首先，我们参考了业界流行的解决方案，比方说，在当时很流行的<a href=\"https://720yun.com/\">720云</a>等全景制作平台，当时刚打开他们的网站，确实被惊艳到了，原来浏览器可以展示这么酷炫的效果，下一秒就开始好奇，他们是如何做到的。虽然他们提供了一套的制作流程，但是我们的需求是自己搞一个高度定制化的全景系统。所以职业习惯，下意识的我便按下了F12，找到source面板，在一堆文件夹下面开始找，终于给我找到了： </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/1.png?raw=true\"></p>\n<blockquote>\n<p>上图可以看到注释……原来他们用的是krpano.js 顺藤摸瓜便打开了<a href=\"https://krpano.com/\">krpano.js的官网</a>,打开后，刚开始一脸懵逼，全部都是英文，原来开发框架的是德国人，关键点是，框架收费的，129英镑，人民币1000多，但是项目组任性出钱买了下来（因为没有买版权，做出来的场景是带满屏的水印的，但其实到最近这一两年我们才发现，竟然有注册机可以破解版权了，莫名感觉有点亏了）</p>\n</blockquote>\n<blockquote>\n<p>2016年当时其实还没有krpano相关的中文文档可以查阅，唯一的文档就是全英文的官网，而且，将近2000的api，可以说是巨量的，当时也是边做边学。不像现在，入门都有中文文档，有个<a href=\"http://www.krpano360.com/\">krpano中文网</a>，个人维护的，质量不错，入门足够。</p>\n</blockquote>\n<h2 id=\"三、krpano-js简介\"><a href=\"#三、krpano-js简介\" class=\"headerlink\" title=\"三、krpano.js简介\"></a>三、krpano.js简介</h2><blockquote>\n<p>krpano是一款全景漫游制作软件和工具。其具有以下特点：</p>\n</blockquote>\n<ul>\n<li>高度灵活、性能卓越的轻量化全景漫游浏览器。</li>\n<li>兼容HTML5和Flash，支持Webgl下的WebVR展示。</li>\n<li>使用专用的krpano xml代码编写全景漫游，可开发出高度定制化的项目，也可利用krpano工具开发在线全景制作及展示平台。</li>\n<li>支持多种类型的全景图以及全景视频和环物全景。</li>\n<li>支持多种投影模式。</li>\n<li>同时提供简单高效的批处理方式，可在无需代码干预下迅速生成一个基本功能兼备的全景漫游项目。</li>\n</ul>\n<h2 id=\"四、原理\"><a href=\"#四、原理\" class=\"headerlink\" title=\"四、原理\"></a>四、原理</h2><blockquote>\n<p>其原理主要就是利用全景图制作工具，将一张全景图，制作成6张图片切片，这6张图片分别对应六面体的前后左右上下，六个方位，人的视角在六面体的中间位置，四周形成720°球面坐标系。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/3.png?raw=true\"></p>\n<blockquote>\n<p>切片的特殊地方就在于边缘的虚化效果，使得过渡非常自然，如果我们把切片替换成未处理的图片，那么会出现如下的效果，至少能看的出来，其实就是图片拼接出来的六面体而已：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/2.png?raw=true\"></p>\n<h2 id=\"五、应用\"><a href=\"#五、应用\" class=\"headerlink\" title=\"五、应用\"></a>五、应用</h2><blockquote>\n<p>那么应用的话呢，主要看你需求了，单纯的展示，就很简单，去业界主流的全景制作平台，或者，使用krpano自己的制作工具来进行制作。如果是想定制化一个系统或者产品，那就得深入krpano的文档进行学习了。</p>\n</blockquote>\n<h3 id=\"一、单纯的展示\"><a href=\"#一、单纯的展示\" class=\"headerlink\" title=\"一、单纯的展示\"></a>一、单纯的展示</h3><blockquote>\n<p>业界的全景制作平台流程就不说了，基本都是傻瓜式的操作，下面给大家简单介绍一下，官网下载的包里都有些什么东西，首先放一张图,大概看下结构：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/4.png?raw=true\"></p>\n<h4 id=\"examples文件夹\"><a href=\"#examples文件夹\" class=\"headerlink\" title=\"examples文件夹\"></a>examples文件夹</h4><blockquote>\n<p>这是krpano的案例文件夹(1.19的examples文件夹在viewer文件夹下)，这些案例都是学习krpano代码的很好的素材。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/8.png?raw=true\"></p>\n<h4 id=\"templates文件夹\"><a href=\"#templates文件夹\" class=\"headerlink\" title=\"templates文件夹\"></a>templates文件夹</h4><blockquote>\n<p>官方一系列模版所在的文件夹，包括了图片、xml、html以及相关配置文件等。通过对这里的了解和修改，我们可以做出自己的皮肤模版，然后一键生成，实现批量的工作流。不过正常情况下，我们通过批量处理工具，会自动生成，不需要从这里拷贝。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/9.png?raw=true\"></p>\n<h4 id=\"viewer文件夹\"><a href=\"#viewer文件夹\" class=\"headerlink\" title=\"viewer文件夹\"></a>viewer文件夹</h4><blockquote>\n<p>krpano 下载包的官方插件、引擎、案例的存放位置，同时也是让案例文件夹能够正确显示的 viewer 所在的位置。其中plugins是当前版本的所有官方插件；examples是官方提供的案例。 </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/10.png?raw=true\"></p>\n<h4 id=\"droplet-bat-文件\"><a href=\"#droplet-bat-文件\" class=\"headerlink\" title=\"droplet.bat 文件\"></a>droplet.bat 文件</h4><blockquote>\n<p>Krpano Droplets 是krpano命令行工具加上配置文件config的一个快捷方式。droplets使用方式非常简单，将文件（通常是图片或者xml等文件）直接拖放在droplet图标上松开即可。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/11.png?raw=true\"></p>\n<ul>\n<li>MAKE PANO开头的，是只制作全景图片，并不整合成漫游文件夹</li>\n<li>MAKE VTOUR开头的，是制作全景图片，并且将他们整合到一个虚拟漫游中</li>\n<li>我们一般常用带有MULTIRES的处理文件，因为这样会生成所有类型的全景图像，而NORMAL只能生成360°的全景图像</li>\n</ul>\n<h4 id=\"krpano-Tools-exe\"><a href=\"#krpano-Tools-exe\" class=\"headerlink\" title=\"krpano Tools.exe\"></a>krpano Tools.exe</h4><blockquote>\n<p>用来加密保护全景项目的可视化工具，需要注册才可以使用  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/6.png?raw=true\"></p>\n<h4 id=\"krpano-Testing-Server\"><a href=\"#krpano-Testing-Server\" class=\"headerlink\" title=\"krpano Testing Server\"></a>krpano Testing Server</h4><blockquote>\n<p>krpano 自带的静态文件本地服务环境，使用它可以路过本地文件案例限制来查看 Flash 与 HTML5 效果，。我们如果想要本地查看效果的时候，需要启动它，然后再打开对应的案例的html文件。  </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/5.png?raw=true\"></p>\n<h4 id=\"生成文件说明\"><a href=\"#生成文件说明\" class=\"headerlink\" title=\"生成文件说明\"></a>生成文件说明</h4><blockquote>\n<p>通过使用上述的droplet.bat文件，也就是将全景图拖到droplet.bat文件上面，会打开控制台，等程序跑完，就会出现一个vtour文件夹，文件夹内容如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vtour&#x2F;</span><br><span class=\"line\">| -- panos&#x2F;             #存放全景切片图片的文件夹</span><br><span class=\"line\">| -- skin&#x2F;              #存放皮肤相关文件</span><br><span class=\"line\">| -- plugins&#x2F;           #用来存放插件</span><br><span class=\"line\">| -- tour.swf           #krpano flash viewer</span><br><span class=\"line\">| -- tour.js            #krpano HTML5 viewer</span><br><span class=\"line\">| -- tour.xml           #生成全景的相关配置</span><br><span class=\"line\">| -- tour.html          #用来浏览全景的页面，需要本地服务环境</span><br><span class=\"line\">| -- tour_editor.html   #添加热点（hotspot）与初始化视角设置的编辑器</span><br><span class=\"line\">| -- tour_testingserver.exe #windows系统中打开测试服务器并打开html文件进行本地浏览。</span><br><span class=\"line\">| -- tour_testingserver_macos #mac系统中打开测试服务器并打开html文件进行本地浏览。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、自定义\"><a href=\"#二、自定义\" class=\"headerlink\" title=\"二、自定义\"></a>二、自定义</h3><blockquote>\n<p>说是自定义，其实代码结构和工具生成的方式一样，只不过形式上有所区别，下面，工具生成的代码结构，给大家讲解下，它究竟是如何运行的。</p>\n</blockquote>\n<h4 id=\"1、代码结构\"><a href=\"#1、代码结构\" class=\"headerlink\" title=\"1、代码结构\"></a>1、代码结构</h4><h5 id=\"tour-html\"><a href=\"#tour-html\" class=\"headerlink\" title=\"tour.html\"></a>tour.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pano&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;tour.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    embedpano(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        swf: <span class=\"string\">&quot;tour.swf&quot;</span>, <span class=\"comment\">//有则表示加载flash引擎，如果设置html5:only则不需要该值</span></span></span><br><span class=\"line\"><span class=\"javascript\">        xml: <span class=\"string\">&quot;tour.xml&quot;</span>, <span class=\"comment\">//启动时的配置文件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        target: <span class=\"string\">&quot;pano&quot;</span>, <span class=\"comment\">//要渲染到的目标容器ID</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html5: <span class=\"string\">&quot;only&quot;</span>, <span class=\"comment\">//如果有需要用到flash，可设置为auto</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//id: &quot;krpanoSWFObject&quot;, //默认的krpano对象，每一个viewer对应唯一id，与JS交互时要用到</span></span></span><br><span class=\"line\"><span class=\"javascript\">        mobilescale: <span class=\"number\">1.0</span>, <span class=\"comment\">//移动设备缩放，1表示不缩放，默认0.5</span></span></span><br><span class=\"line\"><span class=\"javascript\">        passQueryParameters: <span class=\"literal\">false</span> <span class=\"comment\">//是否接受URL传参，例如：tour.html?html5=only&amp;startscene=scene2</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"tour-xml\"><a href=\"#tour-xml\" class=\"headerlink\" title=\"tour.xml\"></a>tour.xml</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">krpano</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.19&quot;</span>     //版本号</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">onstart</span>=<span class=\"string\">&quot;&quot;</span>         //进入漫游时，<span class=\"attr\">xml</span>加载和解析后执行的动作</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">basedir</span>=<span class=\"string\">&quot;%FIRSTXML%&quot;</span> //设置程序根目录</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">bgcolor</span>=<span class=\"string\">&quot;&quot;</span>      //全景播放器的背景色，不设置则为透明</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">colorcorrection</span>=<span class=\"string\">&quot;default&quot;</span> //改变<span class=\"attr\">Flashplayer</span> <span class=\"attr\">10</span>的色彩修正设置(<span class=\"attr\">Flash</span> <span class=\"attr\">only</span>)　可选的值：<span class=\"attr\">default</span>、<span class=\"attr\">on</span>、<span class=\"attr\">off</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">logkey</span>=<span class=\"string\">&quot;true&quot;</span>     //当为<span class=\"attr\">Ture</span>时，按<span class=\"attr\">O</span>可查看<span class=\"attr\">log</span>日志</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">strict</span>=<span class=\"string\">&quot;false&quot;</span>            //严格代码模式</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">showerrors</span>=<span class=\"string\">&quot;true&quot;</span>  //是否输出错误信息</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">debugmode</span>=<span class=\"string\">&quot;false&quot;</span>  //当为<span class=\"attr\">True</span>时，显示来自插件中的<span class=\"attr\">trace</span>(<span class=\"attr\">0</span>,<span class=\"attr\">text</span>)中的<span class=\"attr\">text</span>信息</span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">krpano</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>krpano作为XML文件唯一根元素，必须设置！</p>\n</blockquote>\n<h5 id=\"XML文件配置\"><a href=\"#XML文件配置\" class=\"headerlink\" title=\"XML文件配置\"></a>XML文件配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">krpano</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>  //xml文件的相互引用，比如皮肤xml等</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">preview</span>&gt;</span> //预览，加载预览图，渲染优化</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">image</span>&gt;</span> //六个方位的切片图</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>  //具体场景的视图，对应六面体的六个方位</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">autorotate</span>&gt;</span>  //场景自动旋转</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span>  //插件 背景音乐，陀螺仪等</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layer</span>&gt;</span>    //图层，比如控制器</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hotspot</span>&gt;</span>  //切换场景热点</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">events</span>&gt;</span> //事件响应</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span>&gt;</span> //交互指令</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scene</span>&gt;</span> //场景</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">krpano</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、渲染处理\"><a href=\"#2、渲染处理\" class=\"headerlink\" title=\"2、渲染处理\"></a>2、渲染处理</h4><blockquote>\n<p>a、首先，我们需要根据UI设计图，参照文档API，来对xml模板进行修改处理，来达到我们自己想要的那种效果。</p>\n</blockquote>\n<blockquote>\n<p>b、然后呢，我们会将主xml和公用的xml，放到后台java目录webapp下面的resource文件夹，这样，我们在js读取的时候，只需要采用相对路径即可</p>\n</blockquote>\n<blockquote>\n<p>c、动态场景所需要的对应的xml，只能由后台生成，后台有一套场景模板，和一套对xml进行节点操作的处理逻辑，然后将xml路径以正常的ajax请求返回给前端，前端进行场景加载等操作</p>\n</blockquote>\n<blockquote>\n<p>krpano渲染的方式如下，可以看到，主要的就是tour.xml文件，其他诸如插件，皮肤之类的，也是xml，不过将会被include标签引入tour.xml</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190719/7.png?raw=true\"></p>\n<h4 id=\"3、交互处理\"><a href=\"#3、交互处理\" class=\"headerlink\" title=\"3、交互处理\"></a>3、交互处理</h4><blockquote>\n<p>既然是浏览器展示型的框架，那么交互一定是不能少了，你们一定很好奇，那像上面那样说的，krpano通过xml配置进行渲染，而js脚本又是单独的，那么如何去完成统一的交互呢？说白了，也就是说，如何去完成krpano和js脚本之间的通信？其实有几种方式：</p>\n</blockquote>\n<h5 id=\"krpano内置指令\"><a href=\"#krpano内置指令\" class=\"headerlink\" title=\"krpano内置指令\"></a>krpano内置指令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;layer name&#x3D;&quot;skin_btn_comment&quot;  onclick&#x3D;&quot;skin_add_comment()&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action name&#x3D;&quot;skin_add_comment&quot;&gt;</span><br><span class=\"line\">    set(hotspot[get(hotspotName)].width, &#39;30px&#39;);</span><br><span class=\"line\">    set(hotspot[get(hotspotName)].height, &#39;30px&#39;);</span><br><span class=\"line\">&lt;&#x2F;action&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上代码，layer是krpano内置的图层标签，类似于地图交互上的覆盖物，action呢之前也提了，表示声明一个交互指令，layer上可以绑定各种各样的方法，具体可以参考官网文档，这个方法的值，就是action标签name值的函数调用，当我们点击这个layer的时候，action包裹的各种操作就会被触发，action里包裹的便是krpano的内置语法处理。</p>\n</blockquote>\n<h5 id=\"call的方式\"><a href=\"#call的方式\" class=\"headerlink\" title=\"call的方式\"></a>call的方式</h5><blockquote>\n<p>所谓的call方式，其实和js里call,apply的语义是类似的，也就是借调，这里的call，就是指krpano和js脚本互相调用。</p>\n</blockquote>\n<blockquote>\n<p>其实大部分的场景，我们是需要这样的一种通信方式的，比如参数传递，数据存储之类的，很多时候，krpano的操作，需要用到js脚本的变量，而自定义的页面元素，js脚本又得调用krpano的指令。</p>\n</blockquote>\n<blockquote>\n<p>首先，我们来看下，krpano的xml中，如何调用js里声明的方法呢</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;xxx.js</span><br><span class=\"line\"></span><br><span class=\"line\">function callKrpano(id) &#123;</span><br><span class=\"line\">    $(&quot;#vrHotspotID&quot;).val(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在js脚本里声明一个方法，这个方法接受一个id的参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action name&#x3D;&quot;skin_add_comment&quot;&gt;</span><br><span class=\"line\">    js(callKrpano(get(hotspotName)));</span><br><span class=\"line\">&lt;&#x2F;action&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在xml里可以使用js(functionName)的方式，来调用js的方法</p>\n</blockquote>\n<blockquote>\n<p>然后，我们再看下，js里调用krpano的语法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function loadPano(xmlPath) &#123;</span><br><span class=\"line\">    var krpano &#x3D; document.getElementById(&quot;krpanoSWFObject&quot;);</span><br><span class=\"line\">    krpano.call(&#39;loadpano(&#39; + xmlPath + &#39;)&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以通过dom操作，获取到krpano对象，krpano对象里集成了一个call方法，这个方法接收的是字符串形式的kapano内置语法段，注意，如果有js变量，我们需要进行拼接。比方说上面表示，就是js执行krpano的加载场景的这个指令。</p>\n</blockquote>\n<h2 id=\"六、结语\"><a href=\"#六、结语\" class=\"headerlink\" title=\"六、结语\"></a>六、结语</h2><blockquote>\n<p>其实今天时间不多，只能给大家讲个极其入门的大概，krpano这个全景框架，大家有兴趣可以去了解下，入门的话就去krpano中文网，如果想深入了解，建议还是慢慢看官网文档，全英文的，配合有道词典什么的，慢慢嗑。说实话，这东西过了这么长时间，没怎么用，很多东西都忘记了，只能到再用到的时候，再去边查边用，因为人的精力是有限的，合理的分配时间和精力，才是最重要的选择。</p>\n</blockquote>\n"},{"title":"交叉观察者IntersectionObserver介绍","date":"2019-09-20T13:08:19.000Z","_content":"\n\n## 介绍\n\n> 关于IntersectionObserver，MDN里是这么介绍的:\n\n> IntersectionObserver接口，提供了一种异步观察目标元素与其祖先元素或者顶级文档视窗(viewport)交叉状态的方法，祖先元素与视窗被称为根(root)\n\n> 通过上面的介绍，我们大概知道了IntersectionObserver翻译为“交叉观察者”，它的任务就是监听目标元素跟指定父元素(若未指定，则默认为视窗)是否发生交叉行为，简单理解就是监听目标元素是否进入或者离开了指定父元素的内部。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/1.png?raw=true)\n\n## 用法\n\n### 1、构造函数\n```js\nnew IntersectionObserver(callback,options);\n```\n### 2、callback\n\n> 发生交叉的回调，接受一个entries参数，返回当前已监听并且发生了交叉的目标集合\n\n```js\nnew IntersectionObserver(entries => {\n    entries.forEach(item => console.log(item))\n},options);\n```\n> 下面介绍下item里包含的常用属性：\n\n| 属性        | 说明    |\n| :--------   | :-----  |\n| boundingClientRect        | 元素空间信息      | \n| intersectionRatio        | 元素可见区域的占比      |  \n| isIntersecting        | 字面理解为是否正在交叉，可用做判断元素是否可见      |   \n|target | 目标节点，与event,target类似 |\n\n> 这里需要注意的是，页面初始化的时候，会触发一次callback，其中的entries为所有已监听的目标集合\n\n### 3、options\n\n> 顾名思义，他是一个配置参数，对象类型，非必填，常用属性如下：\n\n|属性|说明|\n|:---------|:---|\n|root|指定父元素，默认为视窗viewport|\n|rootMargin|触发交叉的偏移值，默认为“0px 0px 0px 0px”(上左下右，正数为向外扩散，负数则向内收缩)|\n\n```js\nnew IntersectionObserver(callback, {\n  root: document.querySelector(\"xx\"),\n  rootMargin: \"0px 0px -100px 0px\"\n});\n```\n> 如果设置rootMargin为\"20px 0px 30px 30px\",相当于范围相对于视窗外扩，如下图，那么元素未达到视窗时，就已经切换为可见状态了:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/2.png?raw=true)\n\n### 4、常用方法\n|名称|说明|参数|\n|:---|:---|:---|\n|observe|开始监听一个目标元素|节点|\n|unobserve|停止监听一个目标元素|节点|\n|takeRecords|返回所有监听的目标元素集合||\n|disconnect|停止所有监听||\n\n## 例子\n### 1. 假设页面上有一个class=\"box\"的盒子且父元素为视窗：\n\n```js\nlet box = document.querySelector(\".box\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    let tips = item.isIntersecting ? \"进入了父元素的内部\" : \"离开了父元素的内部\";\n    console.log(tips);\n  });\n});\n\nobserver.observe(box); // 监听一个box\n\n```\n\n> 效果如下：       \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/3.gif?raw=true)\n\n### 2. 假设页面上有多个class=\"box\"的盒子且父元素为视窗：\n\n```js\nlet box = document.querySelectorAll(\".box\");\n\nlet observer = new IntersectionObserver(entries => console.log(`发生交叉行为，目标元素有${entries.length}个`));\n\nbox.forEach(item => observer.observe(item)); // 监听多个box\n\n```\n\n> 当所有盒子距离视窗顶部距离一致时，效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/4.gif?raw=true)\n\n> 当所有盒子距离视窗顶部距离不一致时，效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/5.gif?raw=true)\n\n> 关于举例上面两种情况，因为entries是返回当前已监听并且发生了交叉的目标集合，第一种情况是大家一起发生了交叉，因此每次返回的长度为3，第二种情况则是每个目标轮流发生交叉，且每次只触发一个，因此集合每次返回的长度为1。\n\n### 3. 指定父元素\n\n> 假设html如下:\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n> 然后开始监听：\n\n```js\nlet child = document.querySelector(\".child\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    console.log(item.isIntersecting ? \"可见\" : \"不可见\");\n  });\n}, {\n  root: document.querySelector(\".parent\")\n});\n\nobserver.observe(child); // 开始监听child\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/6.gif?raw=true)\n\n## 实际应用\n\n### 1、图片懒加载\n\n> 以前我们做图片懒加载，都是监听浏览器的滚动，然后遍历拿到每个图片的空间信息，然后判断一些位置信息，从而进行图片加载；而现在，只需要交给交叉观察者去做：\n\n> 假设html结构如下：\n\n```html\n// 多个\n<img src=\"\" data-origin=\"图片链接\">\n```\n\n> 然后开始监听：\n\n```js\nlet images = document.querySelectorAll(\"img.lazyload\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    if (item.isIntersecting) {\n      item.target.src = item.target.dataset.origin; // 开始加载图片\n      observer.unobserve(item.target); // 停止监听已开始加载的图片\n    }\n  });\n});\n\nimages.forEach(item => observer.observe(item));\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/8.gif?raw=true)\n\n> 把网速调慢：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true\n\n> 当滚动条为横向滚动的时候，我们依然可以进行懒加载的监听：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/9.gif?raw=true)\n\n> 传统的懒加载只是监听全局滚动条的滚动，像这种小细节还是无法实现的（传统的实现方法并不是判断目标是否出现在视窗，所以横向的图片会一起加载，即使你没有向左滑动），所以这也是交叉观察者的一大优点\n\n### 2、触底\n\n> 触底加载的方式，在移动端列表的场景中十分常见，通常我们是通过监听列表本身的滚动距离与列表高度和视口高度的视差进行比较，从而判断是否触底。但是有了交叉观察者之后，我们的做法就很简单了。\n\n> 我们可以在列表底部，放置一个参照元素，我们让交叉观察者去监听：\n\n> html结构如下:\n\n```html\n<!-- 数据列表 -->\n<ul>\n  <li>index</li>\n</ul>\n\n<!-- 参照元素 -->\n<div class=\"reference\"></div>\n```\n\n> 然后监听参照元素：\n\n```js\nnew IntersectionObserver(entries => {\n  let item = entries[0]; // 拿第一个就行，反正只有一个\n  if (item.isIntersecting) console.log(\"滚动到了底部，开始请求数据\");\n}).observe(document.querySelector(\".reference\")); // 监听参照元素\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/10.gif?raw=true)\n\n### 3、吸顶\n\n> 实现元素吸顶的方式有很多种，如css的position: sticky，兼容性较差；如果用交叉观察者实现也很方便，同样也要放一个参照元素；\n\n> 假设html结构如下：\n\n```html\n<!-- 参照元素 -->\n<div class=\"reference\"></div>\n\n<nav>我可以吸顶</nav>\n```\n\n> 假设scss代码如下：\n\n```scss\nnav {\n  &.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n  }\n}\n```\n\n> 开始监听：\n\n```js\nlet nav = document.querySelector('nav');\nlet reference = document.querySelector(\".reference\");\n\nnew IntersectionObserver(entries => {\n\n  let item = entries[0];\n  let top = item.boundingClientRect.top;\n\n  // 当参照元素的的top值小于0，也就是在视窗的顶部的时候，开始吸顶，否则移除吸顶\n  if (top < 0) nav.classList.add(\"fixed\");\n  else nav.classList.remove(\"fixed\");\n\n}).observe(reference);\n\n```\n\n> 效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/11.gif?raw=true)\n\n> 如果这么简单就好了，这样会有个问题，如果滚的慢的时候，会掉进一个死循环：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/12.gif?raw=true)\n\n> 为了方便观察，我们把参考元素加一个高度跟颜色：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/13.gif?raw=true)\n\n> 看图，问题很明显，当给nav增加fixed定位的时候，nav脱离了文档流，因此参考元素会往下掉，然后就会又发生交叉，从而去除了fixed定位，陷入一个死循环......\n\n> 解决方式是，让参考元素脱离文档流，可以让它绝对定位至nav的上方：\n\n```js\nlet nav = document.querySelector('nav');\nlet reference = document.querySelector(\".reference\");\n\nreference.style.top = nav.offsetTop + \"px\";\n\n// 以下代码不变 ...\n\n```\n\n> 效果如下\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/14.gif?raw=true)\n\n\n## 兼容性\n\n> IE不兼容，不过有[官方的polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill)\n","source":"_posts/交叉观察者IntersectionObserver介绍.md","raw":"---\ntitle: 交叉观察者IntersectionObserver介绍\ndate: 2019-09-20 21:08:19\ntags:\n  - IntersectionObserver\n  - 浏览器API\ncategories:\n  - IntersectionObserver\n  - BOM\n---\n\n\n## 介绍\n\n> 关于IntersectionObserver，MDN里是这么介绍的:\n\n> IntersectionObserver接口，提供了一种异步观察目标元素与其祖先元素或者顶级文档视窗(viewport)交叉状态的方法，祖先元素与视窗被称为根(root)\n\n> 通过上面的介绍，我们大概知道了IntersectionObserver翻译为“交叉观察者”，它的任务就是监听目标元素跟指定父元素(若未指定，则默认为视窗)是否发生交叉行为，简单理解就是监听目标元素是否进入或者离开了指定父元素的内部。\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/1.png?raw=true)\n\n## 用法\n\n### 1、构造函数\n```js\nnew IntersectionObserver(callback,options);\n```\n### 2、callback\n\n> 发生交叉的回调，接受一个entries参数，返回当前已监听并且发生了交叉的目标集合\n\n```js\nnew IntersectionObserver(entries => {\n    entries.forEach(item => console.log(item))\n},options);\n```\n> 下面介绍下item里包含的常用属性：\n\n| 属性        | 说明    |\n| :--------   | :-----  |\n| boundingClientRect        | 元素空间信息      | \n| intersectionRatio        | 元素可见区域的占比      |  \n| isIntersecting        | 字面理解为是否正在交叉，可用做判断元素是否可见      |   \n|target | 目标节点，与event,target类似 |\n\n> 这里需要注意的是，页面初始化的时候，会触发一次callback，其中的entries为所有已监听的目标集合\n\n### 3、options\n\n> 顾名思义，他是一个配置参数，对象类型，非必填，常用属性如下：\n\n|属性|说明|\n|:---------|:---|\n|root|指定父元素，默认为视窗viewport|\n|rootMargin|触发交叉的偏移值，默认为“0px 0px 0px 0px”(上左下右，正数为向外扩散，负数则向内收缩)|\n\n```js\nnew IntersectionObserver(callback, {\n  root: document.querySelector(\"xx\"),\n  rootMargin: \"0px 0px -100px 0px\"\n});\n```\n> 如果设置rootMargin为\"20px 0px 30px 30px\",相当于范围相对于视窗外扩，如下图，那么元素未达到视窗时，就已经切换为可见状态了:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/2.png?raw=true)\n\n### 4、常用方法\n|名称|说明|参数|\n|:---|:---|:---|\n|observe|开始监听一个目标元素|节点|\n|unobserve|停止监听一个目标元素|节点|\n|takeRecords|返回所有监听的目标元素集合||\n|disconnect|停止所有监听||\n\n## 例子\n### 1. 假设页面上有一个class=\"box\"的盒子且父元素为视窗：\n\n```js\nlet box = document.querySelector(\".box\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    let tips = item.isIntersecting ? \"进入了父元素的内部\" : \"离开了父元素的内部\";\n    console.log(tips);\n  });\n});\n\nobserver.observe(box); // 监听一个box\n\n```\n\n> 效果如下：       \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/3.gif?raw=true)\n\n### 2. 假设页面上有多个class=\"box\"的盒子且父元素为视窗：\n\n```js\nlet box = document.querySelectorAll(\".box\");\n\nlet observer = new IntersectionObserver(entries => console.log(`发生交叉行为，目标元素有${entries.length}个`));\n\nbox.forEach(item => observer.observe(item)); // 监听多个box\n\n```\n\n> 当所有盒子距离视窗顶部距离一致时，效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/4.gif?raw=true)\n\n> 当所有盒子距离视窗顶部距离不一致时，效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/5.gif?raw=true)\n\n> 关于举例上面两种情况，因为entries是返回当前已监听并且发生了交叉的目标集合，第一种情况是大家一起发生了交叉，因此每次返回的长度为3，第二种情况则是每个目标轮流发生交叉，且每次只触发一个，因此集合每次返回的长度为1。\n\n### 3. 指定父元素\n\n> 假设html如下:\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n> 然后开始监听：\n\n```js\nlet child = document.querySelector(\".child\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    console.log(item.isIntersecting ? \"可见\" : \"不可见\");\n  });\n}, {\n  root: document.querySelector(\".parent\")\n});\n\nobserver.observe(child); // 开始监听child\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/6.gif?raw=true)\n\n## 实际应用\n\n### 1、图片懒加载\n\n> 以前我们做图片懒加载，都是监听浏览器的滚动，然后遍历拿到每个图片的空间信息，然后判断一些位置信息，从而进行图片加载；而现在，只需要交给交叉观察者去做：\n\n> 假设html结构如下：\n\n```html\n// 多个\n<img src=\"\" data-origin=\"图片链接\">\n```\n\n> 然后开始监听：\n\n```js\nlet images = document.querySelectorAll(\"img.lazyload\");\n\nlet observer = new IntersectionObserver(entries => {\n  entries.forEach(item => {\n    if (item.isIntersecting) {\n      item.target.src = item.target.dataset.origin; // 开始加载图片\n      observer.unobserve(item.target); // 停止监听已开始加载的图片\n    }\n  });\n});\n\nimages.forEach(item => observer.observe(item));\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/8.gif?raw=true)\n\n> 把网速调慢：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true\n\n> 当滚动条为横向滚动的时候，我们依然可以进行懒加载的监听：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/9.gif?raw=true)\n\n> 传统的懒加载只是监听全局滚动条的滚动，像这种小细节还是无法实现的（传统的实现方法并不是判断目标是否出现在视窗，所以横向的图片会一起加载，即使你没有向左滑动），所以这也是交叉观察者的一大优点\n\n### 2、触底\n\n> 触底加载的方式，在移动端列表的场景中十分常见，通常我们是通过监听列表本身的滚动距离与列表高度和视口高度的视差进行比较，从而判断是否触底。但是有了交叉观察者之后，我们的做法就很简单了。\n\n> 我们可以在列表底部，放置一个参照元素，我们让交叉观察者去监听：\n\n> html结构如下:\n\n```html\n<!-- 数据列表 -->\n<ul>\n  <li>index</li>\n</ul>\n\n<!-- 参照元素 -->\n<div class=\"reference\"></div>\n```\n\n> 然后监听参照元素：\n\n```js\nnew IntersectionObserver(entries => {\n  let item = entries[0]; // 拿第一个就行，反正只有一个\n  if (item.isIntersecting) console.log(\"滚动到了底部，开始请求数据\");\n}).observe(document.querySelector(\".reference\")); // 监听参照元素\n\n```\n\n> 效果如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/10.gif?raw=true)\n\n### 3、吸顶\n\n> 实现元素吸顶的方式有很多种，如css的position: sticky，兼容性较差；如果用交叉观察者实现也很方便，同样也要放一个参照元素；\n\n> 假设html结构如下：\n\n```html\n<!-- 参照元素 -->\n<div class=\"reference\"></div>\n\n<nav>我可以吸顶</nav>\n```\n\n> 假设scss代码如下：\n\n```scss\nnav {\n  &.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n  }\n}\n```\n\n> 开始监听：\n\n```js\nlet nav = document.querySelector('nav');\nlet reference = document.querySelector(\".reference\");\n\nnew IntersectionObserver(entries => {\n\n  let item = entries[0];\n  let top = item.boundingClientRect.top;\n\n  // 当参照元素的的top值小于0，也就是在视窗的顶部的时候，开始吸顶，否则移除吸顶\n  if (top < 0) nav.classList.add(\"fixed\");\n  else nav.classList.remove(\"fixed\");\n\n}).observe(reference);\n\n```\n\n> 效果如下:\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/11.gif?raw=true)\n\n> 如果这么简单就好了，这样会有个问题，如果滚的慢的时候，会掉进一个死循环：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/12.gif?raw=true)\n\n> 为了方便观察，我们把参考元素加一个高度跟颜色：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/13.gif?raw=true)\n\n> 看图，问题很明显，当给nav增加fixed定位的时候，nav脱离了文档流，因此参考元素会往下掉，然后就会又发生交叉，从而去除了fixed定位，陷入一个死循环......\n\n> 解决方式是，让参考元素脱离文档流，可以让它绝对定位至nav的上方：\n\n```js\nlet nav = document.querySelector('nav');\nlet reference = document.querySelector(\".reference\");\n\nreference.style.top = nav.offsetTop + \"px\";\n\n// 以下代码不变 ...\n\n```\n\n> 效果如下\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190921/14.gif?raw=true)\n\n\n## 兼容性\n\n> IE不兼容，不过有[官方的polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill)\n","slug":"交叉观察者IntersectionObserver介绍","published":1,"updated":"2019-09-21T03:57:42.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmb0024msviedjxfh9y","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>关于IntersectionObserver，MDN里是这么介绍的:</p>\n</blockquote>\n<blockquote>\n<p>IntersectionObserver接口，提供了一种异步观察目标元素与其祖先元素或者顶级文档视窗(viewport)交叉状态的方法，祖先元素与视窗被称为根(root)</p>\n</blockquote>\n<blockquote>\n<p>通过上面的介绍，我们大概知道了IntersectionObserver翻译为“交叉观察者”，它的任务就是监听目标元素跟指定父元素(若未指定，则默认为视窗)是否发生交叉行为，简单理解就是监听目标元素是否进入或者离开了指定父元素的内部。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/1.png?raw=true\"></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1、构造函数\"><a href=\"#1、构造函数\" class=\"headerlink\" title=\"1、构造函数\"></a>1、构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(callback,options);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、callback\"><a href=\"#2、callback\" class=\"headerlink\" title=\"2、callback\"></a>2、callback</h3><blockquote>\n<p>发生交叉的回调，接受一个entries参数，返回当前已监听并且发生了交叉的目标集合</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\">&#125;,options);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面介绍下item里包含的常用属性：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">boundingClientRect</td>\n<td align=\"left\">元素空间信息</td>\n</tr>\n<tr>\n<td align=\"left\">intersectionRatio</td>\n<td align=\"left\">元素可见区域的占比</td>\n</tr>\n<tr>\n<td align=\"left\">isIntersecting</td>\n<td align=\"left\">字面理解为是否正在交叉，可用做判断元素是否可见</td>\n</tr>\n<tr>\n<td align=\"left\">target</td>\n<td align=\"left\">目标节点，与event,target类似</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这里需要注意的是，页面初始化的时候，会触发一次callback，其中的entries为所有已监听的目标集合</p>\n</blockquote>\n<h3 id=\"3、options\"><a href=\"#3、options\" class=\"headerlink\" title=\"3、options\"></a>3、options</h3><blockquote>\n<p>顾名思义，他是一个配置参数，对象类型，非必填，常用属性如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">root</td>\n<td align=\"left\">指定父元素，默认为视窗viewport</td>\n</tr>\n<tr>\n<td align=\"left\">rootMargin</td>\n<td align=\"left\">触发交叉的偏移值，默认为“0px 0px 0px 0px”(上左下右，正数为向外扩散，负数则向内收缩)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(callback, &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;xx&quot;</span>),</span><br><span class=\"line\">  rootMargin: <span class=\"string\">&quot;0px 0px -100px 0px&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果设置rootMargin为”20px 0px 30px 30px”,相当于范围相对于视窗外扩，如下图，那么元素未达到视窗时，就已经切换为可见状态了:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/2.png?raw=true\"></p>\n<h3 id=\"4、常用方法\"><a href=\"#4、常用方法\" class=\"headerlink\" title=\"4、常用方法\"></a>4、常用方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">开始监听一个目标元素</td>\n<td align=\"left\">节点</td>\n</tr>\n<tr>\n<td align=\"left\">unobserve</td>\n<td align=\"left\">停止监听一个目标元素</td>\n<td align=\"left\">节点</td>\n</tr>\n<tr>\n<td align=\"left\">takeRecords</td>\n<td align=\"left\">返回所有监听的目标元素集合</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">停止所有监听</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"1-假设页面上有一个class-”box”的盒子且父元素为视窗：\"><a href=\"#1-假设页面上有一个class-”box”的盒子且父元素为视窗：\" class=\"headerlink\" title=\"1. 假设页面上有一个class=”box”的盒子且父元素为视窗：\"></a>1. 假设页面上有一个class=”box”的盒子且父元素为视窗：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tips = item.isIntersecting ? <span class=\"string\">&quot;进入了父元素的内部&quot;</span> : <span class=\"string\">&quot;离开了父元素的内部&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tips);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observer.observe(box); <span class=\"comment\">// 监听一个box</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：       </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/3.gif?raw=true\"></p>\n<h3 id=\"2-假设页面上有多个class-”box”的盒子且父元素为视窗：\"><a href=\"#2-假设页面上有多个class-”box”的盒子且父元素为视窗：\" class=\"headerlink\" title=\"2. 假设页面上有多个class=”box”的盒子且父元素为视窗：\"></a>2. 假设页面上有多个class=”box”的盒子且父元素为视窗：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.box&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`发生交叉行为，目标元素有<span class=\"subst\">$&#123;entries.length&#125;</span>个`</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">box.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> observer.observe(item)); <span class=\"comment\">// 监听多个box</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当所有盒子距离视窗顶部距离一致时，效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/4.gif?raw=true\"></p>\n<blockquote>\n<p>当所有盒子距离视窗顶部距离不一致时，效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/5.gif?raw=true\"></p>\n<blockquote>\n<p>关于举例上面两种情况，因为entries是返回当前已监听并且发生了交叉的目标集合，第一种情况是大家一起发生了交叉，因此每次返回的长度为3，第二种情况则是每个目标轮流发生交叉，且每次只触发一个，因此集合每次返回的长度为1。</p>\n</blockquote>\n<h3 id=\"3-指定父元素\"><a href=\"#3-指定父元素\" class=\"headerlink\" title=\"3. 指定父元素\"></a>3. 指定父元素</h3><blockquote>\n<p>假设html如下:</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.child&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.isIntersecting ? <span class=\"string\">&quot;可见&quot;</span> : <span class=\"string\">&quot;不可见&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.parent&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observer.observe(child); <span class=\"comment\">// 开始监听child</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/6.gif?raw=true\"></p>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"1、图片懒加载\"><a href=\"#1、图片懒加载\" class=\"headerlink\" title=\"1、图片懒加载\"></a>1、图片懒加载</h3><blockquote>\n<p>以前我们做图片懒加载，都是监听浏览器的滚动，然后遍历拿到每个图片的空间信息，然后判断一些位置信息，从而进行图片加载；而现在，只需要交给交叉观察者去做：</p>\n</blockquote>\n<blockquote>\n<p>假设html结构如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">data-origin</span>=<span class=\"string\">&quot;图片链接&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;img.lazyload&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.isIntersecting) &#123;</span><br><span class=\"line\">      item.target.src = item.target.dataset.origin; <span class=\"comment\">// 开始加载图片</span></span><br><span class=\"line\">      observer.unobserve(item.target); <span class=\"comment\">// 停止监听已开始加载的图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">images.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> observer.observe(item));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/8.gif?raw=true\"></p>\n<blockquote>\n<p>把网速调慢：</p>\n</blockquote>\n<p>![](<a href=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true\">https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true</a></p>\n<blockquote>\n<p>当滚动条为横向滚动的时候，我们依然可以进行懒加载的监听：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/9.gif?raw=true\"></p>\n<blockquote>\n<p>传统的懒加载只是监听全局滚动条的滚动，像这种小细节还是无法实现的（传统的实现方法并不是判断目标是否出现在视窗，所以横向的图片会一起加载，即使你没有向左滑动），所以这也是交叉观察者的一大优点</p>\n</blockquote>\n<h3 id=\"2、触底\"><a href=\"#2、触底\" class=\"headerlink\" title=\"2、触底\"></a>2、触底</h3><blockquote>\n<p>触底加载的方式，在移动端列表的场景中十分常见，通常我们是通过监听列表本身的滚动距离与列表高度和视口高度的视差进行比较，从而判断是否触底。但是有了交叉观察者之后，我们的做法就很简单了。</p>\n</blockquote>\n<blockquote>\n<p>我们可以在列表底部，放置一个参照元素，我们让交叉观察者去监听：</p>\n</blockquote>\n<blockquote>\n<p>html结构如下:</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 数据列表 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 参照元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;reference&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后监听参照元素：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = entries[<span class=\"number\">0</span>]; <span class=\"comment\">// 拿第一个就行，反正只有一个</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item.isIntersecting) <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;滚动到了底部，开始请求数据&quot;</span>);</span><br><span class=\"line\">&#125;).observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>)); <span class=\"comment\">// 监听参照元素</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/10.gif?raw=true\"></p>\n<h3 id=\"3、吸顶\"><a href=\"#3、吸顶\" class=\"headerlink\" title=\"3、吸顶\"></a>3、吸顶</h3><blockquote>\n<p>实现元素吸顶的方式有很多种，如css的position: sticky，兼容性较差；如果用交叉观察者实现也很方便，同样也要放一个参照元素；</p>\n</blockquote>\n<blockquote>\n<p>假设html结构如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 参照元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;reference&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>我可以吸顶<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>假设scss代码如下：</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nav = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;nav&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reference = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = entries[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = item.boundingClientRect.top;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当参照元素的的top值小于0，也就是在视窗的顶部的时候，开始吸顶，否则移除吸顶</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (top &lt; <span class=\"number\">0</span>) nav.classList.add(<span class=\"string\">&quot;fixed&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> nav.classList.remove(<span class=\"string\">&quot;fixed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).observe(reference);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/11.gif?raw=true\"></p>\n<blockquote>\n<p>如果这么简单就好了，这样会有个问题，如果滚的慢的时候，会掉进一个死循环：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/12.gif?raw=true\"></p>\n<blockquote>\n<p>为了方便观察，我们把参考元素加一个高度跟颜色：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/13.gif?raw=true\"></p>\n<blockquote>\n<p>看图，问题很明显，当给nav增加fixed定位的时候，nav脱离了文档流，因此参考元素会往下掉，然后就会又发生交叉，从而去除了fixed定位，陷入一个死循环……</p>\n</blockquote>\n<blockquote>\n<p>解决方式是，让参考元素脱离文档流，可以让它绝对定位至nav的上方：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nav = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;nav&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reference = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">reference.style.top = nav.offsetTop + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下代码不变 ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/14.gif?raw=true\"></p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><blockquote>\n<p>IE不兼容，不过有<a href=\"https://github.com/w3c/IntersectionObserver/tree/master/polyfill\">官方的polyfill</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>关于IntersectionObserver，MDN里是这么介绍的:</p>\n</blockquote>\n<blockquote>\n<p>IntersectionObserver接口，提供了一种异步观察目标元素与其祖先元素或者顶级文档视窗(viewport)交叉状态的方法，祖先元素与视窗被称为根(root)</p>\n</blockquote>\n<blockquote>\n<p>通过上面的介绍，我们大概知道了IntersectionObserver翻译为“交叉观察者”，它的任务就是监听目标元素跟指定父元素(若未指定，则默认为视窗)是否发生交叉行为，简单理解就是监听目标元素是否进入或者离开了指定父元素的内部。</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/1.png?raw=true\"></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1、构造函数\"><a href=\"#1、构造函数\" class=\"headerlink\" title=\"1、构造函数\"></a>1、构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(callback,options);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、callback\"><a href=\"#2、callback\" class=\"headerlink\" title=\"2、callback\"></a>2、callback</h3><blockquote>\n<p>发生交叉的回调，接受一个entries参数，返回当前已监听并且发生了交叉的目标集合</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\">&#125;,options);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面介绍下item里包含的常用属性：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">boundingClientRect</td>\n<td align=\"left\">元素空间信息</td>\n</tr>\n<tr>\n<td align=\"left\">intersectionRatio</td>\n<td align=\"left\">元素可见区域的占比</td>\n</tr>\n<tr>\n<td align=\"left\">isIntersecting</td>\n<td align=\"left\">字面理解为是否正在交叉，可用做判断元素是否可见</td>\n</tr>\n<tr>\n<td align=\"left\">target</td>\n<td align=\"left\">目标节点，与event,target类似</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这里需要注意的是，页面初始化的时候，会触发一次callback，其中的entries为所有已监听的目标集合</p>\n</blockquote>\n<h3 id=\"3、options\"><a href=\"#3、options\" class=\"headerlink\" title=\"3、options\"></a>3、options</h3><blockquote>\n<p>顾名思义，他是一个配置参数，对象类型，非必填，常用属性如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">root</td>\n<td align=\"left\">指定父元素，默认为视窗viewport</td>\n</tr>\n<tr>\n<td align=\"left\">rootMargin</td>\n<td align=\"left\">触发交叉的偏移值，默认为“0px 0px 0px 0px”(上左下右，正数为向外扩散，负数则向内收缩)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(callback, &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;xx&quot;</span>),</span><br><span class=\"line\">  rootMargin: <span class=\"string\">&quot;0px 0px -100px 0px&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果设置rootMargin为”20px 0px 30px 30px”,相当于范围相对于视窗外扩，如下图，那么元素未达到视窗时，就已经切换为可见状态了:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/2.png?raw=true\"></p>\n<h3 id=\"4、常用方法\"><a href=\"#4、常用方法\" class=\"headerlink\" title=\"4、常用方法\"></a>4、常用方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">开始监听一个目标元素</td>\n<td align=\"left\">节点</td>\n</tr>\n<tr>\n<td align=\"left\">unobserve</td>\n<td align=\"left\">停止监听一个目标元素</td>\n<td align=\"left\">节点</td>\n</tr>\n<tr>\n<td align=\"left\">takeRecords</td>\n<td align=\"left\">返回所有监听的目标元素集合</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">停止所有监听</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"1-假设页面上有一个class-”box”的盒子且父元素为视窗：\"><a href=\"#1-假设页面上有一个class-”box”的盒子且父元素为视窗：\" class=\"headerlink\" title=\"1. 假设页面上有一个class=”box”的盒子且父元素为视窗：\"></a>1. 假设页面上有一个class=”box”的盒子且父元素为视窗：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tips = item.isIntersecting ? <span class=\"string\">&quot;进入了父元素的内部&quot;</span> : <span class=\"string\">&quot;离开了父元素的内部&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tips);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observer.observe(box); <span class=\"comment\">// 监听一个box</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：       </p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/3.gif?raw=true\"></p>\n<h3 id=\"2-假设页面上有多个class-”box”的盒子且父元素为视窗：\"><a href=\"#2-假设页面上有多个class-”box”的盒子且父元素为视窗：\" class=\"headerlink\" title=\"2. 假设页面上有多个class=”box”的盒子且父元素为视窗：\"></a>2. 假设页面上有多个class=”box”的盒子且父元素为视窗：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.box&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`发生交叉行为，目标元素有<span class=\"subst\">$&#123;entries.length&#125;</span>个`</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">box.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> observer.observe(item)); <span class=\"comment\">// 监听多个box</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当所有盒子距离视窗顶部距离一致时，效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/4.gif?raw=true\"></p>\n<blockquote>\n<p>当所有盒子距离视窗顶部距离不一致时，效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/5.gif?raw=true\"></p>\n<blockquote>\n<p>关于举例上面两种情况，因为entries是返回当前已监听并且发生了交叉的目标集合，第一种情况是大家一起发生了交叉，因此每次返回的长度为3，第二种情况则是每个目标轮流发生交叉，且每次只触发一个，因此集合每次返回的长度为1。</p>\n</blockquote>\n<h3 id=\"3-指定父元素\"><a href=\"#3-指定父元素\" class=\"headerlink\" title=\"3. 指定父元素\"></a>3. 指定父元素</h3><blockquote>\n<p>假设html如下:</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.child&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.isIntersecting ? <span class=\"string\">&quot;可见&quot;</span> : <span class=\"string\">&quot;不可见&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.parent&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observer.observe(child); <span class=\"comment\">// 开始监听child</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/6.gif?raw=true\"></p>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"1、图片懒加载\"><a href=\"#1、图片懒加载\" class=\"headerlink\" title=\"1、图片懒加载\"></a>1、图片懒加载</h3><blockquote>\n<p>以前我们做图片懒加载，都是监听浏览器的滚动，然后遍历拿到每个图片的空间信息，然后判断一些位置信息，从而进行图片加载；而现在，只需要交给交叉观察者去做：</p>\n</blockquote>\n<blockquote>\n<p>假设html结构如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">data-origin</span>=<span class=\"string\">&quot;图片链接&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> images = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;img.lazyload&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.isIntersecting) &#123;</span><br><span class=\"line\">      item.target.src = item.target.dataset.origin; <span class=\"comment\">// 开始加载图片</span></span><br><span class=\"line\">      observer.unobserve(item.target); <span class=\"comment\">// 停止监听已开始加载的图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">images.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> observer.observe(item));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/8.gif?raw=true\"></p>\n<blockquote>\n<p>把网速调慢：</p>\n</blockquote>\n<p>![](<a href=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true\">https://github.com/bettermu/blog-picture-store/blob/master/20190921/7.gif?raw=true</a></p>\n<blockquote>\n<p>当滚动条为横向滚动的时候，我们依然可以进行懒加载的监听：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/9.gif?raw=true\"></p>\n<blockquote>\n<p>传统的懒加载只是监听全局滚动条的滚动，像这种小细节还是无法实现的（传统的实现方法并不是判断目标是否出现在视窗，所以横向的图片会一起加载，即使你没有向左滑动），所以这也是交叉观察者的一大优点</p>\n</blockquote>\n<h3 id=\"2、触底\"><a href=\"#2、触底\" class=\"headerlink\" title=\"2、触底\"></a>2、触底</h3><blockquote>\n<p>触底加载的方式，在移动端列表的场景中十分常见，通常我们是通过监听列表本身的滚动距离与列表高度和视口高度的视差进行比较，从而判断是否触底。但是有了交叉观察者之后，我们的做法就很简单了。</p>\n</blockquote>\n<blockquote>\n<p>我们可以在列表底部，放置一个参照元素，我们让交叉观察者去监听：</p>\n</blockquote>\n<blockquote>\n<p>html结构如下:</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 数据列表 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 参照元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;reference&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后监听参照元素：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = entries[<span class=\"number\">0</span>]; <span class=\"comment\">// 拿第一个就行，反正只有一个</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item.isIntersecting) <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;滚动到了底部，开始请求数据&quot;</span>);</span><br><span class=\"line\">&#125;).observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>)); <span class=\"comment\">// 监听参照元素</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/10.gif?raw=true\"></p>\n<h3 id=\"3、吸顶\"><a href=\"#3、吸顶\" class=\"headerlink\" title=\"3、吸顶\"></a>3、吸顶</h3><blockquote>\n<p>实现元素吸顶的方式有很多种，如css的position: sticky，兼容性较差；如果用交叉观察者实现也很方便，同样也要放一个参照元素；</p>\n</blockquote>\n<blockquote>\n<p>假设html结构如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 参照元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;reference&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>我可以吸顶<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>假设scss代码如下：</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开始监听：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nav = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;nav&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reference = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"params\">entries</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = entries[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = item.boundingClientRect.top;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当参照元素的的top值小于0，也就是在视窗的顶部的时候，开始吸顶，否则移除吸顶</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (top &lt; <span class=\"number\">0</span>) nav.classList.add(<span class=\"string\">&quot;fixed&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> nav.classList.remove(<span class=\"string\">&quot;fixed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).observe(reference);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下:</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/11.gif?raw=true\"></p>\n<blockquote>\n<p>如果这么简单就好了，这样会有个问题，如果滚的慢的时候，会掉进一个死循环：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/12.gif?raw=true\"></p>\n<blockquote>\n<p>为了方便观察，我们把参考元素加一个高度跟颜色：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/13.gif?raw=true\"></p>\n<blockquote>\n<p>看图，问题很明显，当给nav增加fixed定位的时候，nav脱离了文档流，因此参考元素会往下掉，然后就会又发生交叉，从而去除了fixed定位，陷入一个死循环……</p>\n</blockquote>\n<blockquote>\n<p>解决方式是，让参考元素脱离文档流，可以让它绝对定位至nav的上方：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nav = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;nav&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reference = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.reference&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">reference.style.top = nav.offsetTop + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下代码不变 ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果如下</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190921/14.gif?raw=true\"></p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><blockquote>\n<p>IE不兼容，不过有<a href=\"https://github.com/w3c/IntersectionObserver/tree/master/polyfill\">官方的polyfill</a></p>\n</blockquote>\n"},{"title":"关于js中 toFixed()的一个小坑","date":"2018-05-16T02:33:37.000Z","_content":"\n作为一名前端，大家都应该知道，toFixed()的作用，toFixed()经常用于前台与后台数据格式的转换，套用下w3c上面的定义：　　　\n\n## 定义和用法\ntoFixed(n) 方法可把 Number 四舍五入为指定小数位数的数字。n为保留的小数位数\n## 返回值\n```javascript\n  typeof (1.0.toFixed())   //string\n```\n\n\n\n返回值是string类型的\n\n其实大部分的时候，我们在项目中运用，都是将多位的小数，转化成固定位数的小数，比如\n\n```javascript\n  1.000000.toFixed(2)   //\"1.00\"\n```\n\n但是有的时候 我们需要将整数值转换成小数，如\n\n```javascript\n  1.toFixed(2)  //你们知道这个结果是怎么样的吗\n```\n这个问题，是我在一次项目中遇到的，当时也没花太多时间，要想解决这个问题，就要深刻理解js引擎的编译原理和过程，已经相关类型值的理解。\n\n其实是这样的，上面的整数化成小数，存在一个隐藏的坑，就是如果直接用整数直接调用toFixed(),比如1.toFixed(),那么讲会出现如下的报错：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/toFixed%E9%97%AE%E9%A2%98.png?raw=true)\n\n原因就是，js引擎在运行的时候，默认将1后面的那个点，认为是小数点，所以1.toFixed()也就相当于 1.0toFixed()，当然报错啊。\n\n其实想到的转化方法有很多：\n\n* 1..toFixed() 这个方法最直接，不是少了一个点么 那就直接在后面添加一个点，这样就相当于1.0.toFixed()  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/1.png?raw=true)\n\n* 可以将1存成一个变量名，用变量调用toFixed() 结果也是想要的  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/2.png?raw=true)\n\n* 由上面的解决方法的引申，可以有另外一个方法，就是用一对()将1和后面的点隔离，那么js引擎在运行的时候，就会将点变成是1这个整体对于toFixed()方法的调用  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/3.png?raw=true)\n\n\n结语：条条大路通罗马，没有解决不了的问题，将所遇到的小知识点分享出来，与大家共勉。\n","source":"_posts/关于js中-toFixed-的一个小坑.md","raw":"---\ntitle: 关于js中 toFixed()的一个小坑\ndate: 2018-05-16 10:33:37\ntags:\n  - js基础\ncategories:\n  - js\n---\n\n作为一名前端，大家都应该知道，toFixed()的作用，toFixed()经常用于前台与后台数据格式的转换，套用下w3c上面的定义：　　　\n\n## 定义和用法\ntoFixed(n) 方法可把 Number 四舍五入为指定小数位数的数字。n为保留的小数位数\n## 返回值\n```javascript\n  typeof (1.0.toFixed())   //string\n```\n\n\n\n返回值是string类型的\n\n其实大部分的时候，我们在项目中运用，都是将多位的小数，转化成固定位数的小数，比如\n\n```javascript\n  1.000000.toFixed(2)   //\"1.00\"\n```\n\n但是有的时候 我们需要将整数值转换成小数，如\n\n```javascript\n  1.toFixed(2)  //你们知道这个结果是怎么样的吗\n```\n这个问题，是我在一次项目中遇到的，当时也没花太多时间，要想解决这个问题，就要深刻理解js引擎的编译原理和过程，已经相关类型值的理解。\n\n其实是这样的，上面的整数化成小数，存在一个隐藏的坑，就是如果直接用整数直接调用toFixed(),比如1.toFixed(),那么讲会出现如下的报错：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/toFixed%E9%97%AE%E9%A2%98.png?raw=true)\n\n原因就是，js引擎在运行的时候，默认将1后面的那个点，认为是小数点，所以1.toFixed()也就相当于 1.0toFixed()，当然报错啊。\n\n其实想到的转化方法有很多：\n\n* 1..toFixed() 这个方法最直接，不是少了一个点么 那就直接在后面添加一个点，这样就相当于1.0.toFixed()  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/1.png?raw=true)\n\n* 可以将1存成一个变量名，用变量调用toFixed() 结果也是想要的  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/2.png?raw=true)\n\n* 由上面的解决方法的引申，可以有另外一个方法，就是用一对()将1和后面的点隔离，那么js引擎在运行的时候，就会将点变成是1这个整体对于toFixed()方法的调用  \n![](https://github.com/bettermu/blog-picture-store/blob/master/20180516/3.png?raw=true)\n\n\n结语：条条大路通罗马，没有解决不了的问题，将所遇到的小知识点分享出来，与大家共勉。\n","slug":"关于js中-toFixed-的一个小坑","published":1,"updated":"2018-06-03T14:10:29.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmd0027msvi7ldth5rh","content":"<p>作为一名前端，大家都应该知道，toFixed()的作用，toFixed()经常用于前台与后台数据格式的转换，套用下w3c上面的定义：　　　</p>\n<h2 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h2><p>toFixed(n) 方法可把 Number 四舍五入为指定小数位数的数字。n为保留的小数位数</p>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"number\">1.0</span>.toFixed())   <span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n\n\n<p>返回值是string类型的</p>\n<p>其实大部分的时候，我们在项目中运用，都是将多位的小数，转化成固定位数的小数，比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.000000</span>.toFixed(<span class=\"number\">2</span>)   <span class=\"comment\">//&quot;1.00&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但是有的时候 我们需要将整数值转换成小数，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>toFixed(<span class=\"number\">2</span>)  <span class=\"comment\">//你们知道这个结果是怎么样的吗</span></span><br></pre></td></tr></table></figure>\n<p>这个问题，是我在一次项目中遇到的，当时也没花太多时间，要想解决这个问题，就要深刻理解js引擎的编译原理和过程，已经相关类型值的理解。</p>\n<p>其实是这样的，上面的整数化成小数，存在一个隐藏的坑，就是如果直接用整数直接调用toFixed(),比如1.toFixed(),那么讲会出现如下的报错：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/toFixed%E9%97%AE%E9%A2%98.png?raw=true\"></p>\n<p>原因就是，js引擎在运行的时候，默认将1后面的那个点，认为是小数点，所以1.toFixed()也就相当于 1.0toFixed()，当然报错啊。</p>\n<p>其实想到的转化方法有很多：</p>\n<ul>\n<li><p>1..toFixed() 这个方法最直接，不是少了一个点么 那就直接在后面添加一个点，这样就相当于1.0.toFixed()<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/1.png?raw=true\"></p>\n</li>\n<li><p>可以将1存成一个变量名，用变量调用toFixed() 结果也是想要的<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/2.png?raw=true\"></p>\n</li>\n<li><p>由上面的解决方法的引申，可以有另外一个方法，就是用一对()将1和后面的点隔离，那么js引擎在运行的时候，就会将点变成是1这个整体对于toFixed()方法的调用<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/3.png?raw=true\"></p>\n</li>\n</ul>\n<p>结语：条条大路通罗马，没有解决不了的问题，将所遇到的小知识点分享出来，与大家共勉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为一名前端，大家都应该知道，toFixed()的作用，toFixed()经常用于前台与后台数据格式的转换，套用下w3c上面的定义：　　　</p>\n<h2 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h2><p>toFixed(n) 方法可把 Number 四舍五入为指定小数位数的数字。n为保留的小数位数</p>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"number\">1.0</span>.toFixed())   <span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n\n\n<p>返回值是string类型的</p>\n<p>其实大部分的时候，我们在项目中运用，都是将多位的小数，转化成固定位数的小数，比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.000000</span>.toFixed(<span class=\"number\">2</span>)   <span class=\"comment\">//&quot;1.00&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但是有的时候 我们需要将整数值转换成小数，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>toFixed(<span class=\"number\">2</span>)  <span class=\"comment\">//你们知道这个结果是怎么样的吗</span></span><br></pre></td></tr></table></figure>\n<p>这个问题，是我在一次项目中遇到的，当时也没花太多时间，要想解决这个问题，就要深刻理解js引擎的编译原理和过程，已经相关类型值的理解。</p>\n<p>其实是这样的，上面的整数化成小数，存在一个隐藏的坑，就是如果直接用整数直接调用toFixed(),比如1.toFixed(),那么讲会出现如下的报错：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/toFixed%E9%97%AE%E9%A2%98.png?raw=true\"></p>\n<p>原因就是，js引擎在运行的时候，默认将1后面的那个点，认为是小数点，所以1.toFixed()也就相当于 1.0toFixed()，当然报错啊。</p>\n<p>其实想到的转化方法有很多：</p>\n<ul>\n<li><p>1..toFixed() 这个方法最直接，不是少了一个点么 那就直接在后面添加一个点，这样就相当于1.0.toFixed()<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/1.png?raw=true\"></p>\n</li>\n<li><p>可以将1存成一个变量名，用变量调用toFixed() 结果也是想要的<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/2.png?raw=true\"></p>\n</li>\n<li><p>由上面的解决方法的引申，可以有另外一个方法，就是用一对()将1和后面的点隔离，那么js引擎在运行的时候，就会将点变成是1这个整体对于toFixed()方法的调用<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180516/3.png?raw=true\"></p>\n</li>\n</ul>\n<p>结语：条条大路通罗马，没有解决不了的问题，将所遇到的小知识点分享出来，与大家共勉。</p>\n"},{"title":"关于移动端click事件延迟","date":"2018-06-14T13:18:24.000Z","_content":"\n\n\n在自己刚接触移动端页面开发的时候，就在网上听过一些前辈口耳相传的，移动端不能使用click，因为click会比较迟钝，能用touchstart还是用touchstart。但是在自己实际的项目开发中，使用touchstart会出现一个问题，就是当用户在滑动页面的时候，不小心碰到了被绑定该事件的元素，也会导致触发touchstart事件。所以，两者都有缺点，那又如何去解决呢？   \n\n首先，移动端的click为什么会存在迟钝现象呢，从谷歌的开发者文档《300ms tap delay,gone away》里可以找到答案：里面说，移动端存在要判断是否是双击的行为，所以单击之后，并不会马上触发click，要等300ms，直到确认不是双击了才触发click，所以也就导致了click有延迟。但是，更为重要的一点，里面也提到了，chrome32版本的已经把这个延迟去掉了，也就是2014年，呵呵，14年我还在上学呢，意思就是说，如果页面存在这么一个meta标签：\n```html\n<meta name=\"viewport\" content=\"width=device-width\">\n```\n即把viewport设置为设备的实际像素，那就不会有这300ms的延迟，并且，这个举动收到了IE/Firefox/Safari(iOS9.3)的支持，也就是说，现在的移动端开发，可以不用顾虑click会比较迟钝的问题了。   \n\n但是呢，如果设置initial-scale=1.0,在chrome上面是可以生效的，但是Safari不行，如下代码：\n```html\n<meta name=\"viewport\" content=\"initial-scale=1.0\">\n```\n\n那么还有一种解决办法，就是设置CSS，如下代码：\n```css\nhtml {\n  touch-action:manipulation;\n}\n```\n\n这样也可以取消300ms的延迟，Chrome和Safari都可以生效了。\n","source":"_posts/关于移动端click事件延迟.md","raw":"---\ntitle: 关于移动端click事件延迟\ndate: 2018-06-14 21:18:24\ntags:\n  - js\ncategories:\n  - Mobile-click\n---\n\n\n\n在自己刚接触移动端页面开发的时候，就在网上听过一些前辈口耳相传的，移动端不能使用click，因为click会比较迟钝，能用touchstart还是用touchstart。但是在自己实际的项目开发中，使用touchstart会出现一个问题，就是当用户在滑动页面的时候，不小心碰到了被绑定该事件的元素，也会导致触发touchstart事件。所以，两者都有缺点，那又如何去解决呢？   \n\n首先，移动端的click为什么会存在迟钝现象呢，从谷歌的开发者文档《300ms tap delay,gone away》里可以找到答案：里面说，移动端存在要判断是否是双击的行为，所以单击之后，并不会马上触发click，要等300ms，直到确认不是双击了才触发click，所以也就导致了click有延迟。但是，更为重要的一点，里面也提到了，chrome32版本的已经把这个延迟去掉了，也就是2014年，呵呵，14年我还在上学呢，意思就是说，如果页面存在这么一个meta标签：\n```html\n<meta name=\"viewport\" content=\"width=device-width\">\n```\n即把viewport设置为设备的实际像素，那就不会有这300ms的延迟，并且，这个举动收到了IE/Firefox/Safari(iOS9.3)的支持，也就是说，现在的移动端开发，可以不用顾虑click会比较迟钝的问题了。   \n\n但是呢，如果设置initial-scale=1.0,在chrome上面是可以生效的，但是Safari不行，如下代码：\n```html\n<meta name=\"viewport\" content=\"initial-scale=1.0\">\n```\n\n那么还有一种解决办法，就是设置CSS，如下代码：\n```css\nhtml {\n  touch-action:manipulation;\n}\n```\n\n这样也可以取消300ms的延迟，Chrome和Safari都可以生效了。\n","slug":"关于移动端click事件延迟","published":1,"updated":"2018-06-14T13:20:19.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxme002cmsvi2rnm4e4q","content":"<p>在自己刚接触移动端页面开发的时候，就在网上听过一些前辈口耳相传的，移动端不能使用click，因为click会比较迟钝，能用touchstart还是用touchstart。但是在自己实际的项目开发中，使用touchstart会出现一个问题，就是当用户在滑动页面的时候，不小心碰到了被绑定该事件的元素，也会导致触发touchstart事件。所以，两者都有缺点，那又如何去解决呢？   </p>\n<p>首先，移动端的click为什么会存在迟钝现象呢，从谷歌的开发者文档《300ms tap delay,gone away》里可以找到答案：里面说，移动端存在要判断是否是双击的行为，所以单击之后，并不会马上触发click，要等300ms，直到确认不是双击了才触发click，所以也就导致了click有延迟。但是，更为重要的一点，里面也提到了，chrome32版本的已经把这个延迟去掉了，也就是2014年，呵呵，14年我还在上学呢，意思就是说，如果页面存在这么一个meta标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>即把viewport设置为设备的实际像素，那就不会有这300ms的延迟，并且，这个举动收到了IE/Firefox/Safari(iOS9.3)的支持，也就是说，现在的移动端开发，可以不用顾虑click会比较迟钝的问题了。   </p>\n<p>但是呢，如果设置initial-scale=1.0,在chrome上面是可以生效的，但是Safari不行，如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那么还有一种解决办法，就是设置CSS，如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">touch-action</span>:manipulation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样也可以取消300ms的延迟，Chrome和Safari都可以生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在自己刚接触移动端页面开发的时候，就在网上听过一些前辈口耳相传的，移动端不能使用click，因为click会比较迟钝，能用touchstart还是用touchstart。但是在自己实际的项目开发中，使用touchstart会出现一个问题，就是当用户在滑动页面的时候，不小心碰到了被绑定该事件的元素，也会导致触发touchstart事件。所以，两者都有缺点，那又如何去解决呢？   </p>\n<p>首先，移动端的click为什么会存在迟钝现象呢，从谷歌的开发者文档《300ms tap delay,gone away》里可以找到答案：里面说，移动端存在要判断是否是双击的行为，所以单击之后，并不会马上触发click，要等300ms，直到确认不是双击了才触发click，所以也就导致了click有延迟。但是，更为重要的一点，里面也提到了，chrome32版本的已经把这个延迟去掉了，也就是2014年，呵呵，14年我还在上学呢，意思就是说，如果页面存在这么一个meta标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>即把viewport设置为设备的实际像素，那就不会有这300ms的延迟，并且，这个举动收到了IE/Firefox/Safari(iOS9.3)的支持，也就是说，现在的移动端开发，可以不用顾虑click会比较迟钝的问题了。   </p>\n<p>但是呢，如果设置initial-scale=1.0,在chrome上面是可以生效的，但是Safari不行，如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那么还有一种解决办法，就是设置CSS，如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">touch-action</span>:manipulation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样也可以取消300ms的延迟，Chrome和Safari都可以生效了。</p>\n"},{"title":"关于在一体机中浏览器手势缩放导致百度地图失效的问题","date":"2018-10-19T13:22:24.000Z","_content":"\n最近在处理之前开发的语音导览系统以及产业链数据展示系统，在一体机环境里兼容运行的问题。\n\n项目主要也就是java web 前后端半分离式开发，从开发到测试，一直都是在笔记本和大屏上面，浏览器和鼠标进行操作，所以，直到部署上线前，所有的问题都是按照电脑上的浏览器测试部署好的。\n\n现场使用的一体机，是win7操作系统的，1920 1080 全高清触控屏，还好当时页面是按照这个尺寸写的，所以，在现场的实际展示效果，页面基本的布局和样式，是没有任何问题的。\n\n目前唯一比较坑的事情，就是，由于项目中使用了百度地图，所以，在触控屏上面，手势是要支持地图缩放的，但由于当时我们条件有限，只能在电脑上用滚轮测试地图缩放是正常的，就下意识的认为，在一体机的触控屏上面，肯定也是正常的，但后来发现，还是太年轻了。。。\n\n当时由于是一体机展示，所以，没考虑过任何兼容的问题，默认是chrome效果展示最好，对开发也最为友善，因此统一使用的chrome进行后期项目部署的展示。但后来发现，实际上面，显示效果都是完美的，但是，对于一体机的手势放大缩小操作，竟然是放大缩小页面！！！不是缩放地图！！！  wtf？？？  这到底是为什么？？？\n\n猜测了下，应该是chrome对于一体机操作手势的识别误判？？？我们开发的hybrid APP 里面也同样用到的地图，但是，手势识别的是放大缩小地图，而不是放大缩小页面，而且，最关键的是，百度地图的首页，在一体机的chrome里打开，不仅可以完美的缩放，还特么的可以旋转？？！！！简直就是完美啊，个人猜测，应该是百度地图首页，并不是完全按照js api 实现的，而是通过了更底层的东西，实现的，直接跨过了win7一体机手势操作在chrome下是缩放页面的操作。\n\n后来在百度地图论坛上面，找了下类似的问题反馈，竟然还有不少，但是回答都是令人失望的：目前来说，在windows一体机上面，手势缩放，chrome里就是缩放页面，而不是缩放地图。目前百度地图在一体机的浏览器里，只能通过缩放控件进行地图缩放，但是这样对于需求来说，简直就是太不方便了。因为这对用户体验，极为不友好，而且，还不能进行地图拖动，只能控件缩放，不能拖动，那全部数据就很难展示完整啊。这样肯定是不行的。\n\n你们肯定特别好奇，最后问题是怎么解决掉的呢，其实尝试了很多办法，比如，在chrome快捷方式的属性里，目标的输入框中，加入 --disable pinch，意图是通过禁止掉chrome的缩放功能，看看能不能达到地图自己缩放的效果，但实际上是行不通的，实际的效果是，根本连缩放都不能响应了。另外一个是加上viewport 属性  也就是众人皆知的 userscable=no  这样也尝试了，还是照样行不通的，最后能怎么办呢？\n\n其实说来也是好玩的，特别幸运的是，由于微软的捆绑式操作，每个windows系统，出厂前，都会带上自家的IE浏览器，这是大家都知道的，而win7一体机也是如此，携带了IE11浏览器，抱着死马当活马医的心态，在IE11里打开了项目地址，突然发现，地图可以自由的缩放了？？！！！为什么会这样？？？私以为大概是IE浏览器内部识别手势的方式是和chrome不太一样的，在一体机的ie浏览器里，手势缩放，屏幕会出现和PC上面滚轮缩放一样效果的小手图案，所以，这特么就是想要的效果啊！！\n\n但是问题又来了，当时开发的时候，就是因为不考虑IE，所以，开发节奏相当流畅顺滑，但是现在特别搞笑的是，为了能让项目顺利交付，竟然不得不用IE，哎，能怎么办呢，赶紧排查下IE的兼容问题吧，还好是IE11，代码里基本都是可以完美兼容的，除了一个问题，就是webkit内核专属的多行文本截断属性，在IE所有的浏览器里，都是要跪的。解决方法也很简单，如同张鑫旭博客里写的那样，定高，然后overflow hidden,然后通过js进行操作，如果是IE，就在最后一行，补上伪元素的 ... ，具体也不自己写了，但是解决这个问题，引用了一个js库，专门解决多行文本截断的兼容性问题，具体可以自行百度。\n\n但是另外还有问题，IE也不是完全完美的，当浏览器里出现文本的时候，手势缩放文本，照样还是会放大缩小页面，不过这个问题，解决起来就很简单了，随便百度一下，就得到了解决办法，就是修改注册表里IE浏览器的相关属性，然后对滚轮缩放属性进行禁止，就可以了，具体操作可以自行百度。\n\n就这么一个问题，用语言描述了这么多，可见当时身在此山中的慌张啊，真的是。没想到，到最后竟然是IE救了这个项目，哈哈哈，不过想来也是，IE总是不走寻常路，大概是为了想着，多占点市场吧，特别是一体机的市场。2333...","source":"_posts/关于在一体机中浏览器手势缩放导致百度地图失效的问题.md","raw":"---\ntitle: 关于在一体机中浏览器手势缩放导致百度地图失效的问题\ndate: 2018-10-19 21:22:24\ntags:\n  - 交互  手势缩放\ncategories:\n  - 一体机 \n  - win7触摸屏\n---\n\n最近在处理之前开发的语音导览系统以及产业链数据展示系统，在一体机环境里兼容运行的问题。\n\n项目主要也就是java web 前后端半分离式开发，从开发到测试，一直都是在笔记本和大屏上面，浏览器和鼠标进行操作，所以，直到部署上线前，所有的问题都是按照电脑上的浏览器测试部署好的。\n\n现场使用的一体机，是win7操作系统的，1920 1080 全高清触控屏，还好当时页面是按照这个尺寸写的，所以，在现场的实际展示效果，页面基本的布局和样式，是没有任何问题的。\n\n目前唯一比较坑的事情，就是，由于项目中使用了百度地图，所以，在触控屏上面，手势是要支持地图缩放的，但由于当时我们条件有限，只能在电脑上用滚轮测试地图缩放是正常的，就下意识的认为，在一体机的触控屏上面，肯定也是正常的，但后来发现，还是太年轻了。。。\n\n当时由于是一体机展示，所以，没考虑过任何兼容的问题，默认是chrome效果展示最好，对开发也最为友善，因此统一使用的chrome进行后期项目部署的展示。但后来发现，实际上面，显示效果都是完美的，但是，对于一体机的手势放大缩小操作，竟然是放大缩小页面！！！不是缩放地图！！！  wtf？？？  这到底是为什么？？？\n\n猜测了下，应该是chrome对于一体机操作手势的识别误判？？？我们开发的hybrid APP 里面也同样用到的地图，但是，手势识别的是放大缩小地图，而不是放大缩小页面，而且，最关键的是，百度地图的首页，在一体机的chrome里打开，不仅可以完美的缩放，还特么的可以旋转？？！！！简直就是完美啊，个人猜测，应该是百度地图首页，并不是完全按照js api 实现的，而是通过了更底层的东西，实现的，直接跨过了win7一体机手势操作在chrome下是缩放页面的操作。\n\n后来在百度地图论坛上面，找了下类似的问题反馈，竟然还有不少，但是回答都是令人失望的：目前来说，在windows一体机上面，手势缩放，chrome里就是缩放页面，而不是缩放地图。目前百度地图在一体机的浏览器里，只能通过缩放控件进行地图缩放，但是这样对于需求来说，简直就是太不方便了。因为这对用户体验，极为不友好，而且，还不能进行地图拖动，只能控件缩放，不能拖动，那全部数据就很难展示完整啊。这样肯定是不行的。\n\n你们肯定特别好奇，最后问题是怎么解决掉的呢，其实尝试了很多办法，比如，在chrome快捷方式的属性里，目标的输入框中，加入 --disable pinch，意图是通过禁止掉chrome的缩放功能，看看能不能达到地图自己缩放的效果，但实际上是行不通的，实际的效果是，根本连缩放都不能响应了。另外一个是加上viewport 属性  也就是众人皆知的 userscable=no  这样也尝试了，还是照样行不通的，最后能怎么办呢？\n\n其实说来也是好玩的，特别幸运的是，由于微软的捆绑式操作，每个windows系统，出厂前，都会带上自家的IE浏览器，这是大家都知道的，而win7一体机也是如此，携带了IE11浏览器，抱着死马当活马医的心态，在IE11里打开了项目地址，突然发现，地图可以自由的缩放了？？！！！为什么会这样？？？私以为大概是IE浏览器内部识别手势的方式是和chrome不太一样的，在一体机的ie浏览器里，手势缩放，屏幕会出现和PC上面滚轮缩放一样效果的小手图案，所以，这特么就是想要的效果啊！！\n\n但是问题又来了，当时开发的时候，就是因为不考虑IE，所以，开发节奏相当流畅顺滑，但是现在特别搞笑的是，为了能让项目顺利交付，竟然不得不用IE，哎，能怎么办呢，赶紧排查下IE的兼容问题吧，还好是IE11，代码里基本都是可以完美兼容的，除了一个问题，就是webkit内核专属的多行文本截断属性，在IE所有的浏览器里，都是要跪的。解决方法也很简单，如同张鑫旭博客里写的那样，定高，然后overflow hidden,然后通过js进行操作，如果是IE，就在最后一行，补上伪元素的 ... ，具体也不自己写了，但是解决这个问题，引用了一个js库，专门解决多行文本截断的兼容性问题，具体可以自行百度。\n\n但是另外还有问题，IE也不是完全完美的，当浏览器里出现文本的时候，手势缩放文本，照样还是会放大缩小页面，不过这个问题，解决起来就很简单了，随便百度一下，就得到了解决办法，就是修改注册表里IE浏览器的相关属性，然后对滚轮缩放属性进行禁止，就可以了，具体操作可以自行百度。\n\n就这么一个问题，用语言描述了这么多，可见当时身在此山中的慌张啊，真的是。没想到，到最后竟然是IE救了这个项目，哈哈哈，不过想来也是，IE总是不走寻常路，大概是为了想着，多占点市场吧，特别是一体机的市场。2333...","slug":"关于在一体机中浏览器手势缩放导致百度地图失效的问题","published":1,"updated":"2018-10-19T13:23:45.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmh002emsviazhg1tmc","content":"<p>最近在处理之前开发的语音导览系统以及产业链数据展示系统，在一体机环境里兼容运行的问题。</p>\n<p>项目主要也就是java web 前后端半分离式开发，从开发到测试，一直都是在笔记本和大屏上面，浏览器和鼠标进行操作，所以，直到部署上线前，所有的问题都是按照电脑上的浏览器测试部署好的。</p>\n<p>现场使用的一体机，是win7操作系统的，1920 1080 全高清触控屏，还好当时页面是按照这个尺寸写的，所以，在现场的实际展示效果，页面基本的布局和样式，是没有任何问题的。</p>\n<p>目前唯一比较坑的事情，就是，由于项目中使用了百度地图，所以，在触控屏上面，手势是要支持地图缩放的，但由于当时我们条件有限，只能在电脑上用滚轮测试地图缩放是正常的，就下意识的认为，在一体机的触控屏上面，肯定也是正常的，但后来发现，还是太年轻了。。。</p>\n<p>当时由于是一体机展示，所以，没考虑过任何兼容的问题，默认是chrome效果展示最好，对开发也最为友善，因此统一使用的chrome进行后期项目部署的展示。但后来发现，实际上面，显示效果都是完美的，但是，对于一体机的手势放大缩小操作，竟然是放大缩小页面！！！不是缩放地图！！！  wtf？？？  这到底是为什么？？？</p>\n<p>猜测了下，应该是chrome对于一体机操作手势的识别误判？？？我们开发的hybrid APP 里面也同样用到的地图，但是，手势识别的是放大缩小地图，而不是放大缩小页面，而且，最关键的是，百度地图的首页，在一体机的chrome里打开，不仅可以完美的缩放，还特么的可以旋转？？！！！简直就是完美啊，个人猜测，应该是百度地图首页，并不是完全按照js api 实现的，而是通过了更底层的东西，实现的，直接跨过了win7一体机手势操作在chrome下是缩放页面的操作。</p>\n<p>后来在百度地图论坛上面，找了下类似的问题反馈，竟然还有不少，但是回答都是令人失望的：目前来说，在windows一体机上面，手势缩放，chrome里就是缩放页面，而不是缩放地图。目前百度地图在一体机的浏览器里，只能通过缩放控件进行地图缩放，但是这样对于需求来说，简直就是太不方便了。因为这对用户体验，极为不友好，而且，还不能进行地图拖动，只能控件缩放，不能拖动，那全部数据就很难展示完整啊。这样肯定是不行的。</p>\n<p>你们肯定特别好奇，最后问题是怎么解决掉的呢，其实尝试了很多办法，比如，在chrome快捷方式的属性里，目标的输入框中，加入 –disable pinch，意图是通过禁止掉chrome的缩放功能，看看能不能达到地图自己缩放的效果，但实际上是行不通的，实际的效果是，根本连缩放都不能响应了。另外一个是加上viewport 属性  也就是众人皆知的 userscable=no  这样也尝试了，还是照样行不通的，最后能怎么办呢？</p>\n<p>其实说来也是好玩的，特别幸运的是，由于微软的捆绑式操作，每个windows系统，出厂前，都会带上自家的IE浏览器，这是大家都知道的，而win7一体机也是如此，携带了IE11浏览器，抱着死马当活马医的心态，在IE11里打开了项目地址，突然发现，地图可以自由的缩放了？？！！！为什么会这样？？？私以为大概是IE浏览器内部识别手势的方式是和chrome不太一样的，在一体机的ie浏览器里，手势缩放，屏幕会出现和PC上面滚轮缩放一样效果的小手图案，所以，这特么就是想要的效果啊！！</p>\n<p>但是问题又来了，当时开发的时候，就是因为不考虑IE，所以，开发节奏相当流畅顺滑，但是现在特别搞笑的是，为了能让项目顺利交付，竟然不得不用IE，哎，能怎么办呢，赶紧排查下IE的兼容问题吧，还好是IE11，代码里基本都是可以完美兼容的，除了一个问题，就是webkit内核专属的多行文本截断属性，在IE所有的浏览器里，都是要跪的。解决方法也很简单，如同张鑫旭博客里写的那样，定高，然后overflow hidden,然后通过js进行操作，如果是IE，就在最后一行，补上伪元素的 … ，具体也不自己写了，但是解决这个问题，引用了一个js库，专门解决多行文本截断的兼容性问题，具体可以自行百度。</p>\n<p>但是另外还有问题，IE也不是完全完美的，当浏览器里出现文本的时候，手势缩放文本，照样还是会放大缩小页面，不过这个问题，解决起来就很简单了，随便百度一下，就得到了解决办法，就是修改注册表里IE浏览器的相关属性，然后对滚轮缩放属性进行禁止，就可以了，具体操作可以自行百度。</p>\n<p>就这么一个问题，用语言描述了这么多，可见当时身在此山中的慌张啊，真的是。没想到，到最后竟然是IE救了这个项目，哈哈哈，不过想来也是，IE总是不走寻常路，大概是为了想着，多占点市场吧，特别是一体机的市场。2333…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在处理之前开发的语音导览系统以及产业链数据展示系统，在一体机环境里兼容运行的问题。</p>\n<p>项目主要也就是java web 前后端半分离式开发，从开发到测试，一直都是在笔记本和大屏上面，浏览器和鼠标进行操作，所以，直到部署上线前，所有的问题都是按照电脑上的浏览器测试部署好的。</p>\n<p>现场使用的一体机，是win7操作系统的，1920 1080 全高清触控屏，还好当时页面是按照这个尺寸写的，所以，在现场的实际展示效果，页面基本的布局和样式，是没有任何问题的。</p>\n<p>目前唯一比较坑的事情，就是，由于项目中使用了百度地图，所以，在触控屏上面，手势是要支持地图缩放的，但由于当时我们条件有限，只能在电脑上用滚轮测试地图缩放是正常的，就下意识的认为，在一体机的触控屏上面，肯定也是正常的，但后来发现，还是太年轻了。。。</p>\n<p>当时由于是一体机展示，所以，没考虑过任何兼容的问题，默认是chrome效果展示最好，对开发也最为友善，因此统一使用的chrome进行后期项目部署的展示。但后来发现，实际上面，显示效果都是完美的，但是，对于一体机的手势放大缩小操作，竟然是放大缩小页面！！！不是缩放地图！！！  wtf？？？  这到底是为什么？？？</p>\n<p>猜测了下，应该是chrome对于一体机操作手势的识别误判？？？我们开发的hybrid APP 里面也同样用到的地图，但是，手势识别的是放大缩小地图，而不是放大缩小页面，而且，最关键的是，百度地图的首页，在一体机的chrome里打开，不仅可以完美的缩放，还特么的可以旋转？？！！！简直就是完美啊，个人猜测，应该是百度地图首页，并不是完全按照js api 实现的，而是通过了更底层的东西，实现的，直接跨过了win7一体机手势操作在chrome下是缩放页面的操作。</p>\n<p>后来在百度地图论坛上面，找了下类似的问题反馈，竟然还有不少，但是回答都是令人失望的：目前来说，在windows一体机上面，手势缩放，chrome里就是缩放页面，而不是缩放地图。目前百度地图在一体机的浏览器里，只能通过缩放控件进行地图缩放，但是这样对于需求来说，简直就是太不方便了。因为这对用户体验，极为不友好，而且，还不能进行地图拖动，只能控件缩放，不能拖动，那全部数据就很难展示完整啊。这样肯定是不行的。</p>\n<p>你们肯定特别好奇，最后问题是怎么解决掉的呢，其实尝试了很多办法，比如，在chrome快捷方式的属性里，目标的输入框中，加入 –disable pinch，意图是通过禁止掉chrome的缩放功能，看看能不能达到地图自己缩放的效果，但实际上是行不通的，实际的效果是，根本连缩放都不能响应了。另外一个是加上viewport 属性  也就是众人皆知的 userscable=no  这样也尝试了，还是照样行不通的，最后能怎么办呢？</p>\n<p>其实说来也是好玩的，特别幸运的是，由于微软的捆绑式操作，每个windows系统，出厂前，都会带上自家的IE浏览器，这是大家都知道的，而win7一体机也是如此，携带了IE11浏览器，抱着死马当活马医的心态，在IE11里打开了项目地址，突然发现，地图可以自由的缩放了？？！！！为什么会这样？？？私以为大概是IE浏览器内部识别手势的方式是和chrome不太一样的，在一体机的ie浏览器里，手势缩放，屏幕会出现和PC上面滚轮缩放一样效果的小手图案，所以，这特么就是想要的效果啊！！</p>\n<p>但是问题又来了，当时开发的时候，就是因为不考虑IE，所以，开发节奏相当流畅顺滑，但是现在特别搞笑的是，为了能让项目顺利交付，竟然不得不用IE，哎，能怎么办呢，赶紧排查下IE的兼容问题吧，还好是IE11，代码里基本都是可以完美兼容的，除了一个问题，就是webkit内核专属的多行文本截断属性，在IE所有的浏览器里，都是要跪的。解决方法也很简单，如同张鑫旭博客里写的那样，定高，然后overflow hidden,然后通过js进行操作，如果是IE，就在最后一行，补上伪元素的 … ，具体也不自己写了，但是解决这个问题，引用了一个js库，专门解决多行文本截断的兼容性问题，具体可以自行百度。</p>\n<p>但是另外还有问题，IE也不是完全完美的，当浏览器里出现文本的时候，手势缩放文本，照样还是会放大缩小页面，不过这个问题，解决起来就很简单了，随便百度一下，就得到了解决办法，就是修改注册表里IE浏览器的相关属性，然后对滚轮缩放属性进行禁止，就可以了，具体操作可以自行百度。</p>\n<p>就这么一个问题，用语言描述了这么多，可见当时身在此山中的慌张啊，真的是。没想到，到最后竟然是IE救了这个项目，哈哈哈，不过想来也是，IE总是不走寻常路，大概是为了想着，多占点市场吧，特别是一体机的市场。2333…</p>\n"},{"title":"如何正确的在微信小程序里使用iconfont","date":"2018-10-21T14:07:22.000Z","_content":"---\n\niconfont给前端带来的便利相信已众所周知，我也一直遵循能用iconfont的情况下，绝不用image。但是这周开始接触小程序，却发现小程序里不能按照之前的方式愉快的使用了。\n\n## 此前\n\n使用打开[iconfont官网](http://www.iconfont.cn/)，选择需要的icon，加入到个人项目里。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true)\n\n然后选择Unicode模式，点击复制代码，将在线资源复制的全局CSS文件里。再用一个专用class(.iconfont)用来定义iconfont。  \n\n```css\n@font-face {\n  font-family: 'iconfont';  /* project id 319212 */\n  src: url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot');\n  src: url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot?#iefix') format('embedded-opentype'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.woff') format('woff'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.ttf') format('truetype'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.svg#iconfont') format('svg');\n}\n\n.iconfont {\n  font-family: \"iconfont\";\n  font-size: .16rem;\n  font-style: normal;\n  color: #9e9595;\n}\n```\n\n接着鼠标hover到图标上点击复制代码，然后在html里面用一个标签包裹即可愉快的使用了。\n\n```html\n<i class=\"iconfont\">&#xe604;</i>\n```\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/2.jpg?raw=true)\n\n## 但是\n\n在小程序里面，按照这种方式继续用的话，就。。。尴尬了😅\n\n```html\n<text class=\"iconfont\">&#xe604;</text>\n```\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/3.jpg?raw=true)\n\n漂亮的图标，变成了让人心慌的代码。这可怎么办？？？   \n    \n很多网友推荐将字体图标转化成base64😅😅。虽然这也不乏是一种解决方案，但是，显得很麻烦。特别是在项目初期，不确定需要用哪些图标的时候，加一个图标转一次，特别心累。\n\n\n\n## 美好的事情即将发生\n\n经过一番研究后，我发现还是可以按照以前的方式引用在线资源。不过在html里面使用的时候我们需要用到伪类元素。说到这个大家应该都有底了吧，哈哈。   \n\n\n回到我们第一张图:   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true)   \n\n我们需要在原来的CSS基础上，再为每一个图标自定义一个class名。比如这开灯的icon:\n\n```css\n.icon-kaideng:before { \n  content: \"\\e604\";\n  font-size: 36rpx;\n  color: #5FB7EB;\n}\n```\n\ncontent里面的内容为字体编码的后4位加一个\\，  \n\n接着，在wxml里面这么使用就好了\n\n```html\n<icon class=\"iconfont icon-kaideng\"/>\n```\n\n这个问题就顺利解决了。\n\n\n## 原理\n\n由于wxml不支持iconfont字符串渲染，因此才会出现这样的问题，但是css伪类还是支持的。所以，另辟蹊径，用伪类解决展示图标，是个好办法。\n\n\n","source":"_posts/如何正确的在微信小程序里使用iconfont.md","raw":"---\ntitle: 如何正确的在微信小程序里使用iconfont\ndate: 2018-10-21 22:07:22\ntags:\n  - 微信小程序 iconfont\ncategories:\n  - 微信小程序\n  - css3字体\n---\n---\n\niconfont给前端带来的便利相信已众所周知，我也一直遵循能用iconfont的情况下，绝不用image。但是这周开始接触小程序，却发现小程序里不能按照之前的方式愉快的使用了。\n\n## 此前\n\n使用打开[iconfont官网](http://www.iconfont.cn/)，选择需要的icon，加入到个人项目里。  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true)\n\n然后选择Unicode模式，点击复制代码，将在线资源复制的全局CSS文件里。再用一个专用class(.iconfont)用来定义iconfont。  \n\n```css\n@font-face {\n  font-family: 'iconfont';  /* project id 319212 */\n  src: url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot');\n  src: url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot?#iefix') format('embedded-opentype'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.woff') format('woff'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.ttf') format('truetype'),\n  url('//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.svg#iconfont') format('svg');\n}\n\n.iconfont {\n  font-family: \"iconfont\";\n  font-size: .16rem;\n  font-style: normal;\n  color: #9e9595;\n}\n```\n\n接着鼠标hover到图标上点击复制代码，然后在html里面用一个标签包裹即可愉快的使用了。\n\n```html\n<i class=\"iconfont\">&#xe604;</i>\n```\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/2.jpg?raw=true)\n\n## 但是\n\n在小程序里面，按照这种方式继续用的话，就。。。尴尬了😅\n\n```html\n<text class=\"iconfont\">&#xe604;</text>\n```\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/3.jpg?raw=true)\n\n漂亮的图标，变成了让人心慌的代码。这可怎么办？？？   \n    \n很多网友推荐将字体图标转化成base64😅😅。虽然这也不乏是一种解决方案，但是，显得很麻烦。特别是在项目初期，不确定需要用哪些图标的时候，加一个图标转一次，特别心累。\n\n\n\n## 美好的事情即将发生\n\n经过一番研究后，我发现还是可以按照以前的方式引用在线资源。不过在html里面使用的时候我们需要用到伪类元素。说到这个大家应该都有底了吧，哈哈。   \n\n\n回到我们第一张图:   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true)   \n\n我们需要在原来的CSS基础上，再为每一个图标自定义一个class名。比如这开灯的icon:\n\n```css\n.icon-kaideng:before { \n  content: \"\\e604\";\n  font-size: 36rpx;\n  color: #5FB7EB;\n}\n```\n\ncontent里面的内容为字体编码的后4位加一个\\，  \n\n接着，在wxml里面这么使用就好了\n\n```html\n<icon class=\"iconfont icon-kaideng\"/>\n```\n\n这个问题就顺利解决了。\n\n\n## 原理\n\n由于wxml不支持iconfont字符串渲染，因此才会出现这样的问题，但是css伪类还是支持的。所以，另辟蹊径，用伪类解决展示图标，是个好办法。\n\n\n","slug":"如何正确的在微信小程序里使用iconfont","published":1,"updated":"2018-10-21T14:12:05.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmj002imsvi0b4d4utl","content":"<hr>\n<p>iconfont给前端带来的便利相信已众所周知，我也一直遵循能用iconfont的情况下，绝不用image。但是这周开始接触小程序，却发现小程序里不能按照之前的方式愉快的使用了。</p>\n<h2 id=\"此前\"><a href=\"#此前\" class=\"headerlink\" title=\"此前\"></a>此前</h2><p>使用打开<a href=\"http://www.iconfont.cn/\">iconfont官网</a>，选择需要的icon，加入到个人项目里。  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true\"></p>\n<p>然后选择Unicode模式，点击复制代码，将在线资源复制的全局CSS文件里。再用一个专用class(.iconfont)用来定义iconfont。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;iconfont&#x27;</span>;  <span class=\"comment\">/* project id 319212 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot&#x27;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot?#iefix&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;embedded-opentype&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.woff&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.ttf&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;truetype&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.svg#iconfont&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;svg&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">16rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#9e9595</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着鼠标hover到图标上点击复制代码，然后在html里面用一个标签包裹即可愉快的使用了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont&quot;</span>&gt;</span><span class=\"symbol\">&amp;#xe604;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/2.jpg?raw=true\"></p>\n<h2 id=\"但是\"><a href=\"#但是\" class=\"headerlink\" title=\"但是\"></a>但是</h2><p>在小程序里面，按照这种方式继续用的话，就。。。尴尬了😅</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont&quot;</span>&gt;</span><span class=\"symbol\">&amp;#xe604;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/3.jpg?raw=true\"></p>\n<p>漂亮的图标，变成了让人心慌的代码。这可怎么办？？？   </p>\n<p>很多网友推荐将字体图标转化成base64😅😅。虽然这也不乏是一种解决方案，但是，显得很麻烦。特别是在项目初期，不确定需要用哪些图标的时候，加一个图标转一次，特别心累。</p>\n<h2 id=\"美好的事情即将发生\"><a href=\"#美好的事情即将发生\" class=\"headerlink\" title=\"美好的事情即将发生\"></a>美好的事情即将发生</h2><p>经过一番研究后，我发现还是可以按照以前的方式引用在线资源。不过在html里面使用的时候我们需要用到伪类元素。说到这个大家应该都有底了吧，哈哈。   </p>\n<p>回到我们第一张图:   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true\">   </p>\n<p>我们需要在原来的CSS基础上，再为每一个图标自定义一个class名。比如这开灯的icon:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-kaideng</span><span class=\"selector-pseudo\">:before</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\e604&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#5FB7EB</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>content里面的内容为字体编码的后4位加一个\\，  </p>\n<p>接着，在wxml里面这么使用就好了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-kaideng&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个问题就顺利解决了。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由于wxml不支持iconfont字符串渲染，因此才会出现这样的问题，但是css伪类还是支持的。所以，另辟蹊径，用伪类解决展示图标，是个好办法。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>iconfont给前端带来的便利相信已众所周知，我也一直遵循能用iconfont的情况下，绝不用image。但是这周开始接触小程序，却发现小程序里不能按照之前的方式愉快的使用了。</p>\n<h2 id=\"此前\"><a href=\"#此前\" class=\"headerlink\" title=\"此前\"></a>此前</h2><p>使用打开<a href=\"http://www.iconfont.cn/\">iconfont官网</a>，选择需要的icon，加入到个人项目里。  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true\"></p>\n<p>然后选择Unicode模式，点击复制代码，将在线资源复制的全局CSS文件里。再用一个专用class(.iconfont)用来定义iconfont。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;iconfont&#x27;</span>;  <span class=\"comment\">/* project id 319212 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot&#x27;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.eot?#iefix&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;embedded-opentype&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.woff&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.ttf&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;truetype&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;//at.alicdn.com/t/font_tdeh59rfkwdhd7vi.svg#iconfont&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;svg&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">16rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#9e9595</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着鼠标hover到图标上点击复制代码，然后在html里面用一个标签包裹即可愉快的使用了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont&quot;</span>&gt;</span><span class=\"symbol\">&amp;#xe604;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/2.jpg?raw=true\"></p>\n<h2 id=\"但是\"><a href=\"#但是\" class=\"headerlink\" title=\"但是\"></a>但是</h2><p>在小程序里面，按照这种方式继续用的话，就。。。尴尬了😅</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont&quot;</span>&gt;</span><span class=\"symbol\">&amp;#xe604;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/3.jpg?raw=true\"></p>\n<p>漂亮的图标，变成了让人心慌的代码。这可怎么办？？？   </p>\n<p>很多网友推荐将字体图标转化成base64😅😅。虽然这也不乏是一种解决方案，但是，显得很麻烦。特别是在项目初期，不确定需要用哪些图标的时候，加一个图标转一次，特别心累。</p>\n<h2 id=\"美好的事情即将发生\"><a href=\"#美好的事情即将发生\" class=\"headerlink\" title=\"美好的事情即将发生\"></a>美好的事情即将发生</h2><p>经过一番研究后，我发现还是可以按照以前的方式引用在线资源。不过在html里面使用的时候我们需要用到伪类元素。说到这个大家应该都有底了吧，哈哈。   </p>\n<p>回到我们第一张图:   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181020/1.jpg?raw=true\">   </p>\n<p>我们需要在原来的CSS基础上，再为每一个图标自定义一个class名。比如这开灯的icon:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-kaideng</span><span class=\"selector-pseudo\">:before</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\e604&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#5FB7EB</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>content里面的内容为字体编码的后4位加一个\\，  </p>\n<p>接着，在wxml里面这么使用就好了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-kaideng&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个问题就顺利解决了。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由于wxml不支持iconfont字符串渲染，因此才会出现这样的问题，但是css伪类还是支持的。所以，另辟蹊径，用伪类解决展示图标，是个好办法。</p>\n"},{"title":"完美的深拷贝实现思路","date":"2020-04-12T02:21:15.000Z","_content":"\n> 提到js深拷贝，算是面试中常规的操作，一般写出下面的代码形式，基本上可以过关：\n\n```js\n\n  function deepCopy(obj){\n\n    //如果属性不是对象或者是null，则直接返回该值\n    if(obj === null || typeof obj !== 'object'){\n      return obj\n    }\n\n    //判断obj是数组还是对象\n     var copy = Array.isArray(obj)? []:{}\n\n     Object.keys(obj).forEach((v)=>{\n       copy[v] = deepCopy(obj[v])  //这里需要对嵌套的对象进行递归处理\n     })\n\n     return copy\n\n  }\n```\n\n> 一般回答出上面的代码 ，基本就没有什么问题了，其实在绝大多数应用场景中，JSON.stringify 的骚操作以及足够满足日常的需求，数据中不会出现function REG DATE 等复杂对象，更不会出现对象的循环引用的问题。但如果有呢，面试问你如何去处理这些问题呢？\n\n### 对象循环引用的问题思路\n\n> 实际上对于对象的循环引用，我们这里可以做一个缓存标记之类的，将每一次遍历到的属性，存到私有变量cache数组里，然后在每一次遍历的时候，去cache里寻找，如果有，则直接返回cache中的对象，而不是重新赋值。\n\n\n### 复杂特殊类型对象的问题\n\n> 如果有比如 Reg，Date,Error之类的特殊对象类型，可以单独做处理：\n\n```js\n\nif (Object.prototype.toString.call(obj) === '[object Date]') return new Date(obj)\nif (Object.prototype.toString.call(obj) === '[object RegExp]') return new RegExp(obj)\nif (Object.prototype.toString.call(obj) === '[object Error]') return new Error(obj)\n\n```\n\n> 当有符合特殊类型对象的时候，直接return一个新的包装构造的类型对象","source":"_posts/完美的深拷贝实现思路.md","raw":"---\ntitle: 完美的深拷贝实现思路\ndate: 2020-04-12 10:21:15\ntags:\n  - js\n  - deepCopy\ncategories:\n  - js\n  - deepCopy\n---\n\n> 提到js深拷贝，算是面试中常规的操作，一般写出下面的代码形式，基本上可以过关：\n\n```js\n\n  function deepCopy(obj){\n\n    //如果属性不是对象或者是null，则直接返回该值\n    if(obj === null || typeof obj !== 'object'){\n      return obj\n    }\n\n    //判断obj是数组还是对象\n     var copy = Array.isArray(obj)? []:{}\n\n     Object.keys(obj).forEach((v)=>{\n       copy[v] = deepCopy(obj[v])  //这里需要对嵌套的对象进行递归处理\n     })\n\n     return copy\n\n  }\n```\n\n> 一般回答出上面的代码 ，基本就没有什么问题了，其实在绝大多数应用场景中，JSON.stringify 的骚操作以及足够满足日常的需求，数据中不会出现function REG DATE 等复杂对象，更不会出现对象的循环引用的问题。但如果有呢，面试问你如何去处理这些问题呢？\n\n### 对象循环引用的问题思路\n\n> 实际上对于对象的循环引用，我们这里可以做一个缓存标记之类的，将每一次遍历到的属性，存到私有变量cache数组里，然后在每一次遍历的时候，去cache里寻找，如果有，则直接返回cache中的对象，而不是重新赋值。\n\n\n### 复杂特殊类型对象的问题\n\n> 如果有比如 Reg，Date,Error之类的特殊对象类型，可以单独做处理：\n\n```js\n\nif (Object.prototype.toString.call(obj) === '[object Date]') return new Date(obj)\nif (Object.prototype.toString.call(obj) === '[object RegExp]') return new RegExp(obj)\nif (Object.prototype.toString.call(obj) === '[object Error]') return new Error(obj)\n\n```\n\n> 当有符合特殊类型对象的时候，直接return一个新的包装构造的类型对象","slug":"完美的深拷贝实现思路","published":1,"updated":"2020-04-12T02:54:26.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmj002lmsvi0gfz5ubt","content":"<blockquote>\n<p>提到js深拷贝，算是面试中常规的操作，一般写出下面的代码形式，基本上可以过关：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//如果属性不是对象或者是null，则直接返回该值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//判断obj是数组还是对象</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> copy = <span class=\"built_in\">Array</span>.isArray(obj)? []:&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">     copy[v] = deepCopy(obj[v])  <span class=\"comment\">//这里需要对嵌套的对象进行递归处理</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一般回答出上面的代码 ，基本就没有什么问题了，其实在绝大多数应用场景中，JSON.stringify 的骚操作以及足够满足日常的需求，数据中不会出现function REG DATE 等复杂对象，更不会出现对象的循环引用的问题。但如果有呢，面试问你如何去处理这些问题呢？</p>\n</blockquote>\n<h3 id=\"对象循环引用的问题思路\"><a href=\"#对象循环引用的问题思路\" class=\"headerlink\" title=\"对象循环引用的问题思路\"></a>对象循环引用的问题思路</h3><blockquote>\n<p>实际上对于对象的循环引用，我们这里可以做一个缓存标记之类的，将每一次遍历到的属性，存到私有变量cache数组里，然后在每一次遍历的时候，去cache里寻找，如果有，则直接返回cache中的对象，而不是重新赋值。</p>\n</blockquote>\n<h3 id=\"复杂特殊类型对象的问题\"><a href=\"#复杂特殊类型对象的问题\" class=\"headerlink\" title=\"复杂特殊类型对象的问题\"></a>复杂特殊类型对象的问题</h3><blockquote>\n<p>如果有比如 Reg，Date,Error之类的特殊对象类型，可以单独做处理：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object Date]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object RegExp]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object Error]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(obj)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当有符合特殊类型对象的时候，直接return一个新的包装构造的类型对象</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>提到js深拷贝，算是面试中常规的操作，一般写出下面的代码形式，基本上可以过关：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//如果属性不是对象或者是null，则直接返回该值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//判断obj是数组还是对象</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> copy = <span class=\"built_in\">Array</span>.isArray(obj)? []:&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">     copy[v] = deepCopy(obj[v])  <span class=\"comment\">//这里需要对嵌套的对象进行递归处理</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一般回答出上面的代码 ，基本就没有什么问题了，其实在绝大多数应用场景中，JSON.stringify 的骚操作以及足够满足日常的需求，数据中不会出现function REG DATE 等复杂对象，更不会出现对象的循环引用的问题。但如果有呢，面试问你如何去处理这些问题呢？</p>\n</blockquote>\n<h3 id=\"对象循环引用的问题思路\"><a href=\"#对象循环引用的问题思路\" class=\"headerlink\" title=\"对象循环引用的问题思路\"></a>对象循环引用的问题思路</h3><blockquote>\n<p>实际上对于对象的循环引用，我们这里可以做一个缓存标记之类的，将每一次遍历到的属性，存到私有变量cache数组里，然后在每一次遍历的时候，去cache里寻找，如果有，则直接返回cache中的对象，而不是重新赋值。</p>\n</blockquote>\n<h3 id=\"复杂特殊类型对象的问题\"><a href=\"#复杂特殊类型对象的问题\" class=\"headerlink\" title=\"复杂特殊类型对象的问题\"></a>复杂特殊类型对象的问题</h3><blockquote>\n<p>如果有比如 Reg，Date,Error之类的特殊对象类型，可以单独做处理：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object Date]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object RegExp]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">&#x27;[object Error]&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(obj)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当有符合特殊类型对象的时候，直接return一个新的包装构造的类型对象</p>\n</blockquote>\n"},{"title":"如何用vue手写一个拼图滑块验证的组件","date":"2019-11-16T10:50:58.000Z","_content":"\n## 如何用vue手写一个拼图滑块的组件\n\n### 想手写一个的原因\n\n> 一般来说，网站只要涉及到用户相关的，登录一定会有需要输入验证码之类的功能，用来防止非人为操作的指令。大部分网站实现这部分都是会使用一张五颜六色的验证码图片，用户通过输入图中的文字或者字母，来通过登录请求。\n\n> 还有一种方式，类似bilibili网站的验证操作一样，是通过拼图滑块拖动实现的验证：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/bilibili.png?raw=true)\n\n> 第一眼看到它的时候，不由得会好奇，究竟是怎么实现的，这种拼图的样式和交互。期初我以为是两张图片，都是后台返回来的，然后再给个距离的合适值，前端只需要对比移动的距离值就可以判断。但后来仔细想想，这种方式还没有前端使用canvas绘图来的方便，但是具体怎么做，怎么实现，自己的脑子里暂时是没有具体的思路的。\n\n> 平时写业务遇到多的验证基本都是图片码验证的那种，太过平常的交互，秉着不断学习的心态，决定自己一定要手写一个这样的验证组件，写之前，有需要准备的，首先，去canvasAPI，温习一下相关的canvas知识：[传送门](https://www.canvasapi.cn/)，然后呢，我们需要对其中的一些功能，进行一些详细的思路分析，为我们开始手写，做好充分的准备。\n\n### 整体的思路梳理\n\n> 大致看一下，想象一下具体的交互和流程，对其进行解耦：\n\n* 图片模块：\n    * 底图的实现\n    * 碎片的实现\n* 滑动模块：\n    * 按钮拖动的实现 \n\n* 共享值：滑动距离\n* 边界值计算\n* 容差值计算\n\n> 上面大概分析了下，整个组件分为两个部分，一个是图片模块，可以看出来，它有两个部分，一个是底图，另一个是碎片。其中涉及的值为移动的距离，而移动距离这个值可以通过第二个部分，滑动模块来获取到，因此这里值的共享和触发，使用父子传值$emit实现，另外，两边分别对该值进行watch，来分别触发对应的位置更新。包括边界值和容差值，都是需要根据这个距离值来计算。\n\n```\n<template>\n  <div id=\"app\">\n    <Paper></Paper>\n    <Slide></Slide>\n  </div>\n</template>\n```\n\n### 拼图模块的实现\n\n> 在写这部分内容之前，先要弄清楚，如果是使用canvas来实现，应该怎样去做？\n> 图片模块有底图和碎片，两个部分，肯定是使用两个canvas去实现，并且，两个canvas是需要绝对定位的:\n\n```\n<template>\n<div class=\"wrap\">\n    <div class=\"canvas-wrap\">\n        <canvas class=\"paper\" ref=\"paper\" width=\"300\" height=\"180\"></canvas>\n        <canvas class=\"block\" ref=\"block\" width=\"300\" height=\"180\"></canvas>\n    </div>\n\n</div>\n</template>\n\n<style lang=\"less\" scoped>\n.canvas-wrap {\n    width: 300px;\n    height: 180px;\n    margin: 0 auto;\n    position: relative;\n\n    canvas {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n\n    .block {\n        transform:translateX(-180px)\n    }\n}\n</style>\n```\n\n> 碎片的canvas绝对定位，并且left是个往左偏移的负值，这里我们没有使用left去实现，而是用了性能更好一点的transform。\n\n> 至于两张canvas大小一模一样，因为其实看上去底图和碎片是两个部分，但其实使用的是同一张图，只是canvas绘制的原理不一样而已。\n\n> 画布有了，这时候我们需要一张图片了，也就是用来绘制到canvas上面的图片文件，我们可以在mounted里面，create一个img元素:\n\n```\n\nmounted() {\n        this.$nextTick(() => {\n            let paper = this.$refs.paper\n            let block = this.$refs.block\n            let ctx = paper.getContext('2d')\n            let block_ctx = block.getContext('2d')\n            let img = document.createElement('img')\n            img.onload = () => { \n                ctx.drawImage(img, 0, 0, 300, 180)\n                this.draw(ctx,'fill')\n                //绘制碎片形状\n                this.draw(block_ctx,'clip') //这里要注意，先画路径，之后再填充图片\n                block_ctx.drawImage(img, 0, 0, 300, 180)\n            }\n            img.src = require(\"../assets/bg-img.jpg\")\n\n        })\n    },\n    \n```\n> 这里，我们在nextTick的回调里进行相关的dom操作，是为了保证这个时候，dom确实都已经加载渲染完成。我们获取两个canvas，分别获取对应的上下文，生成一个Img元素，给它的src赋值，注意，我们必须要在图片加载的回调里，进行相关的绘制工作，否则，canvas画布肯定是空白一片的。\n\n> 在img的onload里，进行两个部分的绘制处理，暂时先不看具体的绘制操作，我们先理一下两个部分的区别和共同点：共同点很明显，就是绘制路径一模一样，这部分我们可以共用，区别就是，一个是填充空白，另一个是去掉区域外的其他图片像素，下面我们来看下，具体的绘制逻辑:\n\n```\nmethods: {\n        //获取随机范围\n        getRandom(min, max) {\n            let c = max - min + 1\n            return Math.random() * c + min\n        },\n\n        draw(ctx,opt) {\n            ctx.beginPath()\n            ctx.moveTo(this.x, this.y)\n            ctx.lineTo(this.x + 10, this.y)\n            //绘制上方弧形\n            ctx.arc(this.x + 25, this.y, 10, this.deg2arc(-180), this.deg2arc(0))\n            ctx.lineTo(this.x + 50, this.y)\n            ctx.lineTo(this.x + 50, this.y + 10)\n            //绘制右侧弧形\n            ctx.arc(this.x + 50, this.y + 25, 10, this.deg2arc(-90), this.deg2arc(90))\n            ctx.lineTo(this.x + 50, this.y + 50)\n            ctx.lineTo(this.x, this.y + 50)\n            ctx.lineTo(this.x, this.y + 40)\n            //绘制左侧弧形,true表示逆时针绘制\n            ctx.arc(this.x, this.y + 25, 10, this.deg2arc(90), this.deg2arc(-90), true)\n            ctx.lineTo(this.x, this.y)\n            ctx.lineWidth = 1;\n            ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\n            ctx.strokeStyle = \"rgba(255, 255, 255, 1)\";\n            ctx.stroke();\n            ctx[opt]() \n            ctx.globalCompositeOperation = \"xor\";\n        },\n        //角度转弧度\n        deg2arc(deg) {\n            return deg / 180 * Math.PI\n        }\n    }\n\n```\n\n> 这里主要逻辑就是，首先画路径，其中canvas.arc这个函数的最后一个参数，代表是否逆时针方向绘制，这个在我们绘制左侧凹进去的弧形的时候，很有作用。我们吧'fill'和'clip'当做参数传入，最后的一步调用不同的处理方式，fill就是填充的意思，默认填充白色。clip则是将画布沿着路径裁剪，最后我们在裁剪之后的画布上绘制原来的图片，并且ctx.globalCompositeOperation = \"xor\"，是改变混合模式，意思就是，选择图片与路径重合的区域展示，其余区域则透明。\n\n> 这样我们就能看到，其实两张canvas都展示了，为了表现明显一些，加了一点描边，突出：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/2.png?raw=true)\n\n### 滑动模块的实现\n\n> 滑块模块的实现，主要思路就是，监听鼠标的mousedown mousemove mouseup事件，这里为了保持移动的顺滑，我们需要将监听代理到document对象上面，同时我们需要在up事件中，移出掉move事件，这就意味着，我们的事件函数，需要是具名的，因为removeListener需要的是具名函数参数。\n\n```\n<template>\n<div class=\"wrap\">\n    <div class=\"progress-wrap\">\n        <div ref=\"inner\" class=\"inner-bar\"></div>\n        <div ref=\"button\" class=\"button\" @mousedown=\"down\" @mousemove=\"move\" @mouseup=\"up\"></div>\n    </div>\n</div>\n</template>\n\n```\n\n```\nmethods: {\n\n        //按下按钮处理\n        down(e) {\n            if (e.target === this.$refs.button) {\n                this.isDown = true\n                this.x = e.pageX\n                document.addEventListener(\"mousemove\", this.move)\n            }\n\n        },\n\n        //移动按钮处理\n        move(e) {\n            if (this.isDown) {\n                    this.curX = e.pageX\n                    this.diff = (this.curX - this.x) < -2 ? 0 : (this.curX - this.x) > 220 ? 220 : this.curX - this.x\n                    if (this.diff > -2 && this.diff < 260) {\n                        this.$refs.inner.style.width = (this.diff + 20) + 'px'\n                        this.$refs.button.style.transform = `translateX(${this.diff}px)`\n                    }\n            }\n        },\n        //鼠标抬起处理\n        up() {\n            if (this.diff > 178 && this.diff < 182) {\n                alert(\"验证成功\")\n            }\n            document.removeEventListener('mousemove', this.move)\n            this.reset()\n        },\n\n        reset() {\n            this.isDown = false\n            this.diff = 0\n            this.$refs.inner.style.width = 20 + 'px'\n            this.$refs.button.style.transform = `translateX(0)`\n        }\n\n    }\n```\n\n> 我们通过mousedown记录起始点的pageX,在移动滑块的时候，t计算move的事件对象的pageX与起点的差值，来移动滑块，改变滑块的transform，并且改变进度条的颜色值。\n\n### 关于差值在组件间的传递和实时监听\n\n> 还有一个重要的一点，现在这两个组件各自的交互和样式，都实现了，那么如何去让滑块事件产生的diff差值，传递到图片模块去，让碎片跟随滑块移动？这里就要介绍下vue组件之间的传值方式，这里使用的是emit的方式，slide组件，watch diff的变化，并且触发change事件：回传给父组件，父组件拿到diff值之后，传入paper组件，paper组件里，通过watch diff的变化，来改变碎片的偏移值：\n\n```\n//slide.vue\nwatch: {\n        diff(newV) {\n            this.$emit('change', newV)\n        }\n    },\n    \n//父组件\n<div id=\"app\">\n    <Paper :diff=\"diff\"></Paper>\n    <Slide @change=\"change\"></Slide>\n  </div>\n  \n //paper.vue\n watch:{\n        diff(newV){\n            let v = newV - 180\n            this.$refs.block.style.transform = `translateX(${v}px)`\n        }\n    },\n```\n\n### 最终效果   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/1.gif?raw=true)\n\n### 需要注意的一些点\n\n> 需要注意的点:\n\n* 首先，canvas的api要做到了解和熟悉，至少，路径绘制和混合模式，要清楚，这是拼图的核心实现。特别是圆弧的逆时针绘制，参数要掌握。\n* 滑动事件的原理，需要document委托，还有，进行标志位判断，只有在鼠标按下之后，move的事件才能触发，并且在up事件里，及时移出掉监听。\n* 在img的onload事件中，进行canvas绘制，否则画布不会有任何的响应。\n* 需要对滑块的偏移进行限制，计算出边界值，防止滑块超出预料的范围。\n\n### 总结\n\n> 纸上得来终觉浅，绝知此事要躬行。只有自己亲自试试，才能更熟悉其中的一些原理和技巧。关于canvas的东西，光看文档，作用不太大，亲自试了，感受才能更深刻。\n","source":"_posts/如何用vue手写一个拼图滑块验证的组件.md","raw":"---\ntitle: 如何用vue手写一个拼图滑块验证的组件\ndate: 2019-11-16 18:50:58\ntags:\n  - vue\n  - components\ncategories:\n  - vue\n  - components\n---\n\n## 如何用vue手写一个拼图滑块的组件\n\n### 想手写一个的原因\n\n> 一般来说，网站只要涉及到用户相关的，登录一定会有需要输入验证码之类的功能，用来防止非人为操作的指令。大部分网站实现这部分都是会使用一张五颜六色的验证码图片，用户通过输入图中的文字或者字母，来通过登录请求。\n\n> 还有一种方式，类似bilibili网站的验证操作一样，是通过拼图滑块拖动实现的验证：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/bilibili.png?raw=true)\n\n> 第一眼看到它的时候，不由得会好奇，究竟是怎么实现的，这种拼图的样式和交互。期初我以为是两张图片，都是后台返回来的，然后再给个距离的合适值，前端只需要对比移动的距离值就可以判断。但后来仔细想想，这种方式还没有前端使用canvas绘图来的方便，但是具体怎么做，怎么实现，自己的脑子里暂时是没有具体的思路的。\n\n> 平时写业务遇到多的验证基本都是图片码验证的那种，太过平常的交互，秉着不断学习的心态，决定自己一定要手写一个这样的验证组件，写之前，有需要准备的，首先，去canvasAPI，温习一下相关的canvas知识：[传送门](https://www.canvasapi.cn/)，然后呢，我们需要对其中的一些功能，进行一些详细的思路分析，为我们开始手写，做好充分的准备。\n\n### 整体的思路梳理\n\n> 大致看一下，想象一下具体的交互和流程，对其进行解耦：\n\n* 图片模块：\n    * 底图的实现\n    * 碎片的实现\n* 滑动模块：\n    * 按钮拖动的实现 \n\n* 共享值：滑动距离\n* 边界值计算\n* 容差值计算\n\n> 上面大概分析了下，整个组件分为两个部分，一个是图片模块，可以看出来，它有两个部分，一个是底图，另一个是碎片。其中涉及的值为移动的距离，而移动距离这个值可以通过第二个部分，滑动模块来获取到，因此这里值的共享和触发，使用父子传值$emit实现，另外，两边分别对该值进行watch，来分别触发对应的位置更新。包括边界值和容差值，都是需要根据这个距离值来计算。\n\n```\n<template>\n  <div id=\"app\">\n    <Paper></Paper>\n    <Slide></Slide>\n  </div>\n</template>\n```\n\n### 拼图模块的实现\n\n> 在写这部分内容之前，先要弄清楚，如果是使用canvas来实现，应该怎样去做？\n> 图片模块有底图和碎片，两个部分，肯定是使用两个canvas去实现，并且，两个canvas是需要绝对定位的:\n\n```\n<template>\n<div class=\"wrap\">\n    <div class=\"canvas-wrap\">\n        <canvas class=\"paper\" ref=\"paper\" width=\"300\" height=\"180\"></canvas>\n        <canvas class=\"block\" ref=\"block\" width=\"300\" height=\"180\"></canvas>\n    </div>\n\n</div>\n</template>\n\n<style lang=\"less\" scoped>\n.canvas-wrap {\n    width: 300px;\n    height: 180px;\n    margin: 0 auto;\n    position: relative;\n\n    canvas {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n\n    .block {\n        transform:translateX(-180px)\n    }\n}\n</style>\n```\n\n> 碎片的canvas绝对定位，并且left是个往左偏移的负值，这里我们没有使用left去实现，而是用了性能更好一点的transform。\n\n> 至于两张canvas大小一模一样，因为其实看上去底图和碎片是两个部分，但其实使用的是同一张图，只是canvas绘制的原理不一样而已。\n\n> 画布有了，这时候我们需要一张图片了，也就是用来绘制到canvas上面的图片文件，我们可以在mounted里面，create一个img元素:\n\n```\n\nmounted() {\n        this.$nextTick(() => {\n            let paper = this.$refs.paper\n            let block = this.$refs.block\n            let ctx = paper.getContext('2d')\n            let block_ctx = block.getContext('2d')\n            let img = document.createElement('img')\n            img.onload = () => { \n                ctx.drawImage(img, 0, 0, 300, 180)\n                this.draw(ctx,'fill')\n                //绘制碎片形状\n                this.draw(block_ctx,'clip') //这里要注意，先画路径，之后再填充图片\n                block_ctx.drawImage(img, 0, 0, 300, 180)\n            }\n            img.src = require(\"../assets/bg-img.jpg\")\n\n        })\n    },\n    \n```\n> 这里，我们在nextTick的回调里进行相关的dom操作，是为了保证这个时候，dom确实都已经加载渲染完成。我们获取两个canvas，分别获取对应的上下文，生成一个Img元素，给它的src赋值，注意，我们必须要在图片加载的回调里，进行相关的绘制工作，否则，canvas画布肯定是空白一片的。\n\n> 在img的onload里，进行两个部分的绘制处理，暂时先不看具体的绘制操作，我们先理一下两个部分的区别和共同点：共同点很明显，就是绘制路径一模一样，这部分我们可以共用，区别就是，一个是填充空白，另一个是去掉区域外的其他图片像素，下面我们来看下，具体的绘制逻辑:\n\n```\nmethods: {\n        //获取随机范围\n        getRandom(min, max) {\n            let c = max - min + 1\n            return Math.random() * c + min\n        },\n\n        draw(ctx,opt) {\n            ctx.beginPath()\n            ctx.moveTo(this.x, this.y)\n            ctx.lineTo(this.x + 10, this.y)\n            //绘制上方弧形\n            ctx.arc(this.x + 25, this.y, 10, this.deg2arc(-180), this.deg2arc(0))\n            ctx.lineTo(this.x + 50, this.y)\n            ctx.lineTo(this.x + 50, this.y + 10)\n            //绘制右侧弧形\n            ctx.arc(this.x + 50, this.y + 25, 10, this.deg2arc(-90), this.deg2arc(90))\n            ctx.lineTo(this.x + 50, this.y + 50)\n            ctx.lineTo(this.x, this.y + 50)\n            ctx.lineTo(this.x, this.y + 40)\n            //绘制左侧弧形,true表示逆时针绘制\n            ctx.arc(this.x, this.y + 25, 10, this.deg2arc(90), this.deg2arc(-90), true)\n            ctx.lineTo(this.x, this.y)\n            ctx.lineWidth = 1;\n            ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\n            ctx.strokeStyle = \"rgba(255, 255, 255, 1)\";\n            ctx.stroke();\n            ctx[opt]() \n            ctx.globalCompositeOperation = \"xor\";\n        },\n        //角度转弧度\n        deg2arc(deg) {\n            return deg / 180 * Math.PI\n        }\n    }\n\n```\n\n> 这里主要逻辑就是，首先画路径，其中canvas.arc这个函数的最后一个参数，代表是否逆时针方向绘制，这个在我们绘制左侧凹进去的弧形的时候，很有作用。我们吧'fill'和'clip'当做参数传入，最后的一步调用不同的处理方式，fill就是填充的意思，默认填充白色。clip则是将画布沿着路径裁剪，最后我们在裁剪之后的画布上绘制原来的图片，并且ctx.globalCompositeOperation = \"xor\"，是改变混合模式，意思就是，选择图片与路径重合的区域展示，其余区域则透明。\n\n> 这样我们就能看到，其实两张canvas都展示了，为了表现明显一些，加了一点描边，突出：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/2.png?raw=true)\n\n### 滑动模块的实现\n\n> 滑块模块的实现，主要思路就是，监听鼠标的mousedown mousemove mouseup事件，这里为了保持移动的顺滑，我们需要将监听代理到document对象上面，同时我们需要在up事件中，移出掉move事件，这就意味着，我们的事件函数，需要是具名的，因为removeListener需要的是具名函数参数。\n\n```\n<template>\n<div class=\"wrap\">\n    <div class=\"progress-wrap\">\n        <div ref=\"inner\" class=\"inner-bar\"></div>\n        <div ref=\"button\" class=\"button\" @mousedown=\"down\" @mousemove=\"move\" @mouseup=\"up\"></div>\n    </div>\n</div>\n</template>\n\n```\n\n```\nmethods: {\n\n        //按下按钮处理\n        down(e) {\n            if (e.target === this.$refs.button) {\n                this.isDown = true\n                this.x = e.pageX\n                document.addEventListener(\"mousemove\", this.move)\n            }\n\n        },\n\n        //移动按钮处理\n        move(e) {\n            if (this.isDown) {\n                    this.curX = e.pageX\n                    this.diff = (this.curX - this.x) < -2 ? 0 : (this.curX - this.x) > 220 ? 220 : this.curX - this.x\n                    if (this.diff > -2 && this.diff < 260) {\n                        this.$refs.inner.style.width = (this.diff + 20) + 'px'\n                        this.$refs.button.style.transform = `translateX(${this.diff}px)`\n                    }\n            }\n        },\n        //鼠标抬起处理\n        up() {\n            if (this.diff > 178 && this.diff < 182) {\n                alert(\"验证成功\")\n            }\n            document.removeEventListener('mousemove', this.move)\n            this.reset()\n        },\n\n        reset() {\n            this.isDown = false\n            this.diff = 0\n            this.$refs.inner.style.width = 20 + 'px'\n            this.$refs.button.style.transform = `translateX(0)`\n        }\n\n    }\n```\n\n> 我们通过mousedown记录起始点的pageX,在移动滑块的时候，t计算move的事件对象的pageX与起点的差值，来移动滑块，改变滑块的transform，并且改变进度条的颜色值。\n\n### 关于差值在组件间的传递和实时监听\n\n> 还有一个重要的一点，现在这两个组件各自的交互和样式，都实现了，那么如何去让滑块事件产生的diff差值，传递到图片模块去，让碎片跟随滑块移动？这里就要介绍下vue组件之间的传值方式，这里使用的是emit的方式，slide组件，watch diff的变化，并且触发change事件：回传给父组件，父组件拿到diff值之后，传入paper组件，paper组件里，通过watch diff的变化，来改变碎片的偏移值：\n\n```\n//slide.vue\nwatch: {\n        diff(newV) {\n            this.$emit('change', newV)\n        }\n    },\n    \n//父组件\n<div id=\"app\">\n    <Paper :diff=\"diff\"></Paper>\n    <Slide @change=\"change\"></Slide>\n  </div>\n  \n //paper.vue\n watch:{\n        diff(newV){\n            let v = newV - 180\n            this.$refs.block.style.transform = `translateX(${v}px)`\n        }\n    },\n```\n\n### 最终效果   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191113/1.gif?raw=true)\n\n### 需要注意的一些点\n\n> 需要注意的点:\n\n* 首先，canvas的api要做到了解和熟悉，至少，路径绘制和混合模式，要清楚，这是拼图的核心实现。特别是圆弧的逆时针绘制，参数要掌握。\n* 滑动事件的原理，需要document委托，还有，进行标志位判断，只有在鼠标按下之后，move的事件才能触发，并且在up事件里，及时移出掉监听。\n* 在img的onload事件中，进行canvas绘制，否则画布不会有任何的响应。\n* 需要对滑块的偏移进行限制，计算出边界值，防止滑块超出预料的范围。\n\n### 总结\n\n> 纸上得来终觉浅，绝知此事要躬行。只有自己亲自试试，才能更熟悉其中的一些原理和技巧。关于canvas的东西，光看文档，作用不太大，亲自试了，感受才能更深刻。\n","slug":"如何用vue手写一个拼图滑块验证的组件","published":1,"updated":"2019-11-16T10:52:30.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxml002qmsvifvok5u3y","content":"<h2 id=\"如何用vue手写一个拼图滑块的组件\"><a href=\"#如何用vue手写一个拼图滑块的组件\" class=\"headerlink\" title=\"如何用vue手写一个拼图滑块的组件\"></a>如何用vue手写一个拼图滑块的组件</h2><h3 id=\"想手写一个的原因\"><a href=\"#想手写一个的原因\" class=\"headerlink\" title=\"想手写一个的原因\"></a>想手写一个的原因</h3><blockquote>\n<p>一般来说，网站只要涉及到用户相关的，登录一定会有需要输入验证码之类的功能，用来防止非人为操作的指令。大部分网站实现这部分都是会使用一张五颜六色的验证码图片，用户通过输入图中的文字或者字母，来通过登录请求。</p>\n</blockquote>\n<blockquote>\n<p>还有一种方式，类似bilibili网站的验证操作一样，是通过拼图滑块拖动实现的验证：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/bilibili.png?raw=true\"></p>\n<blockquote>\n<p>第一眼看到它的时候，不由得会好奇，究竟是怎么实现的，这种拼图的样式和交互。期初我以为是两张图片，都是后台返回来的，然后再给个距离的合适值，前端只需要对比移动的距离值就可以判断。但后来仔细想想，这种方式还没有前端使用canvas绘图来的方便，但是具体怎么做，怎么实现，自己的脑子里暂时是没有具体的思路的。</p>\n</blockquote>\n<blockquote>\n<p>平时写业务遇到多的验证基本都是图片码验证的那种，太过平常的交互，秉着不断学习的心态，决定自己一定要手写一个这样的验证组件，写之前，有需要准备的，首先，去canvasAPI，温习一下相关的canvas知识：<a href=\"https://www.canvasapi.cn/\">传送门</a>，然后呢，我们需要对其中的一些功能，进行一些详细的思路分析，为我们开始手写，做好充分的准备。</p>\n</blockquote>\n<h3 id=\"整体的思路梳理\"><a href=\"#整体的思路梳理\" class=\"headerlink\" title=\"整体的思路梳理\"></a>整体的思路梳理</h3><blockquote>\n<p>大致看一下，想象一下具体的交互和流程，对其进行解耦：</p>\n</blockquote>\n<ul>\n<li><p>图片模块：</p>\n<ul>\n<li>底图的实现</li>\n<li>碎片的实现</li>\n</ul>\n</li>\n<li><p>滑动模块：</p>\n<ul>\n<li>按钮拖动的实现 </li>\n</ul>\n</li>\n<li><p>共享值：滑动距离</p>\n</li>\n<li><p>边界值计算</p>\n</li>\n<li><p>容差值计算</p>\n</li>\n</ul>\n<blockquote>\n<p>上面大概分析了下，整个组件分为两个部分，一个是图片模块，可以看出来，它有两个部分，一个是底图，另一个是碎片。其中涉及的值为移动的距离，而移动距离这个值可以通过第二个部分，滑动模块来获取到，因此这里值的共享和触发，使用父子传值$emit实现，另外，两边分别对该值进行watch，来分别触发对应的位置更新。包括边界值和容差值，都是需要根据这个距离值来计算。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Paper&gt;&lt;&#x2F;Paper&gt;</span><br><span class=\"line\">    &lt;Slide&gt;&lt;&#x2F;Slide&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拼图模块的实现\"><a href=\"#拼图模块的实现\" class=\"headerlink\" title=\"拼图模块的实现\"></a>拼图模块的实现</h3><blockquote>\n<p>在写这部分内容之前，先要弄清楚，如果是使用canvas来实现，应该怎样去做？<br>图片模块有底图和碎片，两个部分，肯定是使用两个canvas去实现，并且，两个canvas是需要绝对定位的:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;canvas-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;canvas class&#x3D;&quot;paper&quot; ref&#x3D;&quot;paper&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;180&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">        &lt;canvas class&#x3D;&quot;block&quot; ref&#x3D;&quot;block&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;180&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.canvas-wrap &#123;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 180px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .block &#123;</span><br><span class=\"line\">        transform:translateX(-180px)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>碎片的canvas绝对定位，并且left是个往左偏移的负值，这里我们没有使用left去实现，而是用了性能更好一点的transform。</p>\n</blockquote>\n<blockquote>\n<p>至于两张canvas大小一模一样，因为其实看上去底图和碎片是两个部分，但其实使用的是同一张图，只是canvas绘制的原理不一样而已。</p>\n</blockquote>\n<blockquote>\n<p>画布有了，这时候我们需要一张图片了，也就是用来绘制到canvas上面的图片文件，我们可以在mounted里面，create一个img元素:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            let paper &#x3D; this.$refs.paper</span><br><span class=\"line\">            let block &#x3D; this.$refs.block</span><br><span class=\"line\">            let ctx &#x3D; paper.getContext(&#39;2d&#39;)</span><br><span class=\"line\">            let block_ctx &#x3D; block.getContext(&#39;2d&#39;)</span><br><span class=\"line\">            let img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">            img.onload &#x3D; () &#x3D;&gt; &#123; </span><br><span class=\"line\">                ctx.drawImage(img, 0, 0, 300, 180)</span><br><span class=\"line\">                this.draw(ctx,&#39;fill&#39;)</span><br><span class=\"line\">                &#x2F;&#x2F;绘制碎片形状</span><br><span class=\"line\">                this.draw(block_ctx,&#39;clip&#39;) &#x2F;&#x2F;这里要注意，先画路径，之后再填充图片</span><br><span class=\"line\">                block_ctx.drawImage(img, 0, 0, 300, 180)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.src &#x3D; require(&quot;..&#x2F;assets&#x2F;bg-img.jpg&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里，我们在nextTick的回调里进行相关的dom操作，是为了保证这个时候，dom确实都已经加载渲染完成。我们获取两个canvas，分别获取对应的上下文，生成一个Img元素，给它的src赋值，注意，我们必须要在图片加载的回调里，进行相关的绘制工作，否则，canvas画布肯定是空白一片的。</p>\n</blockquote>\n<blockquote>\n<p>在img的onload里，进行两个部分的绘制处理，暂时先不看具体的绘制操作，我们先理一下两个部分的区别和共同点：共同点很明显，就是绘制路径一模一样，这部分我们可以共用，区别就是，一个是填充空白，另一个是去掉区域外的其他图片像素，下面我们来看下，具体的绘制逻辑:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;获取随机范围</span><br><span class=\"line\">        getRandom(min, max) &#123;</span><br><span class=\"line\">            let c &#x3D; max - min + 1</span><br><span class=\"line\">            return Math.random() * c + min</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        draw(ctx,opt) &#123;</span><br><span class=\"line\">            ctx.beginPath()</span><br><span class=\"line\">            ctx.moveTo(this.x, this.y)</span><br><span class=\"line\">            ctx.lineTo(this.x + 10, this.y)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制上方弧形</span><br><span class=\"line\">            ctx.arc(this.x + 25, this.y, 10, this.deg2arc(-180), this.deg2arc(0))</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y)</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y + 10)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制右侧弧形</span><br><span class=\"line\">            ctx.arc(this.x + 50, this.y + 25, 10, this.deg2arc(-90), this.deg2arc(90))</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y + 50)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y + 50)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y + 40)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制左侧弧形,true表示逆时针绘制</span><br><span class=\"line\">            ctx.arc(this.x, this.y + 25, 10, this.deg2arc(90), this.deg2arc(-90), true)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y)</span><br><span class=\"line\">            ctx.lineWidth &#x3D; 1;</span><br><span class=\"line\">            ctx.fillStyle &#x3D; &quot;rgba(255, 255, 255, 1)&quot;;</span><br><span class=\"line\">            ctx.strokeStyle &#x3D; &quot;rgba(255, 255, 255, 1)&quot;;</span><br><span class=\"line\">            ctx.stroke();</span><br><span class=\"line\">            ctx[opt]() </span><br><span class=\"line\">            ctx.globalCompositeOperation &#x3D; &quot;xor&quot;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#x2F;&#x2F;角度转弧度</span><br><span class=\"line\">        deg2arc(deg) &#123;</span><br><span class=\"line\">            return deg &#x2F; 180 * Math.PI</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里主要逻辑就是，首先画路径，其中canvas.arc这个函数的最后一个参数，代表是否逆时针方向绘制，这个在我们绘制左侧凹进去的弧形的时候，很有作用。我们吧’fill’和’clip’当做参数传入，最后的一步调用不同的处理方式，fill就是填充的意思，默认填充白色。clip则是将画布沿着路径裁剪，最后我们在裁剪之后的画布上绘制原来的图片，并且ctx.globalCompositeOperation = “xor”，是改变混合模式，意思就是，选择图片与路径重合的区域展示，其余区域则透明。</p>\n</blockquote>\n<blockquote>\n<p>这样我们就能看到，其实两张canvas都展示了，为了表现明显一些，加了一点描边，突出：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/2.png?raw=true\"></p>\n<h3 id=\"滑动模块的实现\"><a href=\"#滑动模块的实现\" class=\"headerlink\" title=\"滑动模块的实现\"></a>滑动模块的实现</h3><blockquote>\n<p>滑块模块的实现，主要思路就是，监听鼠标的mousedown mousemove mouseup事件，这里为了保持移动的顺滑，我们需要将监听代理到document对象上面，同时我们需要在up事件中，移出掉move事件，这就意味着，我们的事件函数，需要是具名的，因为removeListener需要的是具名函数参数。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;progress-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;div ref&#x3D;&quot;inner&quot; class&#x3D;&quot;inner-bar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div ref&#x3D;&quot;button&quot; class&#x3D;&quot;button&quot; @mousedown&#x3D;&quot;down&quot; @mousemove&#x3D;&quot;move&quot; @mouseup&#x3D;&quot;up&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;按下按钮处理</span><br><span class=\"line\">        down(e) &#123;</span><br><span class=\"line\">            if (e.target &#x3D;&#x3D;&#x3D; this.$refs.button) &#123;</span><br><span class=\"line\">                this.isDown &#x3D; true</span><br><span class=\"line\">                this.x &#x3D; e.pageX</span><br><span class=\"line\">                document.addEventListener(&quot;mousemove&quot;, this.move)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;移动按钮处理</span><br><span class=\"line\">        move(e) &#123;</span><br><span class=\"line\">            if (this.isDown) &#123;</span><br><span class=\"line\">                    this.curX &#x3D; e.pageX</span><br><span class=\"line\">                    this.diff &#x3D; (this.curX - this.x) &lt; -2 ? 0 : (this.curX - this.x) &gt; 220 ? 220 : this.curX - this.x</span><br><span class=\"line\">                    if (this.diff &gt; -2 &amp;&amp; this.diff &lt; 260) &#123;</span><br><span class=\"line\">                        this.$refs.inner.style.width &#x3D; (this.diff + 20) + &#39;px&#39;</span><br><span class=\"line\">                        this.$refs.button.style.transform &#x3D; &#96;translateX($&#123;this.diff&#125;px)&#96;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#x2F;&#x2F;鼠标抬起处理</span><br><span class=\"line\">        up() &#123;</span><br><span class=\"line\">            if (this.diff &gt; 178 &amp;&amp; this.diff &lt; 182) &#123;</span><br><span class=\"line\">                alert(&quot;验证成功&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            document.removeEventListener(&#39;mousemove&#39;, this.move)</span><br><span class=\"line\">            this.reset()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        reset() &#123;</span><br><span class=\"line\">            this.isDown &#x3D; false</span><br><span class=\"line\">            this.diff &#x3D; 0</span><br><span class=\"line\">            this.$refs.inner.style.width &#x3D; 20 + &#39;px&#39;</span><br><span class=\"line\">            this.$refs.button.style.transform &#x3D; &#96;translateX(0)&#96;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过mousedown记录起始点的pageX,在移动滑块的时候，t计算move的事件对象的pageX与起点的差值，来移动滑块，改变滑块的transform，并且改变进度条的颜色值。</p>\n</blockquote>\n<h3 id=\"关于差值在组件间的传递和实时监听\"><a href=\"#关于差值在组件间的传递和实时监听\" class=\"headerlink\" title=\"关于差值在组件间的传递和实时监听\"></a>关于差值在组件间的传递和实时监听</h3><blockquote>\n<p>还有一个重要的一点，现在这两个组件各自的交互和样式，都实现了，那么如何去让滑块事件产生的diff差值，传递到图片模块去，让碎片跟随滑块移动？这里就要介绍下vue组件之间的传值方式，这里使用的是emit的方式，slide组件，watch diff的变化，并且触发change事件：回传给父组件，父组件拿到diff值之后，传入paper组件，paper组件里，通过watch diff的变化，来改变碎片的偏移值：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;slide.vue</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">        diff(newV) &#123;</span><br><span class=\"line\">            this.$emit(&#39;change&#39;, newV)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;父组件</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Paper :diff&#x3D;&quot;diff&quot;&gt;&lt;&#x2F;Paper&gt;</span><br><span class=\"line\">    &lt;Slide @change&#x3D;&quot;change&quot;&gt;&lt;&#x2F;Slide&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"> &#x2F;&#x2F;paper.vue</span><br><span class=\"line\"> watch:&#123;</span><br><span class=\"line\">        diff(newV)&#123;</span><br><span class=\"line\">            let v &#x3D; newV - 180</span><br><span class=\"line\">            this.$refs.block.style.transform &#x3D; &#96;translateX($&#123;v&#125;px)&#96;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/1.gif?raw=true\"></p>\n<h3 id=\"需要注意的一些点\"><a href=\"#需要注意的一些点\" class=\"headerlink\" title=\"需要注意的一些点\"></a>需要注意的一些点</h3><blockquote>\n<p>需要注意的点:</p>\n</blockquote>\n<ul>\n<li>首先，canvas的api要做到了解和熟悉，至少，路径绘制和混合模式，要清楚，这是拼图的核心实现。特别是圆弧的逆时针绘制，参数要掌握。</li>\n<li>滑动事件的原理，需要document委托，还有，进行标志位判断，只有在鼠标按下之后，move的事件才能触发，并且在up事件里，及时移出掉监听。</li>\n<li>在img的onload事件中，进行canvas绘制，否则画布不会有任何的响应。</li>\n<li>需要对滑块的偏移进行限制，计算出边界值，防止滑块超出预料的范围。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。只有自己亲自试试，才能更熟悉其中的一些原理和技巧。关于canvas的东西，光看文档，作用不太大，亲自试了，感受才能更深刻。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何用vue手写一个拼图滑块的组件\"><a href=\"#如何用vue手写一个拼图滑块的组件\" class=\"headerlink\" title=\"如何用vue手写一个拼图滑块的组件\"></a>如何用vue手写一个拼图滑块的组件</h2><h3 id=\"想手写一个的原因\"><a href=\"#想手写一个的原因\" class=\"headerlink\" title=\"想手写一个的原因\"></a>想手写一个的原因</h3><blockquote>\n<p>一般来说，网站只要涉及到用户相关的，登录一定会有需要输入验证码之类的功能，用来防止非人为操作的指令。大部分网站实现这部分都是会使用一张五颜六色的验证码图片，用户通过输入图中的文字或者字母，来通过登录请求。</p>\n</blockquote>\n<blockquote>\n<p>还有一种方式，类似bilibili网站的验证操作一样，是通过拼图滑块拖动实现的验证：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/bilibili.png?raw=true\"></p>\n<blockquote>\n<p>第一眼看到它的时候，不由得会好奇，究竟是怎么实现的，这种拼图的样式和交互。期初我以为是两张图片，都是后台返回来的，然后再给个距离的合适值，前端只需要对比移动的距离值就可以判断。但后来仔细想想，这种方式还没有前端使用canvas绘图来的方便，但是具体怎么做，怎么实现，自己的脑子里暂时是没有具体的思路的。</p>\n</blockquote>\n<blockquote>\n<p>平时写业务遇到多的验证基本都是图片码验证的那种，太过平常的交互，秉着不断学习的心态，决定自己一定要手写一个这样的验证组件，写之前，有需要准备的，首先，去canvasAPI，温习一下相关的canvas知识：<a href=\"https://www.canvasapi.cn/\">传送门</a>，然后呢，我们需要对其中的一些功能，进行一些详细的思路分析，为我们开始手写，做好充分的准备。</p>\n</blockquote>\n<h3 id=\"整体的思路梳理\"><a href=\"#整体的思路梳理\" class=\"headerlink\" title=\"整体的思路梳理\"></a>整体的思路梳理</h3><blockquote>\n<p>大致看一下，想象一下具体的交互和流程，对其进行解耦：</p>\n</blockquote>\n<ul>\n<li><p>图片模块：</p>\n<ul>\n<li>底图的实现</li>\n<li>碎片的实现</li>\n</ul>\n</li>\n<li><p>滑动模块：</p>\n<ul>\n<li>按钮拖动的实现 </li>\n</ul>\n</li>\n<li><p>共享值：滑动距离</p>\n</li>\n<li><p>边界值计算</p>\n</li>\n<li><p>容差值计算</p>\n</li>\n</ul>\n<blockquote>\n<p>上面大概分析了下，整个组件分为两个部分，一个是图片模块，可以看出来，它有两个部分，一个是底图，另一个是碎片。其中涉及的值为移动的距离，而移动距离这个值可以通过第二个部分，滑动模块来获取到，因此这里值的共享和触发，使用父子传值$emit实现，另外，两边分别对该值进行watch，来分别触发对应的位置更新。包括边界值和容差值，都是需要根据这个距离值来计算。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Paper&gt;&lt;&#x2F;Paper&gt;</span><br><span class=\"line\">    &lt;Slide&gt;&lt;&#x2F;Slide&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拼图模块的实现\"><a href=\"#拼图模块的实现\" class=\"headerlink\" title=\"拼图模块的实现\"></a>拼图模块的实现</h3><blockquote>\n<p>在写这部分内容之前，先要弄清楚，如果是使用canvas来实现，应该怎样去做？<br>图片模块有底图和碎片，两个部分，肯定是使用两个canvas去实现，并且，两个canvas是需要绝对定位的:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;canvas-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;canvas class&#x3D;&quot;paper&quot; ref&#x3D;&quot;paper&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;180&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">        &lt;canvas class&#x3D;&quot;block&quot; ref&#x3D;&quot;block&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;180&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class=\"line\">.canvas-wrap &#123;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 180px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .block &#123;</span><br><span class=\"line\">        transform:translateX(-180px)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>碎片的canvas绝对定位，并且left是个往左偏移的负值，这里我们没有使用left去实现，而是用了性能更好一点的transform。</p>\n</blockquote>\n<blockquote>\n<p>至于两张canvas大小一模一样，因为其实看上去底图和碎片是两个部分，但其实使用的是同一张图，只是canvas绘制的原理不一样而已。</p>\n</blockquote>\n<blockquote>\n<p>画布有了，这时候我们需要一张图片了，也就是用来绘制到canvas上面的图片文件，我们可以在mounted里面，create一个img元素:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            let paper &#x3D; this.$refs.paper</span><br><span class=\"line\">            let block &#x3D; this.$refs.block</span><br><span class=\"line\">            let ctx &#x3D; paper.getContext(&#39;2d&#39;)</span><br><span class=\"line\">            let block_ctx &#x3D; block.getContext(&#39;2d&#39;)</span><br><span class=\"line\">            let img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">            img.onload &#x3D; () &#x3D;&gt; &#123; </span><br><span class=\"line\">                ctx.drawImage(img, 0, 0, 300, 180)</span><br><span class=\"line\">                this.draw(ctx,&#39;fill&#39;)</span><br><span class=\"line\">                &#x2F;&#x2F;绘制碎片形状</span><br><span class=\"line\">                this.draw(block_ctx,&#39;clip&#39;) &#x2F;&#x2F;这里要注意，先画路径，之后再填充图片</span><br><span class=\"line\">                block_ctx.drawImage(img, 0, 0, 300, 180)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.src &#x3D; require(&quot;..&#x2F;assets&#x2F;bg-img.jpg&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里，我们在nextTick的回调里进行相关的dom操作，是为了保证这个时候，dom确实都已经加载渲染完成。我们获取两个canvas，分别获取对应的上下文，生成一个Img元素，给它的src赋值，注意，我们必须要在图片加载的回调里，进行相关的绘制工作，否则，canvas画布肯定是空白一片的。</p>\n</blockquote>\n<blockquote>\n<p>在img的onload里，进行两个部分的绘制处理，暂时先不看具体的绘制操作，我们先理一下两个部分的区别和共同点：共同点很明显，就是绘制路径一模一样，这部分我们可以共用，区别就是，一个是填充空白，另一个是去掉区域外的其他图片像素，下面我们来看下，具体的绘制逻辑:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;获取随机范围</span><br><span class=\"line\">        getRandom(min, max) &#123;</span><br><span class=\"line\">            let c &#x3D; max - min + 1</span><br><span class=\"line\">            return Math.random() * c + min</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        draw(ctx,opt) &#123;</span><br><span class=\"line\">            ctx.beginPath()</span><br><span class=\"line\">            ctx.moveTo(this.x, this.y)</span><br><span class=\"line\">            ctx.lineTo(this.x + 10, this.y)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制上方弧形</span><br><span class=\"line\">            ctx.arc(this.x + 25, this.y, 10, this.deg2arc(-180), this.deg2arc(0))</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y)</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y + 10)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制右侧弧形</span><br><span class=\"line\">            ctx.arc(this.x + 50, this.y + 25, 10, this.deg2arc(-90), this.deg2arc(90))</span><br><span class=\"line\">            ctx.lineTo(this.x + 50, this.y + 50)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y + 50)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y + 40)</span><br><span class=\"line\">            &#x2F;&#x2F;绘制左侧弧形,true表示逆时针绘制</span><br><span class=\"line\">            ctx.arc(this.x, this.y + 25, 10, this.deg2arc(90), this.deg2arc(-90), true)</span><br><span class=\"line\">            ctx.lineTo(this.x, this.y)</span><br><span class=\"line\">            ctx.lineWidth &#x3D; 1;</span><br><span class=\"line\">            ctx.fillStyle &#x3D; &quot;rgba(255, 255, 255, 1)&quot;;</span><br><span class=\"line\">            ctx.strokeStyle &#x3D; &quot;rgba(255, 255, 255, 1)&quot;;</span><br><span class=\"line\">            ctx.stroke();</span><br><span class=\"line\">            ctx[opt]() </span><br><span class=\"line\">            ctx.globalCompositeOperation &#x3D; &quot;xor&quot;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#x2F;&#x2F;角度转弧度</span><br><span class=\"line\">        deg2arc(deg) &#123;</span><br><span class=\"line\">            return deg &#x2F; 180 * Math.PI</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里主要逻辑就是，首先画路径，其中canvas.arc这个函数的最后一个参数，代表是否逆时针方向绘制，这个在我们绘制左侧凹进去的弧形的时候，很有作用。我们吧’fill’和’clip’当做参数传入，最后的一步调用不同的处理方式，fill就是填充的意思，默认填充白色。clip则是将画布沿着路径裁剪，最后我们在裁剪之后的画布上绘制原来的图片，并且ctx.globalCompositeOperation = “xor”，是改变混合模式，意思就是，选择图片与路径重合的区域展示，其余区域则透明。</p>\n</blockquote>\n<blockquote>\n<p>这样我们就能看到，其实两张canvas都展示了，为了表现明显一些，加了一点描边，突出：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/2.png?raw=true\"></p>\n<h3 id=\"滑动模块的实现\"><a href=\"#滑动模块的实现\" class=\"headerlink\" title=\"滑动模块的实现\"></a>滑动模块的实现</h3><blockquote>\n<p>滑块模块的实现，主要思路就是，监听鼠标的mousedown mousemove mouseup事件，这里为了保持移动的顺滑，我们需要将监听代理到document对象上面，同时我们需要在up事件中，移出掉move事件，这就意味着，我们的事件函数，需要是具名的，因为removeListener需要的是具名函数参数。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;progress-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;div ref&#x3D;&quot;inner&quot; class&#x3D;&quot;inner-bar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div ref&#x3D;&quot;button&quot; class&#x3D;&quot;button&quot; @mousedown&#x3D;&quot;down&quot; @mousemove&#x3D;&quot;move&quot; @mouseup&#x3D;&quot;up&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;按下按钮处理</span><br><span class=\"line\">        down(e) &#123;</span><br><span class=\"line\">            if (e.target &#x3D;&#x3D;&#x3D; this.$refs.button) &#123;</span><br><span class=\"line\">                this.isDown &#x3D; true</span><br><span class=\"line\">                this.x &#x3D; e.pageX</span><br><span class=\"line\">                document.addEventListener(&quot;mousemove&quot;, this.move)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;移动按钮处理</span><br><span class=\"line\">        move(e) &#123;</span><br><span class=\"line\">            if (this.isDown) &#123;</span><br><span class=\"line\">                    this.curX &#x3D; e.pageX</span><br><span class=\"line\">                    this.diff &#x3D; (this.curX - this.x) &lt; -2 ? 0 : (this.curX - this.x) &gt; 220 ? 220 : this.curX - this.x</span><br><span class=\"line\">                    if (this.diff &gt; -2 &amp;&amp; this.diff &lt; 260) &#123;</span><br><span class=\"line\">                        this.$refs.inner.style.width &#x3D; (this.diff + 20) + &#39;px&#39;</span><br><span class=\"line\">                        this.$refs.button.style.transform &#x3D; &#96;translateX($&#123;this.diff&#125;px)&#96;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#x2F;&#x2F;鼠标抬起处理</span><br><span class=\"line\">        up() &#123;</span><br><span class=\"line\">            if (this.diff &gt; 178 &amp;&amp; this.diff &lt; 182) &#123;</span><br><span class=\"line\">                alert(&quot;验证成功&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            document.removeEventListener(&#39;mousemove&#39;, this.move)</span><br><span class=\"line\">            this.reset()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        reset() &#123;</span><br><span class=\"line\">            this.isDown &#x3D; false</span><br><span class=\"line\">            this.diff &#x3D; 0</span><br><span class=\"line\">            this.$refs.inner.style.width &#x3D; 20 + &#39;px&#39;</span><br><span class=\"line\">            this.$refs.button.style.transform &#x3D; &#96;translateX(0)&#96;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过mousedown记录起始点的pageX,在移动滑块的时候，t计算move的事件对象的pageX与起点的差值，来移动滑块，改变滑块的transform，并且改变进度条的颜色值。</p>\n</blockquote>\n<h3 id=\"关于差值在组件间的传递和实时监听\"><a href=\"#关于差值在组件间的传递和实时监听\" class=\"headerlink\" title=\"关于差值在组件间的传递和实时监听\"></a>关于差值在组件间的传递和实时监听</h3><blockquote>\n<p>还有一个重要的一点，现在这两个组件各自的交互和样式，都实现了，那么如何去让滑块事件产生的diff差值，传递到图片模块去，让碎片跟随滑块移动？这里就要介绍下vue组件之间的传值方式，这里使用的是emit的方式，slide组件，watch diff的变化，并且触发change事件：回传给父组件，父组件拿到diff值之后，传入paper组件，paper组件里，通过watch diff的变化，来改变碎片的偏移值：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;slide.vue</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">        diff(newV) &#123;</span><br><span class=\"line\">            this.$emit(&#39;change&#39;, newV)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;父组件</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;Paper :diff&#x3D;&quot;diff&quot;&gt;&lt;&#x2F;Paper&gt;</span><br><span class=\"line\">    &lt;Slide @change&#x3D;&quot;change&quot;&gt;&lt;&#x2F;Slide&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"> &#x2F;&#x2F;paper.vue</span><br><span class=\"line\"> watch:&#123;</span><br><span class=\"line\">        diff(newV)&#123;</span><br><span class=\"line\">            let v &#x3D; newV - 180</span><br><span class=\"line\">            this.$refs.block.style.transform &#x3D; &#96;translateX($&#123;v&#125;px)&#96;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191113/1.gif?raw=true\"></p>\n<h3 id=\"需要注意的一些点\"><a href=\"#需要注意的一些点\" class=\"headerlink\" title=\"需要注意的一些点\"></a>需要注意的一些点</h3><blockquote>\n<p>需要注意的点:</p>\n</blockquote>\n<ul>\n<li>首先，canvas的api要做到了解和熟悉，至少，路径绘制和混合模式，要清楚，这是拼图的核心实现。特别是圆弧的逆时针绘制，参数要掌握。</li>\n<li>滑动事件的原理，需要document委托，还有，进行标志位判断，只有在鼠标按下之后，move的事件才能触发，并且在up事件里，及时移出掉监听。</li>\n<li>在img的onload事件中，进行canvas绘制，否则画布不会有任何的响应。</li>\n<li>需要对滑块的偏移进行限制，计算出边界值，防止滑块超出预料的范围。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。只有自己亲自试试，才能更熟悉其中的一些原理和技巧。关于canvas的东西，光看文档，作用不太大，亲自试了，感受才能更深刻。</p>\n</blockquote>\n"},{"title":"微信小程序富文本样式处理","date":"2019-07-07T13:19:02.000Z","_content":"\n# 微信小程序中富文本样式的处理\n\n>对于微信小程序的开发者来说，对于如何处理富文本样式，应该来说，都不陌生，关于样式统一，对于项目的好处，不言而喻，第三方的文本输入，往往带着大量的类名和行内的样式，类似下面的这种情况：\n```js\ncontent = '<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-strong\">最生态：竹筒饭、竹子羊肉串</span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<div class=\"img-container\">↵\t<img class=\"large\" src=\"https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1161740077,3678303227&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=421&amp;s=DC16DEB256035EEE7899B8F103008013\" /> ↵</div>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\">一路向北，到重渡沟景区内的“竹乡水街”美食一条街，这里以名优小吃为主，是豫西景区最大的特色美食城。</span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<div class=\"img-container\">↵\t<img class=\"large\" src=\"https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2402921976,1529435117&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=897&amp;s=9EB6BEAE6AF3B5EB46BDC07B03005059\" /> ↵</div>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\">竹香水街本着“游客至上、服务第一、名吃荟萃、制作精良、环境优美、口味纯正”的经营理念，迎接八方游客。可以让您尝遍各种美味小吃，特别是竹筒饭、竹子羊肉串、小龙虾等。</span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><a class=\"ke-insertfile\" href=\"/vr-manage/resources/kindeditor_img/file/20181224/20181224191343_140.ppt\" target=\"_blank\">栾川三鲜土豆粉</a><br />↵</span> ↵</p>'\n```\n>我们可以看到，上面的字段是后端给我们的，但是其中夹杂着大量的干扰数据，比如class、style等样式数据。我们先把它渲染到页面中看下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190706/1.png?raw=true)\n\n```\n<view class=\"detail-info\">\n    <rich-text :nodes=\"replaceContent\" style=\"font-size:26upx; line-height:39upx;font-family: '微软雅黑'\"></rich-text>\n </view>\n```\n```css\n.detail-info {\n    img {\n      width: 100%;\n    }\n  }\n```\n>我们可以看出，其实我们不管从给包裹元素设置样式，和重写其内部元素样式，都没有任何的效果，说明富文本中样式的渲染，是独立于整个页面渲染的，我们依靠外部的代码，样式处理，拿它没有一点办法，那我们该怎么办呢，其实常规做法就是，我们不是可以获取到上面的content字符串么，我们有字符串了，那么就可以对它的内容和结构进行处理。\n\n>比方说，如果其中的class,style等样式数据，影响了我们的页面布局和展示，我们就可以把它过滤掉，如果img标签，没有样式控制，我们可以给它增加样式控制，让其达到我们所期待的样式。\n\n>具体可以根据正则去匹配：\n```js\n//全局过滤style标签以及其内容\ncontent = content.replace(/style\\s*?=\\s*?([‘\"])[\\s\\S]*?\\1/gi, '')\n\n//全局过滤class标签以及其内容\ncontent = content.replace(/class\\s*?=\\s*?([‘\"])[\\s\\S]*?\\1/gi, '')\n\n//重写img标签样式\n//添加了我们自己设置的类名\ncontent = content.replace(/\\<img/gi, '<img class=\"rich-img\"')\n```\n```css\n/*写入想要的样式*/\n.rich-img {\n  width: 100%;\n  height: auto;\n  margin: 10upx 0;\n  border-radius: 10upx;\n}\n```\n\n>我们通过上面几层的过滤，基本完成了富文本数据的清洗，下面可以看下效果：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190706/2.png?raw=true)\n\n>另外，项目中，如果有多处地方需要用到这种富文本过滤处理，可以封装成一个公用的方法，放在utils文件夹下，可供调用。\n\n","source":"_posts/微信小程序富文本样式处理.md","raw":"---\ntitle: 微信小程序富文本样式处理\ndate: 2019-07-07 21:19:02\ntags:\n  - uni-app\n  - 微信小程序\ncategories:\n  - uni-app\n  - 微信小程序\n---\n\n# 微信小程序中富文本样式的处理\n\n>对于微信小程序的开发者来说，对于如何处理富文本样式，应该来说，都不陌生，关于样式统一，对于项目的好处，不言而喻，第三方的文本输入，往往带着大量的类名和行内的样式，类似下面的这种情况：\n```js\ncontent = '<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-strong\">最生态：竹筒饭、竹子羊肉串</span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<div class=\"img-container\">↵\t<img class=\"large\" src=\"https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1161740077,3678303227&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=421&amp;s=DC16DEB256035EEE7899B8F103008013\" /> ↵</div>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\">一路向北，到重渡沟景区内的“竹乡水街”美食一条街，这里以名优小吃为主，是豫西景区最大的特色美食城。</span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<div class=\"img-container\">↵\t<img class=\"large\" src=\"https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2402921976,1529435117&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=897&amp;s=9EB6BEAE6AF3B5EB46BDC07B03005059\" /> ↵</div>↵<p>↵\t<span class=\"bjh-p\"><span class=\"bjh-br\"></span></span> ↵</p>↵<p>↵\t<span class=\"bjh-p\">竹香水街本着“游客至上、服务第一、名吃荟萃、制作精良、环境优美、口味纯正”的经营理念，迎接八方游客。可以让您尝遍各种美味小吃，特别是竹筒饭、竹子羊肉串、小龙虾等。</span> ↵</p>↵<p>↵\t<span class=\"bjh-p\"><a class=\"ke-insertfile\" href=\"/vr-manage/resources/kindeditor_img/file/20181224/20181224191343_140.ppt\" target=\"_blank\">栾川三鲜土豆粉</a><br />↵</span> ↵</p>'\n```\n>我们可以看到，上面的字段是后端给我们的，但是其中夹杂着大量的干扰数据，比如class、style等样式数据。我们先把它渲染到页面中看下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190706/1.png?raw=true)\n\n```\n<view class=\"detail-info\">\n    <rich-text :nodes=\"replaceContent\" style=\"font-size:26upx; line-height:39upx;font-family: '微软雅黑'\"></rich-text>\n </view>\n```\n```css\n.detail-info {\n    img {\n      width: 100%;\n    }\n  }\n```\n>我们可以看出，其实我们不管从给包裹元素设置样式，和重写其内部元素样式，都没有任何的效果，说明富文本中样式的渲染，是独立于整个页面渲染的，我们依靠外部的代码，样式处理，拿它没有一点办法，那我们该怎么办呢，其实常规做法就是，我们不是可以获取到上面的content字符串么，我们有字符串了，那么就可以对它的内容和结构进行处理。\n\n>比方说，如果其中的class,style等样式数据，影响了我们的页面布局和展示，我们就可以把它过滤掉，如果img标签，没有样式控制，我们可以给它增加样式控制，让其达到我们所期待的样式。\n\n>具体可以根据正则去匹配：\n```js\n//全局过滤style标签以及其内容\ncontent = content.replace(/style\\s*?=\\s*?([‘\"])[\\s\\S]*?\\1/gi, '')\n\n//全局过滤class标签以及其内容\ncontent = content.replace(/class\\s*?=\\s*?([‘\"])[\\s\\S]*?\\1/gi, '')\n\n//重写img标签样式\n//添加了我们自己设置的类名\ncontent = content.replace(/\\<img/gi, '<img class=\"rich-img\"')\n```\n```css\n/*写入想要的样式*/\n.rich-img {\n  width: 100%;\n  height: auto;\n  margin: 10upx 0;\n  border-radius: 10upx;\n}\n```\n\n>我们通过上面几层的过滤，基本完成了富文本数据的清洗，下面可以看下效果：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20190706/2.png?raw=true)\n\n>另外，项目中，如果有多处地方需要用到这种富文本过滤处理，可以封装成一个公用的方法，放在utils文件夹下，可供调用。\n\n","slug":"微信小程序富文本样式处理","published":1,"updated":"2019-07-07T13:20:30.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmm002rmsvi54jrfjal","content":"<h1 id=\"微信小程序中富文本样式的处理\"><a href=\"#微信小程序中富文本样式的处理\" class=\"headerlink\" title=\"微信小程序中富文本样式的处理\"></a>微信小程序中富文本样式的处理</h1><blockquote>\n<p>对于微信小程序的开发者来说，对于如何处理富文本样式，应该来说，都不陌生，关于样式统一，对于项目的好处，不言而喻，第三方的文本输入，往往带着大量的类名和行内的样式，类似下面的这种情况：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content = <span class=\"string\">&#x27;&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-strong&quot;&gt;最生态：竹筒饭、竹子羊肉串&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;div class=&quot;img-container&quot;&gt;↵\t&lt;img class=&quot;large&quot; src=&quot;https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1161740077,3678303227&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=640&amp;amp;h=421&amp;amp;s=DC16DEB256035EEE7899B8F103008013&quot; /&gt; ↵&lt;/div&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;一路向北，到重渡沟景区内的“竹乡水街”美食一条街，这里以名优小吃为主，是豫西景区最大的特色美食城。&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;div class=&quot;img-container&quot;&gt;↵\t&lt;img class=&quot;large&quot; src=&quot;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2402921976,1529435117&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=640&amp;amp;h=897&amp;amp;s=9EB6BEAE6AF3B5EB46BDC07B03005059&quot; /&gt; ↵&lt;/div&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;竹香水街本着“游客至上、服务第一、名吃荟萃、制作精良、环境优美、口味纯正”的经营理念，迎接八方游客。可以让您尝遍各种美味小吃，特别是竹筒饭、竹子羊肉串、小龙虾等。&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;a class=&quot;ke-insertfile&quot; href=&quot;/vr-manage/resources/kindeditor_img/file/20181224/20181224191343_140.ppt&quot; target=&quot;_blank&quot;&gt;栾川三鲜土豆粉&lt;/a&gt;&lt;br /&gt;↵&lt;/span&gt; ↵&lt;/p&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看到，上面的字段是后端给我们的，但是其中夹杂着大量的干扰数据，比如class、style等样式数据。我们先把它渲染到页面中看下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190706/1.png?raw=true\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class&#x3D;&quot;detail-info&quot;&gt;</span><br><span class=\"line\">    &lt;rich-text :nodes&#x3D;&quot;replaceContent&quot; style&#x3D;&quot;font-size:26upx; line-height:39upx;font-family: &#39;微软雅黑&#39;&quot;&gt;&lt;&#x2F;rich-text&gt;</span><br><span class=\"line\"> &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.detail-info</span> &#123;</span><br><span class=\"line\">    img &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看出，其实我们不管从给包裹元素设置样式，和重写其内部元素样式，都没有任何的效果，说明富文本中样式的渲染，是独立于整个页面渲染的，我们依靠外部的代码，样式处理，拿它没有一点办法，那我们该怎么办呢，其实常规做法就是，我们不是可以获取到上面的content字符串么，我们有字符串了，那么就可以对它的内容和结构进行处理。</p>\n</blockquote>\n<blockquote>\n<p>比方说，如果其中的class,style等样式数据，影响了我们的页面布局和展示，我们就可以把它过滤掉，如果img标签，没有样式控制，我们可以给它增加样式控制，让其达到我们所期待的样式。</p>\n</blockquote>\n<blockquote>\n<p>具体可以根据正则去匹配：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局过滤style标签以及其内容</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/style\\s*?=\\s*?([‘&quot;])[\\s\\S]*?\\1/gi</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局过滤class标签以及其内容</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/class\\s*?=\\s*?([‘&quot;])[\\s\\S]*?\\1/gi</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重写img标签样式</span></span><br><span class=\"line\"><span class=\"comment\">//添加了我们自己设置的类名</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/\\&lt;img/gi</span>, <span class=\"string\">&#x27;&lt;img class=&quot;rich-img&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*写入想要的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.rich-img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>upx <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10</span>upx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过上面几层的过滤，基本完成了富文本数据的清洗，下面可以看下效果：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190706/2.png?raw=true\"></p>\n<blockquote>\n<p>另外，项目中，如果有多处地方需要用到这种富文本过滤处理，可以封装成一个公用的方法，放在utils文件夹下，可供调用。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"微信小程序中富文本样式的处理\"><a href=\"#微信小程序中富文本样式的处理\" class=\"headerlink\" title=\"微信小程序中富文本样式的处理\"></a>微信小程序中富文本样式的处理</h1><blockquote>\n<p>对于微信小程序的开发者来说，对于如何处理富文本样式，应该来说，都不陌生，关于样式统一，对于项目的好处，不言而喻，第三方的文本输入，往往带着大量的类名和行内的样式，类似下面的这种情况：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content = <span class=\"string\">&#x27;&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-strong&quot;&gt;最生态：竹筒饭、竹子羊肉串&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;div class=&quot;img-container&quot;&gt;↵\t&lt;img class=&quot;large&quot; src=&quot;https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1161740077,3678303227&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=640&amp;amp;h=421&amp;amp;s=DC16DEB256035EEE7899B8F103008013&quot; /&gt; ↵&lt;/div&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;一路向北，到重渡沟景区内的“竹乡水街”美食一条街，这里以名优小吃为主，是豫西景区最大的特色美食城。&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;div class=&quot;img-container&quot;&gt;↵\t&lt;img class=&quot;large&quot; src=&quot;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2402921976,1529435117&amp;amp;fm=173&amp;amp;app=25&amp;amp;f=JPEG?w=640&amp;amp;h=897&amp;amp;s=9EB6BEAE6AF3B5EB46BDC07B03005059&quot; /&gt; ↵&lt;/div&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-br&quot;&gt;&lt;/span&gt;&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;竹香水街本着“游客至上、服务第一、名吃荟萃、制作精良、环境优美、口味纯正”的经营理念，迎接八方游客。可以让您尝遍各种美味小吃，特别是竹筒饭、竹子羊肉串、小龙虾等。&lt;/span&gt; ↵&lt;/p&gt;↵&lt;p&gt;↵\t&lt;span class=&quot;bjh-p&quot;&gt;&lt;a class=&quot;ke-insertfile&quot; href=&quot;/vr-manage/resources/kindeditor_img/file/20181224/20181224191343_140.ppt&quot; target=&quot;_blank&quot;&gt;栾川三鲜土豆粉&lt;/a&gt;&lt;br /&gt;↵&lt;/span&gt; ↵&lt;/p&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看到，上面的字段是后端给我们的，但是其中夹杂着大量的干扰数据，比如class、style等样式数据。我们先把它渲染到页面中看下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190706/1.png?raw=true\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class&#x3D;&quot;detail-info&quot;&gt;</span><br><span class=\"line\">    &lt;rich-text :nodes&#x3D;&quot;replaceContent&quot; style&#x3D;&quot;font-size:26upx; line-height:39upx;font-family: &#39;微软雅黑&#39;&quot;&gt;&lt;&#x2F;rich-text&gt;</span><br><span class=\"line\"> &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.detail-info</span> &#123;</span><br><span class=\"line\">    img &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看出，其实我们不管从给包裹元素设置样式，和重写其内部元素样式，都没有任何的效果，说明富文本中样式的渲染，是独立于整个页面渲染的，我们依靠外部的代码，样式处理，拿它没有一点办法，那我们该怎么办呢，其实常规做法就是，我们不是可以获取到上面的content字符串么，我们有字符串了，那么就可以对它的内容和结构进行处理。</p>\n</blockquote>\n<blockquote>\n<p>比方说，如果其中的class,style等样式数据，影响了我们的页面布局和展示，我们就可以把它过滤掉，如果img标签，没有样式控制，我们可以给它增加样式控制，让其达到我们所期待的样式。</p>\n</blockquote>\n<blockquote>\n<p>具体可以根据正则去匹配：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局过滤style标签以及其内容</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/style\\s*?=\\s*?([‘&quot;])[\\s\\S]*?\\1/gi</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局过滤class标签以及其内容</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/class\\s*?=\\s*?([‘&quot;])[\\s\\S]*?\\1/gi</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重写img标签样式</span></span><br><span class=\"line\"><span class=\"comment\">//添加了我们自己设置的类名</span></span><br><span class=\"line\">content = content.replace(<span class=\"regexp\">/\\&lt;img/gi</span>, <span class=\"string\">&#x27;&lt;img class=&quot;rich-img&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*写入想要的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.rich-img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>upx <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10</span>upx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过上面几层的过滤，基本完成了富文本数据的清洗，下面可以看下效果：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20190706/2.png?raw=true\"></p>\n<blockquote>\n<p>另外，项目中，如果有多处地方需要用到这种富文本过滤处理，可以封装成一个公用的方法，放在utils文件夹下，可供调用。</p>\n</blockquote>\n"},{"title":"浅析DOM事件","date":"2018-06-22T12:28:41.000Z","_content":"\n\n\n## 一、理解事件  \n\n* 事件行为本身：没有给事件绑定方法事件也是一直存在的，当触发行为的时候，也对触发对应的行为，只不过由于没有绑定事件，导致没有任何事件发生；\n\n* 事件绑定：给元素绑定一个方法；触发行为，执行方法；  \n\n## 二、DOM事件  \n\n* DOM0级事件  \n\n  * (onclick)属于元素的私有属性  \n\n  * 使用DOM0级方法指定的事件处理程序被认为是元素的方法，这也解释了为什么事件处理程序的this指向当前的元素  \n\n  * 事件处理程序只会在事件冒泡阶段处理  \n\n  * 优势：简单、跨浏览器  \n\n  * 删除事件：设置为null，即 btn.onclick=null  \n\n  * 一个元素只能绑定一个同类型的行为，否则后面的会覆盖前面的行为  \n\n\n* DOM1：没有升级事件相关的方法  \n\n* DOM2级事件  \n\n  * 属于公有方法，在eventTarget这个类原型上，所有的COM节点都包含这两种方法：addEventListener和removeEventListener  \n\n  * 三个参数：(事件名，回调函数，布尔值)；布尔值为true，表示捕获阶段调用回调函数，布尔值为false,表示冒泡阶段调用回调函数，默认值为false  \n\n  * addEventListener和removeEventListener传入的回调函数必须相同，不能使用匿名函数  \n\n  * 一般将事件添加到冒泡阶段，这样可以最大限度的兼容浏览器  \n\n  * 同一个元素可以绑定多个统一的行为，触发顺序以绑定顺序先后为准  \n\n\n## 事件对象\n\n* 执行某一行为时，不仅执行了绑定方法，而且浏览器还会默认的给这个方法传递一个参数，这个参数就是event，事件对象  \n\n* 事件对象的特点：  \n\n  * 对象数据类型，包含很多的属性名和属性值，用来记录行为的相关信息  \n\n  * MouseEvent---UIEvent---Event---Object 原型  \n\n  * MouseEvent记录的是页面中唯一一个鼠标每次触发的相关信息，和到底在哪个元素上触发没有关系。  \n\n\n## 事件对象的兼容性\n\n* 事件对象本身的兼容性问题：  \n```js\ne = e || window.event* \n```\n\n* e.type:当前行为类型，兼容  \n\n* e.clientX/Y:距离可视窗口左上角x,y值，兼容；  \n\n* e.pageX/Y:距离body(第一屏)左上角x,y值，IE678不兼容；  \n\n```js\ne.pageX=(document.documentElement.scrollLeft||document.body.scrollLeft)+ e.clientX;\n```\n\n* e.target:事件源，当前行为触发元素，存储的就是那个元素IE678不兼容 e.target=e.target||e.srcElement;  \n\n* e.preventDafault:阻止浏览器的默认行为，IE678不兼容；  \n\n```js\ne.preventDafault?e.preventDafault:e.returnvalue=false;\n```\n\n* e.stopPropagation:阻止事件冒泡传播，IE678不兼容； \n\n```js\ne.stopPropagation? e.stopPropagation:e.cancelBubble=true;\n```\n\n## 5.事件的传播机制\n\n* 捕获：从外向内依次查找元素，event capturing；\n\n* 目标：当前述事件源本省的操作；\n\n* 冒泡：从内到外依次触发的相关行为，event bubbing;\n\n","source":"_posts/浅析DOM事件.md","raw":"---\ntitle: 浅析DOM事件\ndate: 2018-06-22 20:28:41\ntags:\n  - js\n  - DOM\ncategories:\n  - js\n---\n\n\n\n## 一、理解事件  \n\n* 事件行为本身：没有给事件绑定方法事件也是一直存在的，当触发行为的时候，也对触发对应的行为，只不过由于没有绑定事件，导致没有任何事件发生；\n\n* 事件绑定：给元素绑定一个方法；触发行为，执行方法；  \n\n## 二、DOM事件  \n\n* DOM0级事件  \n\n  * (onclick)属于元素的私有属性  \n\n  * 使用DOM0级方法指定的事件处理程序被认为是元素的方法，这也解释了为什么事件处理程序的this指向当前的元素  \n\n  * 事件处理程序只会在事件冒泡阶段处理  \n\n  * 优势：简单、跨浏览器  \n\n  * 删除事件：设置为null，即 btn.onclick=null  \n\n  * 一个元素只能绑定一个同类型的行为，否则后面的会覆盖前面的行为  \n\n\n* DOM1：没有升级事件相关的方法  \n\n* DOM2级事件  \n\n  * 属于公有方法，在eventTarget这个类原型上，所有的COM节点都包含这两种方法：addEventListener和removeEventListener  \n\n  * 三个参数：(事件名，回调函数，布尔值)；布尔值为true，表示捕获阶段调用回调函数，布尔值为false,表示冒泡阶段调用回调函数，默认值为false  \n\n  * addEventListener和removeEventListener传入的回调函数必须相同，不能使用匿名函数  \n\n  * 一般将事件添加到冒泡阶段，这样可以最大限度的兼容浏览器  \n\n  * 同一个元素可以绑定多个统一的行为，触发顺序以绑定顺序先后为准  \n\n\n## 事件对象\n\n* 执行某一行为时，不仅执行了绑定方法，而且浏览器还会默认的给这个方法传递一个参数，这个参数就是event，事件对象  \n\n* 事件对象的特点：  \n\n  * 对象数据类型，包含很多的属性名和属性值，用来记录行为的相关信息  \n\n  * MouseEvent---UIEvent---Event---Object 原型  \n\n  * MouseEvent记录的是页面中唯一一个鼠标每次触发的相关信息，和到底在哪个元素上触发没有关系。  \n\n\n## 事件对象的兼容性\n\n* 事件对象本身的兼容性问题：  \n```js\ne = e || window.event* \n```\n\n* e.type:当前行为类型，兼容  \n\n* e.clientX/Y:距离可视窗口左上角x,y值，兼容；  \n\n* e.pageX/Y:距离body(第一屏)左上角x,y值，IE678不兼容；  \n\n```js\ne.pageX=(document.documentElement.scrollLeft||document.body.scrollLeft)+ e.clientX;\n```\n\n* e.target:事件源，当前行为触发元素，存储的就是那个元素IE678不兼容 e.target=e.target||e.srcElement;  \n\n* e.preventDafault:阻止浏览器的默认行为，IE678不兼容；  \n\n```js\ne.preventDafault?e.preventDafault:e.returnvalue=false;\n```\n\n* e.stopPropagation:阻止事件冒泡传播，IE678不兼容； \n\n```js\ne.stopPropagation? e.stopPropagation:e.cancelBubble=true;\n```\n\n## 5.事件的传播机制\n\n* 捕获：从外向内依次查找元素，event capturing；\n\n* 目标：当前述事件源本省的操作；\n\n* 冒泡：从内到外依次触发的相关行为，event bubbing;\n\n","slug":"浅析DOM事件","published":1,"updated":"2018-06-22T12:30:08.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmn002vmsvi0kuedod3","content":"<h2 id=\"一、理解事件\"><a href=\"#一、理解事件\" class=\"headerlink\" title=\"一、理解事件\"></a>一、理解事件</h2><ul>\n<li><p>事件行为本身：没有给事件绑定方法事件也是一直存在的，当触发行为的时候，也对触发对应的行为，只不过由于没有绑定事件，导致没有任何事件发生；</p>\n</li>\n<li><p>事件绑定：给元素绑定一个方法；触发行为，执行方法；  </p>\n</li>\n</ul>\n<h2 id=\"二、DOM事件\"><a href=\"#二、DOM事件\" class=\"headerlink\" title=\"二、DOM事件\"></a>二、DOM事件</h2><ul>\n<li><p>DOM0级事件  </p>\n<ul>\n<li><p>(onclick)属于元素的私有属性  </p>\n</li>\n<li><p>使用DOM0级方法指定的事件处理程序被认为是元素的方法，这也解释了为什么事件处理程序的this指向当前的元素  </p>\n</li>\n<li><p>事件处理程序只会在事件冒泡阶段处理  </p>\n</li>\n<li><p>优势：简单、跨浏览器  </p>\n</li>\n<li><p>删除事件：设置为null，即 btn.onclick=null  </p>\n</li>\n<li><p>一个元素只能绑定一个同类型的行为，否则后面的会覆盖前面的行为  </p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>DOM1：没有升级事件相关的方法  </p>\n</li>\n<li><p>DOM2级事件  </p>\n<ul>\n<li><p>属于公有方法，在eventTarget这个类原型上，所有的COM节点都包含这两种方法：addEventListener和removeEventListener  </p>\n</li>\n<li><p>三个参数：(事件名，回调函数，布尔值)；布尔值为true，表示捕获阶段调用回调函数，布尔值为false,表示冒泡阶段调用回调函数，默认值为false  </p>\n</li>\n<li><p>addEventListener和removeEventListener传入的回调函数必须相同，不能使用匿名函数  </p>\n</li>\n<li><p>一般将事件添加到冒泡阶段，这样可以最大限度的兼容浏览器  </p>\n</li>\n<li><p>同一个元素可以绑定多个统一的行为，触发顺序以绑定顺序先后为准  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><ul>\n<li><p>执行某一行为时，不仅执行了绑定方法，而且浏览器还会默认的给这个方法传递一个参数，这个参数就是event，事件对象  </p>\n</li>\n<li><p>事件对象的特点：  </p>\n<ul>\n<li><p>对象数据类型，包含很多的属性名和属性值，用来记录行为的相关信息  </p>\n</li>\n<li><p>MouseEvent—UIEvent—Event—Object 原型  </p>\n</li>\n<li><p>MouseEvent记录的是页面中唯一一个鼠标每次触发的相关信息，和到底在哪个元素上触发没有关系。  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件对象的兼容性\"><a href=\"#事件对象的兼容性\" class=\"headerlink\" title=\"事件对象的兼容性\"></a>事件对象的兼容性</h2><ul>\n<li><p>事件对象本身的兼容性问题：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e = e || <span class=\"built_in\">window</span>.event* </span><br></pre></td></tr></table></figure></li>\n<li><p>e.type:当前行为类型，兼容  </p>\n</li>\n<li><p>e.clientX/Y:距离可视窗口左上角x,y值，兼容；  </p>\n</li>\n<li><p>e.pageX/Y:距离body(第一屏)左上角x,y值，IE678不兼容；  </p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.pageX=(<span class=\"built_in\">document</span>.documentElement.scrollLeft||<span class=\"built_in\">document</span>.body.scrollLeft)+ e.clientX;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>e.target:事件源，当前行为触发元素，存储的就是那个元素IE678不兼容 e.target=e.target||e.srcElement;  </p>\n</li>\n<li><p>e.preventDafault:阻止浏览器的默认行为，IE678不兼容；  </p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.preventDafault?e.preventDafault:e.returnvalue=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>e.stopPropagation:阻止事件冒泡传播，IE678不兼容； </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.stopPropagation? e.stopPropagation:e.cancelBubble=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-事件的传播机制\"><a href=\"#5-事件的传播机制\" class=\"headerlink\" title=\"5.事件的传播机制\"></a>5.事件的传播机制</h2><ul>\n<li><p>捕获：从外向内依次查找元素，event capturing；</p>\n</li>\n<li><p>目标：当前述事件源本省的操作；</p>\n</li>\n<li><p>冒泡：从内到外依次触发的相关行为，event bubbing;</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、理解事件\"><a href=\"#一、理解事件\" class=\"headerlink\" title=\"一、理解事件\"></a>一、理解事件</h2><ul>\n<li><p>事件行为本身：没有给事件绑定方法事件也是一直存在的，当触发行为的时候，也对触发对应的行为，只不过由于没有绑定事件，导致没有任何事件发生；</p>\n</li>\n<li><p>事件绑定：给元素绑定一个方法；触发行为，执行方法；  </p>\n</li>\n</ul>\n<h2 id=\"二、DOM事件\"><a href=\"#二、DOM事件\" class=\"headerlink\" title=\"二、DOM事件\"></a>二、DOM事件</h2><ul>\n<li><p>DOM0级事件  </p>\n<ul>\n<li><p>(onclick)属于元素的私有属性  </p>\n</li>\n<li><p>使用DOM0级方法指定的事件处理程序被认为是元素的方法，这也解释了为什么事件处理程序的this指向当前的元素  </p>\n</li>\n<li><p>事件处理程序只会在事件冒泡阶段处理  </p>\n</li>\n<li><p>优势：简单、跨浏览器  </p>\n</li>\n<li><p>删除事件：设置为null，即 btn.onclick=null  </p>\n</li>\n<li><p>一个元素只能绑定一个同类型的行为，否则后面的会覆盖前面的行为  </p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>DOM1：没有升级事件相关的方法  </p>\n</li>\n<li><p>DOM2级事件  </p>\n<ul>\n<li><p>属于公有方法，在eventTarget这个类原型上，所有的COM节点都包含这两种方法：addEventListener和removeEventListener  </p>\n</li>\n<li><p>三个参数：(事件名，回调函数，布尔值)；布尔值为true，表示捕获阶段调用回调函数，布尔值为false,表示冒泡阶段调用回调函数，默认值为false  </p>\n</li>\n<li><p>addEventListener和removeEventListener传入的回调函数必须相同，不能使用匿名函数  </p>\n</li>\n<li><p>一般将事件添加到冒泡阶段，这样可以最大限度的兼容浏览器  </p>\n</li>\n<li><p>同一个元素可以绑定多个统一的行为，触发顺序以绑定顺序先后为准  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><ul>\n<li><p>执行某一行为时，不仅执行了绑定方法，而且浏览器还会默认的给这个方法传递一个参数，这个参数就是event，事件对象  </p>\n</li>\n<li><p>事件对象的特点：  </p>\n<ul>\n<li><p>对象数据类型，包含很多的属性名和属性值，用来记录行为的相关信息  </p>\n</li>\n<li><p>MouseEvent—UIEvent—Event—Object 原型  </p>\n</li>\n<li><p>MouseEvent记录的是页面中唯一一个鼠标每次触发的相关信息，和到底在哪个元素上触发没有关系。  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件对象的兼容性\"><a href=\"#事件对象的兼容性\" class=\"headerlink\" title=\"事件对象的兼容性\"></a>事件对象的兼容性</h2><ul>\n<li><p>事件对象本身的兼容性问题：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e = e || <span class=\"built_in\">window</span>.event* </span><br></pre></td></tr></table></figure></li>\n<li><p>e.type:当前行为类型，兼容  </p>\n</li>\n<li><p>e.clientX/Y:距离可视窗口左上角x,y值，兼容；  </p>\n</li>\n<li><p>e.pageX/Y:距离body(第一屏)左上角x,y值，IE678不兼容；  </p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.pageX=(<span class=\"built_in\">document</span>.documentElement.scrollLeft||<span class=\"built_in\">document</span>.body.scrollLeft)+ e.clientX;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>e.target:事件源，当前行为触发元素，存储的就是那个元素IE678不兼容 e.target=e.target||e.srcElement;  </p>\n</li>\n<li><p>e.preventDafault:阻止浏览器的默认行为，IE678不兼容；  </p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.preventDafault?e.preventDafault:e.returnvalue=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>e.stopPropagation:阻止事件冒泡传播，IE678不兼容； </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.stopPropagation? e.stopPropagation:e.cancelBubble=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-事件的传播机制\"><a href=\"#5-事件的传播机制\" class=\"headerlink\" title=\"5.事件的传播机制\"></a>5.事件的传播机制</h2><ul>\n<li><p>捕获：从外向内依次查找元素，event capturing；</p>\n</li>\n<li><p>目标：当前述事件源本省的操作；</p>\n</li>\n<li><p>冒泡：从内到外依次触发的相关行为，event bubbing;</p>\n</li>\n</ul>\n"},{"title":"最近项目遇到的问题解决记录","date":"2019-06-10T14:20:11.000Z","_content":"\n\n\n## 1、element ui 中 el-input type number类型输入汉字之后行高变形的问题\n\n解决方法：给input框加上line-height:1的属性，就能解决。\n\n## 2、IE 下 axios 自定义 request header  token 值为''则设置失效的问题\n解决方法：项目中需要自定义request Header 的，而且需要通过判断该值得存在与否，来进行对应的逻辑执行，则可以换一种思路，如果设''会导致设置值不生效，则可以设置token为0，这样我们在判断if(token)的时候，与token为''的结果是一样的，都是false，IE中页正好也能够生效token = 0这个键值。这个问题chrome不会出现，只在IE下出现\n\n## 3、高德地图url方式调起导航 IE下 中文传参  会乱码 \n\n解决方法：老生常谈的问题，还是因为IE对于中文URL参数编码的问题，可以通过两次encodeURI来对中文参数或者链接，进行编码格式的转换。\n\n## 4、iOS10 隐私模式  localstorage不可用 \n解决方法：使用cookie 代替 localstorage \n\n--未完待续--\n","source":"_posts/最近项目遇到的问题解决记录.md","raw":"---\ntitle: 最近项目遇到的问题解决记录\ndate: 2019-06-10 22:20:11\ntags:\n  - 问题解决\ncategories:\n  - 问题解决 \n---\n\n\n\n## 1、element ui 中 el-input type number类型输入汉字之后行高变形的问题\n\n解决方法：给input框加上line-height:1的属性，就能解决。\n\n## 2、IE 下 axios 自定义 request header  token 值为''则设置失效的问题\n解决方法：项目中需要自定义request Header 的，而且需要通过判断该值得存在与否，来进行对应的逻辑执行，则可以换一种思路，如果设''会导致设置值不生效，则可以设置token为0，这样我们在判断if(token)的时候，与token为''的结果是一样的，都是false，IE中页正好也能够生效token = 0这个键值。这个问题chrome不会出现，只在IE下出现\n\n## 3、高德地图url方式调起导航 IE下 中文传参  会乱码 \n\n解决方法：老生常谈的问题，还是因为IE对于中文URL参数编码的问题，可以通过两次encodeURI来对中文参数或者链接，进行编码格式的转换。\n\n## 4、iOS10 隐私模式  localstorage不可用 \n解决方法：使用cookie 代替 localstorage \n\n--未完待续--\n","slug":"最近项目遇到的问题解决记录","published":1,"updated":"2019-06-10T14:22:13.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmo002xmsvi45sxf4i4","content":"<h2 id=\"1、element-ui-中-el-input-type-number类型输入汉字之后行高变形的问题\"><a href=\"#1、element-ui-中-el-input-type-number类型输入汉字之后行高变形的问题\" class=\"headerlink\" title=\"1、element ui 中 el-input type number类型输入汉字之后行高变形的问题\"></a>1、element ui 中 el-input type number类型输入汉字之后行高变形的问题</h2><p>解决方法：给input框加上line-height:1的属性，就能解决。</p>\n<h2 id=\"2、IE-下-axios-自定义-request-header-token-值为’’则设置失效的问题\"><a href=\"#2、IE-下-axios-自定义-request-header-token-值为’’则设置失效的问题\" class=\"headerlink\" title=\"2、IE 下 axios 自定义 request header  token 值为’’则设置失效的问题\"></a>2、IE 下 axios 自定义 request header  token 值为’’则设置失效的问题</h2><p>解决方法：项目中需要自定义request Header 的，而且需要通过判断该值得存在与否，来进行对应的逻辑执行，则可以换一种思路，如果设’’会导致设置值不生效，则可以设置token为0，这样我们在判断if(token)的时候，与token为’’的结果是一样的，都是false，IE中页正好也能够生效token = 0这个键值。这个问题chrome不会出现，只在IE下出现</p>\n<h2 id=\"3、高德地图url方式调起导航-IE下-中文传参-会乱码\"><a href=\"#3、高德地图url方式调起导航-IE下-中文传参-会乱码\" class=\"headerlink\" title=\"3、高德地图url方式调起导航 IE下 中文传参  会乱码\"></a>3、高德地图url方式调起导航 IE下 中文传参  会乱码</h2><p>解决方法：老生常谈的问题，还是因为IE对于中文URL参数编码的问题，可以通过两次encodeURI来对中文参数或者链接，进行编码格式的转换。</p>\n<h2 id=\"4、iOS10-隐私模式-localstorage不可用\"><a href=\"#4、iOS10-隐私模式-localstorage不可用\" class=\"headerlink\" title=\"4、iOS10 隐私模式  localstorage不可用\"></a>4、iOS10 隐私模式  localstorage不可用</h2><p>解决方法：使用cookie 代替 localstorage </p>\n<p>–未完待续–</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、element-ui-中-el-input-type-number类型输入汉字之后行高变形的问题\"><a href=\"#1、element-ui-中-el-input-type-number类型输入汉字之后行高变形的问题\" class=\"headerlink\" title=\"1、element ui 中 el-input type number类型输入汉字之后行高变形的问题\"></a>1、element ui 中 el-input type number类型输入汉字之后行高变形的问题</h2><p>解决方法：给input框加上line-height:1的属性，就能解决。</p>\n<h2 id=\"2、IE-下-axios-自定义-request-header-token-值为’’则设置失效的问题\"><a href=\"#2、IE-下-axios-自定义-request-header-token-值为’’则设置失效的问题\" class=\"headerlink\" title=\"2、IE 下 axios 自定义 request header  token 值为’’则设置失效的问题\"></a>2、IE 下 axios 自定义 request header  token 值为’’则设置失效的问题</h2><p>解决方法：项目中需要自定义request Header 的，而且需要通过判断该值得存在与否，来进行对应的逻辑执行，则可以换一种思路，如果设’’会导致设置值不生效，则可以设置token为0，这样我们在判断if(token)的时候，与token为’’的结果是一样的，都是false，IE中页正好也能够生效token = 0这个键值。这个问题chrome不会出现，只在IE下出现</p>\n<h2 id=\"3、高德地图url方式调起导航-IE下-中文传参-会乱码\"><a href=\"#3、高德地图url方式调起导航-IE下-中文传参-会乱码\" class=\"headerlink\" title=\"3、高德地图url方式调起导航 IE下 中文传参  会乱码\"></a>3、高德地图url方式调起导航 IE下 中文传参  会乱码</h2><p>解决方法：老生常谈的问题，还是因为IE对于中文URL参数编码的问题，可以通过两次encodeURI来对中文参数或者链接，进行编码格式的转换。</p>\n<h2 id=\"4、iOS10-隐私模式-localstorage不可用\"><a href=\"#4、iOS10-隐私模式-localstorage不可用\" class=\"headerlink\" title=\"4、iOS10 隐私模式  localstorage不可用\"></a>4、iOS10 隐私模式  localstorage不可用</h2><p>解决方法：使用cookie 代替 localstorage </p>\n<p>–未完待续–</p>\n"},{"title":"浅析swiper初始化遇到的一个问题","date":"2018-07-02T12:36:05.000Z","_content":"\n最近的项目里，有个图片展示模块，采用了著名的swiper轮播框架来做，具体需求是这样的，在已百度地图为底图的页面上，会展示一些景区的热点，点这些热点，会弹出一个景区详情的弹窗，弹窗里有个查看大图的区域，点击即可进入图片展示模块。\n\n按照正常的开发流程，以正常的逻辑，首先获取这些景点列表，景点会带有特殊的id，在点击热点的时候，利用id去查询这些热点相对应的景点详情数据，在景点详情的数据里，带有图片展示模块的img路径数组，只要将img数组，传入图片展示模块swiper进行初始化，就可以了。\n\n但是，这么做，有一个问题，按照上面的流程来的话，那么点击大图区域，才会触发swiper的初始化，才会去请求图片们所对应的的路径，这样会对用户体验造成一定的影响，页面在加载图片的过程中，会出现一定时间的等待，以及停顿，其实在开发过程中，自测的图片路径，都是本地的，所以看不出来差异，但是一放到测试环境，那这种处理逻辑就GG了，毕竟算是一名小司机了，在这方面遇到的坑，还是有些的。\n\n当然有处理办法了，你们肯定要说，最常规的，就如同我前面博客里写到的那样，利用图片的预加载啊懒加载啊啥的，优化加载体验啊，但在这里，我偏偏不用这个办法，因为相比于常规的，直接一次点击就要初始化图片的情况，这里的情况，其实是这样的，当打开弹窗的时候，实际上，图片的路径数据已经过来了，这时候，图片展示模块还没有出现，所以，本人的处理思路是这样的：\n\n* **1、首先将原本在图片区域点击后初始化swiper的代码，迁移到弹窗打开后的逻辑中**\n* **2、那么图片区域点击只是给图片展示模块移除display:none的类，让其显示**  \n* **3、在图片展示区域关闭的事件中，销毁swiper对象，并且，隐藏图片展示模块的wrap层**\n\n按照上面的思路，就很清晰了，实际上，获取图片路径，加载图片，初始化swiper的工作，被提到了弹窗打开之后，这样就完美的摆脱了图片加载的问题，因为用户点开弹窗之后，并不会立即点开图片区域，让图片展示模块出现，因此，给了图片加载可乘之机，哈哈哈\n\n但实际上，按照这样的逻辑，去开发之后，在测试的时候，可以看出来，非常完美的解决了加载等待的问题，嗯，效果好像还不赖。。。但是，我点点看呢，结果悲剧了，swiper的按钮根本就失效了好伐？？！！一定是swiper初始化的过程出了问题。。。嗯。。。\n\n仔细思考了下，难道是和我swiper的wrap一开始的时候是display:none有关么？因此我试着将一开始这个属性给抹去，让他在弹窗打开后，就显示，看看有没有正常初始化，如果是正常的，则说明就是display:none的问题，经过测试，确实是这样的。当swiper初始化容器，位于一个display:none的元素里时，其初始化，是存在一些问题的，不管是什么问题，反正交互是不奏效的了已经。。。那么如何去在这样的场景里去解决这样一个问题呢？\n\n首先一点，要明确，图片展示的swiper不可能页面一加载，就初始化显示，这是不符合当初的需求的，那么仔细想想看，既然是swiper初始化的时候，找不到display:none的元素才导致的初始化失败，那么，有怎么样的方式，才能达到，既隐藏，又能顺利被swiper初始化呢？答案就是下面这个属性：\n\n```css\nele {\n  visibility:hidden;\n}\n```\n\n其实啊，这个属性，和display:none类似，类似在，表现形式是一样的，都是在界面上隐藏元素，让用户看不到。只不过前者仍然可以获取到元素，后者就是完全消失不见了。因此，swiper的初始化，才不会奏效啊，哈哈哈，透过现象看本质，原来问题的根源是如此的简单而渺小，渺小到容易被忽视。\n\n因此，以后啊，再遇到像我这样的需求情况的时候，初始化一个容器进行swiper加载的时候，让容器隐藏，千万不要使用display:block;而是用visibility:hidden，一样可以达到预期的效果。\n\n","source":"_posts/浅析swiper初始化遇到的一个问题.md","raw":"---\ntitle: 浅析swiper初始化遇到的一个问题\ndate: 2018-07-02 20:36:05\ntags:\n  - swiper\n  - js\ncategories:\n  - js\n---\n\n最近的项目里，有个图片展示模块，采用了著名的swiper轮播框架来做，具体需求是这样的，在已百度地图为底图的页面上，会展示一些景区的热点，点这些热点，会弹出一个景区详情的弹窗，弹窗里有个查看大图的区域，点击即可进入图片展示模块。\n\n按照正常的开发流程，以正常的逻辑，首先获取这些景点列表，景点会带有特殊的id，在点击热点的时候，利用id去查询这些热点相对应的景点详情数据，在景点详情的数据里，带有图片展示模块的img路径数组，只要将img数组，传入图片展示模块swiper进行初始化，就可以了。\n\n但是，这么做，有一个问题，按照上面的流程来的话，那么点击大图区域，才会触发swiper的初始化，才会去请求图片们所对应的的路径，这样会对用户体验造成一定的影响，页面在加载图片的过程中，会出现一定时间的等待，以及停顿，其实在开发过程中，自测的图片路径，都是本地的，所以看不出来差异，但是一放到测试环境，那这种处理逻辑就GG了，毕竟算是一名小司机了，在这方面遇到的坑，还是有些的。\n\n当然有处理办法了，你们肯定要说，最常规的，就如同我前面博客里写到的那样，利用图片的预加载啊懒加载啊啥的，优化加载体验啊，但在这里，我偏偏不用这个办法，因为相比于常规的，直接一次点击就要初始化图片的情况，这里的情况，其实是这样的，当打开弹窗的时候，实际上，图片的路径数据已经过来了，这时候，图片展示模块还没有出现，所以，本人的处理思路是这样的：\n\n* **1、首先将原本在图片区域点击后初始化swiper的代码，迁移到弹窗打开后的逻辑中**\n* **2、那么图片区域点击只是给图片展示模块移除display:none的类，让其显示**  \n* **3、在图片展示区域关闭的事件中，销毁swiper对象，并且，隐藏图片展示模块的wrap层**\n\n按照上面的思路，就很清晰了，实际上，获取图片路径，加载图片，初始化swiper的工作，被提到了弹窗打开之后，这样就完美的摆脱了图片加载的问题，因为用户点开弹窗之后，并不会立即点开图片区域，让图片展示模块出现，因此，给了图片加载可乘之机，哈哈哈\n\n但实际上，按照这样的逻辑，去开发之后，在测试的时候，可以看出来，非常完美的解决了加载等待的问题，嗯，效果好像还不赖。。。但是，我点点看呢，结果悲剧了，swiper的按钮根本就失效了好伐？？！！一定是swiper初始化的过程出了问题。。。嗯。。。\n\n仔细思考了下，难道是和我swiper的wrap一开始的时候是display:none有关么？因此我试着将一开始这个属性给抹去，让他在弹窗打开后，就显示，看看有没有正常初始化，如果是正常的，则说明就是display:none的问题，经过测试，确实是这样的。当swiper初始化容器，位于一个display:none的元素里时，其初始化，是存在一些问题的，不管是什么问题，反正交互是不奏效的了已经。。。那么如何去在这样的场景里去解决这样一个问题呢？\n\n首先一点，要明确，图片展示的swiper不可能页面一加载，就初始化显示，这是不符合当初的需求的，那么仔细想想看，既然是swiper初始化的时候，找不到display:none的元素才导致的初始化失败，那么，有怎么样的方式，才能达到，既隐藏，又能顺利被swiper初始化呢？答案就是下面这个属性：\n\n```css\nele {\n  visibility:hidden;\n}\n```\n\n其实啊，这个属性，和display:none类似，类似在，表现形式是一样的，都是在界面上隐藏元素，让用户看不到。只不过前者仍然可以获取到元素，后者就是完全消失不见了。因此，swiper的初始化，才不会奏效啊，哈哈哈，透过现象看本质，原来问题的根源是如此的简单而渺小，渺小到容易被忽视。\n\n因此，以后啊，再遇到像我这样的需求情况的时候，初始化一个容器进行swiper加载的时候，让容器隐藏，千万不要使用display:block;而是用visibility:hidden，一样可以达到预期的效果。\n\n","slug":"浅析swiper初始化遇到的一个问题","published":1,"updated":"2018-07-02T13:08:23.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmp0031msvi4ou1hsqw","content":"<p>最近的项目里，有个图片展示模块，采用了著名的swiper轮播框架来做，具体需求是这样的，在已百度地图为底图的页面上，会展示一些景区的热点，点这些热点，会弹出一个景区详情的弹窗，弹窗里有个查看大图的区域，点击即可进入图片展示模块。</p>\n<p>按照正常的开发流程，以正常的逻辑，首先获取这些景点列表，景点会带有特殊的id，在点击热点的时候，利用id去查询这些热点相对应的景点详情数据，在景点详情的数据里，带有图片展示模块的img路径数组，只要将img数组，传入图片展示模块swiper进行初始化，就可以了。</p>\n<p>但是，这么做，有一个问题，按照上面的流程来的话，那么点击大图区域，才会触发swiper的初始化，才会去请求图片们所对应的的路径，这样会对用户体验造成一定的影响，页面在加载图片的过程中，会出现一定时间的等待，以及停顿，其实在开发过程中，自测的图片路径，都是本地的，所以看不出来差异，但是一放到测试环境，那这种处理逻辑就GG了，毕竟算是一名小司机了，在这方面遇到的坑，还是有些的。</p>\n<p>当然有处理办法了，你们肯定要说，最常规的，就如同我前面博客里写到的那样，利用图片的预加载啊懒加载啊啥的，优化加载体验啊，但在这里，我偏偏不用这个办法，因为相比于常规的，直接一次点击就要初始化图片的情况，这里的情况，其实是这样的，当打开弹窗的时候，实际上，图片的路径数据已经过来了，这时候，图片展示模块还没有出现，所以，本人的处理思路是这样的：</p>\n<ul>\n<li><strong>1、首先将原本在图片区域点击后初始化swiper的代码，迁移到弹窗打开后的逻辑中</strong></li>\n<li><strong>2、那么图片区域点击只是给图片展示模块移除display:none的类，让其显示</strong>  </li>\n<li><strong>3、在图片展示区域关闭的事件中，销毁swiper对象，并且，隐藏图片展示模块的wrap层</strong></li>\n</ul>\n<p>按照上面的思路，就很清晰了，实际上，获取图片路径，加载图片，初始化swiper的工作，被提到了弹窗打开之后，这样就完美的摆脱了图片加载的问题，因为用户点开弹窗之后，并不会立即点开图片区域，让图片展示模块出现，因此，给了图片加载可乘之机，哈哈哈</p>\n<p>但实际上，按照这样的逻辑，去开发之后，在测试的时候，可以看出来，非常完美的解决了加载等待的问题，嗯，效果好像还不赖。。。但是，我点点看呢，结果悲剧了，swiper的按钮根本就失效了好伐？？！！一定是swiper初始化的过程出了问题。。。嗯。。。</p>\n<p>仔细思考了下，难道是和我swiper的wrap一开始的时候是display:none有关么？因此我试着将一开始这个属性给抹去，让他在弹窗打开后，就显示，看看有没有正常初始化，如果是正常的，则说明就是display:none的问题，经过测试，确实是这样的。当swiper初始化容器，位于一个display:none的元素里时，其初始化，是存在一些问题的，不管是什么问题，反正交互是不奏效的了已经。。。那么如何去在这样的场景里去解决这样一个问题呢？</p>\n<p>首先一点，要明确，图片展示的swiper不可能页面一加载，就初始化显示，这是不符合当初的需求的，那么仔细想想看，既然是swiper初始化的时候，找不到display:none的元素才导致的初始化失败，那么，有怎么样的方式，才能达到，既隐藏，又能顺利被swiper初始化呢？答案就是下面这个属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实啊，这个属性，和display:none类似，类似在，表现形式是一样的，都是在界面上隐藏元素，让用户看不到。只不过前者仍然可以获取到元素，后者就是完全消失不见了。因此，swiper的初始化，才不会奏效啊，哈哈哈，透过现象看本质，原来问题的根源是如此的简单而渺小，渺小到容易被忽视。</p>\n<p>因此，以后啊，再遇到像我这样的需求情况的时候，初始化一个容器进行swiper加载的时候，让容器隐藏，千万不要使用display:block;而是用visibility:hidden，一样可以达到预期的效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的项目里，有个图片展示模块，采用了著名的swiper轮播框架来做，具体需求是这样的，在已百度地图为底图的页面上，会展示一些景区的热点，点这些热点，会弹出一个景区详情的弹窗，弹窗里有个查看大图的区域，点击即可进入图片展示模块。</p>\n<p>按照正常的开发流程，以正常的逻辑，首先获取这些景点列表，景点会带有特殊的id，在点击热点的时候，利用id去查询这些热点相对应的景点详情数据，在景点详情的数据里，带有图片展示模块的img路径数组，只要将img数组，传入图片展示模块swiper进行初始化，就可以了。</p>\n<p>但是，这么做，有一个问题，按照上面的流程来的话，那么点击大图区域，才会触发swiper的初始化，才会去请求图片们所对应的的路径，这样会对用户体验造成一定的影响，页面在加载图片的过程中，会出现一定时间的等待，以及停顿，其实在开发过程中，自测的图片路径，都是本地的，所以看不出来差异，但是一放到测试环境，那这种处理逻辑就GG了，毕竟算是一名小司机了，在这方面遇到的坑，还是有些的。</p>\n<p>当然有处理办法了，你们肯定要说，最常规的，就如同我前面博客里写到的那样，利用图片的预加载啊懒加载啊啥的，优化加载体验啊，但在这里，我偏偏不用这个办法，因为相比于常规的，直接一次点击就要初始化图片的情况，这里的情况，其实是这样的，当打开弹窗的时候，实际上，图片的路径数据已经过来了，这时候，图片展示模块还没有出现，所以，本人的处理思路是这样的：</p>\n<ul>\n<li><strong>1、首先将原本在图片区域点击后初始化swiper的代码，迁移到弹窗打开后的逻辑中</strong></li>\n<li><strong>2、那么图片区域点击只是给图片展示模块移除display:none的类，让其显示</strong>  </li>\n<li><strong>3、在图片展示区域关闭的事件中，销毁swiper对象，并且，隐藏图片展示模块的wrap层</strong></li>\n</ul>\n<p>按照上面的思路，就很清晰了，实际上，获取图片路径，加载图片，初始化swiper的工作，被提到了弹窗打开之后，这样就完美的摆脱了图片加载的问题，因为用户点开弹窗之后，并不会立即点开图片区域，让图片展示模块出现，因此，给了图片加载可乘之机，哈哈哈</p>\n<p>但实际上，按照这样的逻辑，去开发之后，在测试的时候，可以看出来，非常完美的解决了加载等待的问题，嗯，效果好像还不赖。。。但是，我点点看呢，结果悲剧了，swiper的按钮根本就失效了好伐？？！！一定是swiper初始化的过程出了问题。。。嗯。。。</p>\n<p>仔细思考了下，难道是和我swiper的wrap一开始的时候是display:none有关么？因此我试着将一开始这个属性给抹去，让他在弹窗打开后，就显示，看看有没有正常初始化，如果是正常的，则说明就是display:none的问题，经过测试，确实是这样的。当swiper初始化容器，位于一个display:none的元素里时，其初始化，是存在一些问题的，不管是什么问题，反正交互是不奏效的了已经。。。那么如何去在这样的场景里去解决这样一个问题呢？</p>\n<p>首先一点，要明确，图片展示的swiper不可能页面一加载，就初始化显示，这是不符合当初的需求的，那么仔细想想看，既然是swiper初始化的时候，找不到display:none的元素才导致的初始化失败，那么，有怎么样的方式，才能达到，既隐藏，又能顺利被swiper初始化呢？答案就是下面这个属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实啊，这个属性，和display:none类似，类似在，表现形式是一样的，都是在界面上隐藏元素，让用户看不到。只不过前者仍然可以获取到元素，后者就是完全消失不见了。因此，swiper的初始化，才不会奏效啊，哈哈哈，透过现象看本质，原来问题的根源是如此的简单而渺小，渺小到容易被忽视。</p>\n<p>因此，以后啊，再遇到像我这样的需求情况的时候，初始化一个容器进行swiper加载的时候，让容器隐藏，千万不要使用display:block;而是用visibility:hidden，一样可以达到预期的效果。</p>\n"},{"title":"浅析图片的懒加载","date":"2018-06-04T01:17:29.000Z","_content":"## 前言\n  之前在好旅游项目里，首页景点列表就使用过图片懒加载的技术，当时主要是因为首页所展示图片众多，加载资源缓慢，因此在后期页面优化的时候，对图片资源的获取，采取了分流加载，也就是懒加载的效果，当用户滑动列表，图片开始出现的时候，才进行图片资源的获取，对于用户体验，有着不小的提升，下面就关于图片懒加载，自己提一些相关的见解：\n\n## 什么是懒加载\n  **懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式**。用户滚动到它们之前，可视区域外的图像不会被加载，可以给图片位置一个默认的占位图，这个图通常是正在加载中的gif动图，在长网页上使用延迟加载，将会使网页加载更快，在某些情况下，它还可以帮助减少服务器的负载，常使用在图片众多，页面很长的网站场景中。\n\n## 为什么要用懒加载\n  * **能提升用户体验**，不妨设想下，用户打开手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长，用户难免会心生抱怨，这就严重影响用户体验。\n  * **减少无效资源的加载**，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。\n  * **防止并发加载的资源过多会阻塞js的加载**，影响网站的正常使用\n\n## 懒加载的原理\n  首先，将页面上的图片的src属性设为默认的占位图片路径，而图片的真实路径则设置在data-original属性中，当页面滚动的时候需要去监听scroll事件，在scroll事件的回调中，判断我们的懒加载的图片是否进入可视区域，如果图片在可视区域内，将图片的src属性设置为data-original的值，这样就可以实现延迟加载。\n  \n## 懒加载实现步骤\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Lazyload</title>\n    <style>\n      .image-item {\n\t    display: block;\n\t    margin-bottom: 50px;\n\t    height: 200px;//一定记得设置图片高度\n\t}\n    </style>\n</head>\n<body>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/1.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/2.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/3.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/4.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/5.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/6.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/7.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/8.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/9.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/10.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/11.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/12.png\"/>\n\n<script>\nvar viewHeight =document.documentElement.clientHeight//获取可视区高度\nfunction lazyload(){\nvar eles=document.querySelectorAll（'img[data-original][lazyload]'）\nArray.prototype.forEach.call(eles,function(item,index){\nvar rect\nif(item.dataset.original===\"\")\n   return\nrect=item.getBoundingClientRect()// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置\nif(rect.bottom>=0 && rect.top < viewHeight){\n!function(){\n  var img=new Image()\n  img.src=item.dataset.original\n  img.onload=function(){\n    item.src=img.src\n    }\nitem.removeAttribute（\"data-original\"）//移除属性，下次不再遍历\nitem.removeAttribute（\"lazyload\"）\n   }()\n  }\n })\n}\nlazyload()//刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片\ndocument.addEventListener（\"scroll\"，lazyload)\n</script>\n</body>\n</html>\n```\n","source":"_posts/浅析图片的懒加载.md","raw":"---\ntitle: 浅析图片的懒加载\ndate: 2018-06-04 09:17:29\ntags:\n  - js\n  - 页面优化\ncategories:\n  - js\n---\n## 前言\n  之前在好旅游项目里，首页景点列表就使用过图片懒加载的技术，当时主要是因为首页所展示图片众多，加载资源缓慢，因此在后期页面优化的时候，对图片资源的获取，采取了分流加载，也就是懒加载的效果，当用户滑动列表，图片开始出现的时候，才进行图片资源的获取，对于用户体验，有着不小的提升，下面就关于图片懒加载，自己提一些相关的见解：\n\n## 什么是懒加载\n  **懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式**。用户滚动到它们之前，可视区域外的图像不会被加载，可以给图片位置一个默认的占位图，这个图通常是正在加载中的gif动图，在长网页上使用延迟加载，将会使网页加载更快，在某些情况下，它还可以帮助减少服务器的负载，常使用在图片众多，页面很长的网站场景中。\n\n## 为什么要用懒加载\n  * **能提升用户体验**，不妨设想下，用户打开手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长，用户难免会心生抱怨，这就严重影响用户体验。\n  * **减少无效资源的加载**，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。\n  * **防止并发加载的资源过多会阻塞js的加载**，影响网站的正常使用\n\n## 懒加载的原理\n  首先，将页面上的图片的src属性设为默认的占位图片路径，而图片的真实路径则设置在data-original属性中，当页面滚动的时候需要去监听scroll事件，在scroll事件的回调中，判断我们的懒加载的图片是否进入可视区域，如果图片在可视区域内，将图片的src属性设置为data-original的值，这样就可以实现延迟加载。\n  \n## 懒加载实现步骤\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Lazyload</title>\n    <style>\n      .image-item {\n\t    display: block;\n\t    margin-bottom: 50px;\n\t    height: 200px;//一定记得设置图片高度\n\t}\n    </style>\n</head>\n<body>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/1.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/2.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/3.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/4.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/5.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/6.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/7.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/8.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/9.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/10.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/11.png\"/>\n<img src=\"default.jpg\" class=\"image-item\" lazyload=\"true\"  data-original=\"images/12.png\"/>\n\n<script>\nvar viewHeight =document.documentElement.clientHeight//获取可视区高度\nfunction lazyload(){\nvar eles=document.querySelectorAll（'img[data-original][lazyload]'）\nArray.prototype.forEach.call(eles,function(item,index){\nvar rect\nif(item.dataset.original===\"\")\n   return\nrect=item.getBoundingClientRect()// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置\nif(rect.bottom>=0 && rect.top < viewHeight){\n!function(){\n  var img=new Image()\n  img.src=item.dataset.original\n  img.onload=function(){\n    item.src=img.src\n    }\nitem.removeAttribute（\"data-original\"）//移除属性，下次不再遍历\nitem.removeAttribute（\"lazyload\"）\n   }()\n  }\n })\n}\nlazyload()//刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片\ndocument.addEventListener（\"scroll\"，lazyload)\n</script>\n</body>\n</html>\n```\n","slug":"浅析图片的懒加载","published":1,"updated":"2018-06-04T02:09:43.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmr0034msvi180zagrh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  之前在好旅游项目里，首页景点列表就使用过图片懒加载的技术，当时主要是因为首页所展示图片众多，加载资源缓慢，因此在后期页面优化的时候，对图片资源的获取，采取了分流加载，也就是懒加载的效果，当用户滑动列表，图片开始出现的时候，才进行图片资源的获取，对于用户体验，有着不小的提升，下面就关于图片懒加载，自己提一些相关的见解：</p>\n<h2 id=\"什么是懒加载\"><a href=\"#什么是懒加载\" class=\"headerlink\" title=\"什么是懒加载\"></a>什么是懒加载</h2><p>  <strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式</strong>。用户滚动到它们之前，可视区域外的图像不会被加载，可以给图片位置一个默认的占位图，这个图通常是正在加载中的gif动图，在长网页上使用延迟加载，将会使网页加载更快，在某些情况下，它还可以帮助减少服务器的负载，常使用在图片众多，页面很长的网站场景中。</p>\n<h2 id=\"为什么要用懒加载\"><a href=\"#为什么要用懒加载\" class=\"headerlink\" title=\"为什么要用懒加载\"></a>为什么要用懒加载</h2><ul>\n<li><strong>能提升用户体验</strong>，不妨设想下，用户打开手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长，用户难免会心生抱怨，这就严重影响用户体验。</li>\n<li><strong>减少无效资源的加载</strong>，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li>\n<li><strong>防止并发加载的资源过多会阻塞js的加载</strong>，影响网站的正常使用</li>\n</ul>\n<h2 id=\"懒加载的原理\"><a href=\"#懒加载的原理\" class=\"headerlink\" title=\"懒加载的原理\"></a>懒加载的原理</h2><p>  首先，将页面上的图片的src属性设为默认的占位图片路径，而图片的真实路径则设置在data-original属性中，当页面滚动的时候需要去监听scroll事件，在scroll事件的回调中，判断我们的懒加载的图片是否进入可视区域，如果图片在可视区域内，将图片的src属性设置为data-original的值，这样就可以实现延迟加载。</p>\n<h2 id=\"懒加载实现步骤\"><a href=\"#懒加载实现步骤\" class=\"headerlink\" title=\"懒加载实现步骤\"></a>懒加载实现步骤</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Lazyload<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.image-item</span> &#123;</span></span><br><span class=\"line\">\t    display: block;</span><br><span class=\"line\">\t    margin-bottom: 50px;</span><br><span class=\"line\">\t    height: 200px;//一定记得设置图片高度</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/1.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/2.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/3.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/4.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/5.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/6.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/7.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/8.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/9.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/10.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/11.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/12.png&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> viewHeight =<span class=\"built_in\">document</span>.documentElement.clientHeight<span class=\"comment\">//获取可视区高度</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyload</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> eles=<span class=\"built_in\">document</span>.querySelectorAll（<span class=\"string\">&#x27;img[data-original][lazyload]&#x27;</span>）</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.prototype.forEach.call(eles,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> rect</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span>(item.dataset.original===<span class=\"string\">&quot;&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">rect=item.getBoundingClientRect()<span class=\"comment\">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span>(rect.bottom&gt;=<span class=\"number\">0</span> &amp;&amp; rect.top &lt; viewHeight)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> img=<span class=\"keyword\">new</span> Image()</span></span><br><span class=\"line\">  img.src=item.dataset.original</span><br><span class=\"line\"><span class=\"javascript\">  img.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">    item.src=img.src</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">item.removeAttribute（<span class=\"string\">&quot;data-original&quot;</span>）<span class=\"comment\">//移除属性，下次不再遍历</span></span></span><br><span class=\"line\"><span class=\"javascript\">item.removeAttribute（<span class=\"string\">&quot;lazyload&quot;</span>）</span></span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\">lazyload()<span class=\"comment\">//刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">document</span>.addEventListener（<span class=\"string\">&quot;scroll&quot;</span>，lazyload)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  之前在好旅游项目里，首页景点列表就使用过图片懒加载的技术，当时主要是因为首页所展示图片众多，加载资源缓慢，因此在后期页面优化的时候，对图片资源的获取，采取了分流加载，也就是懒加载的效果，当用户滑动列表，图片开始出现的时候，才进行图片资源的获取，对于用户体验，有着不小的提升，下面就关于图片懒加载，自己提一些相关的见解：</p>\n<h2 id=\"什么是懒加载\"><a href=\"#什么是懒加载\" class=\"headerlink\" title=\"什么是懒加载\"></a>什么是懒加载</h2><p>  <strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式</strong>。用户滚动到它们之前，可视区域外的图像不会被加载，可以给图片位置一个默认的占位图，这个图通常是正在加载中的gif动图，在长网页上使用延迟加载，将会使网页加载更快，在某些情况下，它还可以帮助减少服务器的负载，常使用在图片众多，页面很长的网站场景中。</p>\n<h2 id=\"为什么要用懒加载\"><a href=\"#为什么要用懒加载\" class=\"headerlink\" title=\"为什么要用懒加载\"></a>为什么要用懒加载</h2><ul>\n<li><strong>能提升用户体验</strong>，不妨设想下，用户打开手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长，用户难免会心生抱怨，这就严重影响用户体验。</li>\n<li><strong>减少无效资源的加载</strong>，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li>\n<li><strong>防止并发加载的资源过多会阻塞js的加载</strong>，影响网站的正常使用</li>\n</ul>\n<h2 id=\"懒加载的原理\"><a href=\"#懒加载的原理\" class=\"headerlink\" title=\"懒加载的原理\"></a>懒加载的原理</h2><p>  首先，将页面上的图片的src属性设为默认的占位图片路径，而图片的真实路径则设置在data-original属性中，当页面滚动的时候需要去监听scroll事件，在scroll事件的回调中，判断我们的懒加载的图片是否进入可视区域，如果图片在可视区域内，将图片的src属性设置为data-original的值，这样就可以实现延迟加载。</p>\n<h2 id=\"懒加载实现步骤\"><a href=\"#懒加载实现步骤\" class=\"headerlink\" title=\"懒加载实现步骤\"></a>懒加载实现步骤</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Lazyload<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.image-item</span> &#123;</span></span><br><span class=\"line\">\t    display: block;</span><br><span class=\"line\">\t    margin-bottom: 50px;</span><br><span class=\"line\">\t    height: 200px;//一定记得设置图片高度</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/1.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/2.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/3.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/4.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/5.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/6.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/7.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/8.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/9.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/10.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/11.png&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;default.jpg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image-item&quot;</span> <span class=\"attr\">lazyload</span>=<span class=\"string\">&quot;true&quot;</span>  <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;images/12.png&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> viewHeight =<span class=\"built_in\">document</span>.documentElement.clientHeight<span class=\"comment\">//获取可视区高度</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyload</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> eles=<span class=\"built_in\">document</span>.querySelectorAll（<span class=\"string\">&#x27;img[data-original][lazyload]&#x27;</span>）</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">Array</span>.prototype.forEach.call(eles,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> rect</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span>(item.dataset.original===<span class=\"string\">&quot;&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">rect=item.getBoundingClientRect()<span class=\"comment\">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span>(rect.bottom&gt;=<span class=\"number\">0</span> &amp;&amp; rect.top &lt; viewHeight)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> img=<span class=\"keyword\">new</span> Image()</span></span><br><span class=\"line\">  img.src=item.dataset.original</span><br><span class=\"line\"><span class=\"javascript\">  img.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">    item.src=img.src</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">item.removeAttribute（<span class=\"string\">&quot;data-original&quot;</span>）<span class=\"comment\">//移除属性，下次不再遍历</span></span></span><br><span class=\"line\"><span class=\"javascript\">item.removeAttribute（<span class=\"string\">&quot;lazyload&quot;</span>）</span></span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\">lazyload()<span class=\"comment\">//刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">document</span>.addEventListener（<span class=\"string\">&quot;scroll&quot;</span>，lazyload)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"浅析浏览器的回流与重绘","date":"2018-05-31T00:40:24.000Z","_content":"\n在前端开发的日常中，与浏览器打交道也是其中最重要的一部分，所见即所得的特点，因为浏览器，才变得有意思起来，那么平时我们在开发的过程中，会遇到与浏览器相关的性能问题，其中有两个特性与页面的渲染以及性能是有关的，就是浏览器的回流和重绘，那么什么是回流，什么又是重绘呢？下面就来跟大家阐述一下：\n\n\n\n## 一、浏览器渲染步骤\n浏览器在接收到html和css后，渲染的步骤是：html经过渲染生成DOM树，css经过渲染生成css渲染树，两者再经过结合，生成render tree，浏览器就可以根据render tree进行画面绘制。\n\n　　如果浏览器从服务器接收到了新的css，需要更新页面的时候，需要经过什么操作呢？这就是回流reflow与重绘repaint所发生的步骤，因此，**回流必定会引起重绘，但是重绘并不一定会引起回流。**  \n\n## 二、重绘\n当前元素的样式（背景颜色，字体颜色）发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对于浏览器的性能较小。\n\n　　发生重绘的情形：改变容器的外观风格等，比如background:black等。改变外观，不改变布局，不会影响到其他的DOM。  \n\n## 三、回流\n是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程。\n\n\n## 四、引起因素\n因为回流可能导致整个COM树的重新构造，所以是性能的一大杀手，一个元素的回流导致了其所有子元素以及DOM中紧随其后的祖先元素的随后的回流，下面是引起浏览器触发回流reflow的变化：  \n\n* **页面首次渲染**\n\n* **浏览器窗口大小发生改变**\n\n* **元素尺寸或者位置发生改变**\n\n* **元素的内容发生变化（文字数量或者图片大小）**\n\n* **元素字体大小变化**\n\n* **添加或者删除可见的DOM元素**\n\n* **激活CSS伪类（如：hover）**\n\n* **查询某些属性或调用某些方法**\n\n## 五、优化方案\n\n### CSS\n* 避免使用table布局\n\n* 尽可能的在DOM树最末端改变class\n\n* 避免设置多层内联样式\n\n* 将动画效果应用到position属性为absolute或fixed已经脱离正常文档流的元素上（个人实际项目，手机端动画效果应用到absolute元素上时，浏览器也会发生回流效应，因此尽量不要使用js改变元素位置操作动画效果，手机端建议CSS3动画效果，由浏览器渲染引擎进行动画绘制，性能要高于JS控制）\n\n* 避免使用CSS表达式（如calc()动态设置元素宽高）\n\n### JS\n* 避免频繁操作样式，最好是一次性重写style属性，或者将样式列表定义为class，一次性更改class属性\n\n* 避免频繁操作DOM，创建一个documentFragment，在其上面应用所有的DOM操作，最后再将其添加到文档中\n\n* 也可以先将元素设置为display:none,再进行相关DOM操作，操作结束后，再让它显示出来。因为在display:none元素上操作DOM，并不会引起浏览器的回流和重绘\n\n* 避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。\n\n* 对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。","source":"_posts/浅析浏览器的回流与重绘.md","raw":"---\ntitle: 浅析浏览器的回流与重绘\ndate: 2018-05-31 08:40:24\ntags:\n  - browser\ncategories:\n  - browser\n---\n\n在前端开发的日常中，与浏览器打交道也是其中最重要的一部分，所见即所得的特点，因为浏览器，才变得有意思起来，那么平时我们在开发的过程中，会遇到与浏览器相关的性能问题，其中有两个特性与页面的渲染以及性能是有关的，就是浏览器的回流和重绘，那么什么是回流，什么又是重绘呢？下面就来跟大家阐述一下：\n\n\n\n## 一、浏览器渲染步骤\n浏览器在接收到html和css后，渲染的步骤是：html经过渲染生成DOM树，css经过渲染生成css渲染树，两者再经过结合，生成render tree，浏览器就可以根据render tree进行画面绘制。\n\n　　如果浏览器从服务器接收到了新的css，需要更新页面的时候，需要经过什么操作呢？这就是回流reflow与重绘repaint所发生的步骤，因此，**回流必定会引起重绘，但是重绘并不一定会引起回流。**  \n\n## 二、重绘\n当前元素的样式（背景颜色，字体颜色）发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对于浏览器的性能较小。\n\n　　发生重绘的情形：改变容器的外观风格等，比如background:black等。改变外观，不改变布局，不会影响到其他的DOM。  \n\n## 三、回流\n是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程。\n\n\n## 四、引起因素\n因为回流可能导致整个COM树的重新构造，所以是性能的一大杀手，一个元素的回流导致了其所有子元素以及DOM中紧随其后的祖先元素的随后的回流，下面是引起浏览器触发回流reflow的变化：  \n\n* **页面首次渲染**\n\n* **浏览器窗口大小发生改变**\n\n* **元素尺寸或者位置发生改变**\n\n* **元素的内容发生变化（文字数量或者图片大小）**\n\n* **元素字体大小变化**\n\n* **添加或者删除可见的DOM元素**\n\n* **激活CSS伪类（如：hover）**\n\n* **查询某些属性或调用某些方法**\n\n## 五、优化方案\n\n### CSS\n* 避免使用table布局\n\n* 尽可能的在DOM树最末端改变class\n\n* 避免设置多层内联样式\n\n* 将动画效果应用到position属性为absolute或fixed已经脱离正常文档流的元素上（个人实际项目，手机端动画效果应用到absolute元素上时，浏览器也会发生回流效应，因此尽量不要使用js改变元素位置操作动画效果，手机端建议CSS3动画效果，由浏览器渲染引擎进行动画绘制，性能要高于JS控制）\n\n* 避免使用CSS表达式（如calc()动态设置元素宽高）\n\n### JS\n* 避免频繁操作样式，最好是一次性重写style属性，或者将样式列表定义为class，一次性更改class属性\n\n* 避免频繁操作DOM，创建一个documentFragment，在其上面应用所有的DOM操作，最后再将其添加到文档中\n\n* 也可以先将元素设置为display:none,再进行相关DOM操作，操作结束后，再让它显示出来。因为在display:none元素上操作DOM，并不会引起浏览器的回流和重绘\n\n* 避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。\n\n* 对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。","slug":"浅析浏览器的回流与重绘","published":1,"updated":"2018-06-01T01:17:07.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmr0036msviaq6i0pou","content":"<p>在前端开发的日常中，与浏览器打交道也是其中最重要的一部分，所见即所得的特点，因为浏览器，才变得有意思起来，那么平时我们在开发的过程中，会遇到与浏览器相关的性能问题，其中有两个特性与页面的渲染以及性能是有关的，就是浏览器的回流和重绘，那么什么是回流，什么又是重绘呢？下面就来跟大家阐述一下：</p>\n<h2 id=\"一、浏览器渲染步骤\"><a href=\"#一、浏览器渲染步骤\" class=\"headerlink\" title=\"一、浏览器渲染步骤\"></a>一、浏览器渲染步骤</h2><p>浏览器在接收到html和css后，渲染的步骤是：html经过渲染生成DOM树，css经过渲染生成css渲染树，两者再经过结合，生成render tree，浏览器就可以根据render tree进行画面绘制。</p>\n<p>　　如果浏览器从服务器接收到了新的css，需要更新页面的时候，需要经过什么操作呢？这就是回流reflow与重绘repaint所发生的步骤，因此，<strong>回流必定会引起重绘，但是重绘并不一定会引起回流。</strong>  </p>\n<h2 id=\"二、重绘\"><a href=\"#二、重绘\" class=\"headerlink\" title=\"二、重绘\"></a>二、重绘</h2><p>当前元素的样式（背景颜色，字体颜色）发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对于浏览器的性能较小。</p>\n<p>　　发生重绘的情形：改变容器的外观风格等，比如background:black等。改变外观，不改变布局，不会影响到其他的DOM。  </p>\n<h2 id=\"三、回流\"><a href=\"#三、回流\" class=\"headerlink\" title=\"三、回流\"></a>三、回流</h2><p>是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程。</p>\n<h2 id=\"四、引起因素\"><a href=\"#四、引起因素\" class=\"headerlink\" title=\"四、引起因素\"></a>四、引起因素</h2><p>因为回流可能导致整个COM树的重新构造，所以是性能的一大杀手，一个元素的回流导致了其所有子元素以及DOM中紧随其后的祖先元素的随后的回流，下面是引起浏览器触发回流reflow的变化：  </p>\n<ul>\n<li><p><strong>页面首次渲染</strong></p>\n</li>\n<li><p><strong>浏览器窗口大小发生改变</strong></p>\n</li>\n<li><p><strong>元素尺寸或者位置发生改变</strong></p>\n</li>\n<li><p><strong>元素的内容发生变化（文字数量或者图片大小）</strong></p>\n</li>\n<li><p><strong>元素字体大小变化</strong></p>\n</li>\n<li><p><strong>添加或者删除可见的DOM元素</strong></p>\n</li>\n<li><p><strong>激活CSS伪类（如：hover）</strong></p>\n</li>\n<li><p><strong>查询某些属性或调用某些方法</strong></p>\n</li>\n</ul>\n<h2 id=\"五、优化方案\"><a href=\"#五、优化方案\" class=\"headerlink\" title=\"五、优化方案\"></a>五、优化方案</h2><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ul>\n<li><p>避免使用table布局</p>\n</li>\n<li><p>尽可能的在DOM树最末端改变class</p>\n</li>\n<li><p>避免设置多层内联样式</p>\n</li>\n<li><p>将动画效果应用到position属性为absolute或fixed已经脱离正常文档流的元素上（个人实际项目，手机端动画效果应用到absolute元素上时，浏览器也会发生回流效应，因此尽量不要使用js改变元素位置操作动画效果，手机端建议CSS3动画效果，由浏览器渲染引擎进行动画绘制，性能要高于JS控制）</p>\n</li>\n<li><p>避免使用CSS表达式（如calc()动态设置元素宽高）</p>\n</li>\n</ul>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><ul>\n<li><p>避免频繁操作样式，最好是一次性重写style属性，或者将样式列表定义为class，一次性更改class属性</p>\n</li>\n<li><p>避免频繁操作DOM，创建一个documentFragment，在其上面应用所有的DOM操作，最后再将其添加到文档中</p>\n</li>\n<li><p>也可以先将元素设置为display:none,再进行相关DOM操作，操作结束后，再让它显示出来。因为在display:none元素上操作DOM，并不会引起浏览器的回流和重绘</p>\n</li>\n<li><p>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</p>\n</li>\n<li><p>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在前端开发的日常中，与浏览器打交道也是其中最重要的一部分，所见即所得的特点，因为浏览器，才变得有意思起来，那么平时我们在开发的过程中，会遇到与浏览器相关的性能问题，其中有两个特性与页面的渲染以及性能是有关的，就是浏览器的回流和重绘，那么什么是回流，什么又是重绘呢？下面就来跟大家阐述一下：</p>\n<h2 id=\"一、浏览器渲染步骤\"><a href=\"#一、浏览器渲染步骤\" class=\"headerlink\" title=\"一、浏览器渲染步骤\"></a>一、浏览器渲染步骤</h2><p>浏览器在接收到html和css后，渲染的步骤是：html经过渲染生成DOM树，css经过渲染生成css渲染树，两者再经过结合，生成render tree，浏览器就可以根据render tree进行画面绘制。</p>\n<p>　　如果浏览器从服务器接收到了新的css，需要更新页面的时候，需要经过什么操作呢？这就是回流reflow与重绘repaint所发生的步骤，因此，<strong>回流必定会引起重绘，但是重绘并不一定会引起回流。</strong>  </p>\n<h2 id=\"二、重绘\"><a href=\"#二、重绘\" class=\"headerlink\" title=\"二、重绘\"></a>二、重绘</h2><p>当前元素的样式（背景颜色，字体颜色）发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对于浏览器的性能较小。</p>\n<p>　　发生重绘的情形：改变容器的外观风格等，比如background:black等。改变外观，不改变布局，不会影响到其他的DOM。  </p>\n<h2 id=\"三、回流\"><a href=\"#三、回流\" class=\"headerlink\" title=\"三、回流\"></a>三、回流</h2><p>是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程。</p>\n<h2 id=\"四、引起因素\"><a href=\"#四、引起因素\" class=\"headerlink\" title=\"四、引起因素\"></a>四、引起因素</h2><p>因为回流可能导致整个COM树的重新构造，所以是性能的一大杀手，一个元素的回流导致了其所有子元素以及DOM中紧随其后的祖先元素的随后的回流，下面是引起浏览器触发回流reflow的变化：  </p>\n<ul>\n<li><p><strong>页面首次渲染</strong></p>\n</li>\n<li><p><strong>浏览器窗口大小发生改变</strong></p>\n</li>\n<li><p><strong>元素尺寸或者位置发生改变</strong></p>\n</li>\n<li><p><strong>元素的内容发生变化（文字数量或者图片大小）</strong></p>\n</li>\n<li><p><strong>元素字体大小变化</strong></p>\n</li>\n<li><p><strong>添加或者删除可见的DOM元素</strong></p>\n</li>\n<li><p><strong>激活CSS伪类（如：hover）</strong></p>\n</li>\n<li><p><strong>查询某些属性或调用某些方法</strong></p>\n</li>\n</ul>\n<h2 id=\"五、优化方案\"><a href=\"#五、优化方案\" class=\"headerlink\" title=\"五、优化方案\"></a>五、优化方案</h2><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ul>\n<li><p>避免使用table布局</p>\n</li>\n<li><p>尽可能的在DOM树最末端改变class</p>\n</li>\n<li><p>避免设置多层内联样式</p>\n</li>\n<li><p>将动画效果应用到position属性为absolute或fixed已经脱离正常文档流的元素上（个人实际项目，手机端动画效果应用到absolute元素上时，浏览器也会发生回流效应，因此尽量不要使用js改变元素位置操作动画效果，手机端建议CSS3动画效果，由浏览器渲染引擎进行动画绘制，性能要高于JS控制）</p>\n</li>\n<li><p>避免使用CSS表达式（如calc()动态设置元素宽高）</p>\n</li>\n</ul>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><ul>\n<li><p>避免频繁操作样式，最好是一次性重写style属性，或者将样式列表定义为class，一次性更改class属性</p>\n</li>\n<li><p>避免频繁操作DOM，创建一个documentFragment，在其上面应用所有的DOM操作，最后再将其添加到文档中</p>\n</li>\n<li><p>也可以先将元素设置为display:none,再进行相关DOM操作，操作结束后，再让它显示出来。因为在display:none元素上操作DOM，并不会引起浏览器的回流和重绘</p>\n</li>\n<li><p>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</p>\n</li>\n<li><p>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p>\n</li>\n</ul>\n"},{"title":"浅谈JS中的浅拷贝与深拷贝","date":"2018-04-13T01:00:51.000Z","_content":"　　前端工程师应该都比较熟悉浅拷贝和深拷贝的概念，在日常业务代码的过程中，特别是做数据处理的时候，经常行的会遇到，比如如何在不修改原对象的基础上，重新生成一个一模一样的对象，加以利用，又或是，如何巧妙地运用相关的内置API，来达成自己所需要的结果，比如数组相关的操作，splice和slice就是截然相反的处理，虽然同样是对数组进行截取操作，但是前者会影响原数组，后者则是返回一个新的数组对象，而对原来的数组并不会产生任何影响，这其中的差别，需要有一定的开发经验才能明白。   \n好了，废话也不多说，下面来简单谈谈深拷贝与浅拷贝之间的那些事儿：  \n\n## 一、什么是浅拷贝，什么是深拷贝\n从名字上，就能看出来，这哥俩确实是有很大的区别，是对于复制方式的差别。浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存（内存区域没有隔离）。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存（内存区域隔离），修改新对象不会改到原对象。在多层对象上，浅拷贝只拷贝一层，而深拷贝则会层层迭代，直到最后一层里只有 基本类型值，没有复杂类型的值，比如对象或者是数组。    \n**浅拷贝举例**   \n```javascript\n  var Chinese = {\n　　nation:'中国'\n};\nvar Doctor ={\n　　career:'医生'\n}\nfunction extendCopy(p) {\n　　var c = {};\n　　for (var i in p) { \n　　　　c[i] = p[i];\n　　}\n　　return c;\n}\nvar Doctor = extendCopy(Chinese);\nDoctor.career = '医生';\nalert(Doctor.nation); // 中国\n```\n\n**深拷贝举例**  \n```javascript\nfunction deepCopy(p, c) {\n　 var c = c || {};\n　 for (var i in p) {\n　　　　if (typeof p[i] === 'object') {\n　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n　　　　　　deepCopy(p[i], c[i]);\n　　　　} else {\n　　　　　　c[i] = p[i];\n　　　　}\n　 }\n　 return c;\n}\n```\n\n## 二、深拷贝的实现方式\n\n### ES6方法 Object.assign\nES6为我们提供了一种十分好用的方法，Object.assign(target, ...source)方法，assign方法接受多个参数，第一个参数target为拷贝目标，剩余参数...source是拷贝源。此方法可以将...source中的属性复制到target中，同名属性会进行覆盖，并且在复制过程中实现了'伪'深拷贝\n\n```javascript\nlet foo = {\n    a: 1,\n    b: 2,\n    c: {\n        d: 1,\n    }\n}\nlet bar = {};\nObject.assign(bar, foo);\nfoo.a++;\nfoo.a === 2 //true\nbar.a === 1 //true\n```\n乍一看，好像已经实现了深拷贝的效果，对foo.a进行的操作并没有体现在bar.a中,但是再往后看\n```javascript\nfoo.c.d++;\nfoo.c.d === 2 //true\nbar.c.d === 1 //false\nbar.c.d === 2 //true\n```\n\nObject.assign()的拷贝类型十分明显了,这是一种可以对非嵌套对象进行深拷贝的方法,**如果对象中出现嵌套情况,那么其对被嵌套对象的行为就成了普通的浅拷贝**.\n\n如果真的想进行深拷贝,最简单粗暴地方式就是JSON操作.\n\nJSON对象中包含两个方法, stringify()和parse(),前者可以将对象JSON化,而后者可以将JSON格式转换为对象.这是一种可以实现深拷贝的方法.\n\n**但这种方法的缺陷是会破坏原型链,并且无法拷贝属性值为function的属性**\n\n所以如果只是想单纯复制一个嵌套对象,可以使用此方法\n\n```javascript\n  let foo = {\n    a: 1,\n    b: {\n        c: 1\n    }\n}\nlet bar = JSON.parse(JSON.stringify(foo));\n```\n\n### JQ中的$.extend\njQuery提供了一个可以用来做深拷贝的方法，就是$.extend\n\n```javascript\n  var $ = require('jquery');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = $.extend(true, {}, obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n另外lodash也有提供_.cloneDeep来做深拷贝操作。\n```javascript\n  var _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n### 递归实现深拷贝\n```javascript\nfunction clone( o ) {\n    var temp = {};\n    for( var k in o ) {\n        if( typeof o[ k ] == 'object' ){\n             temp[ k ] = clone( o[ k ] );\n        } else {\n             temp[ k ] = o[ k ];\n        }\n    }\n    return temp;\n}\n```\n\n结语：这是本人在开发过程中实际总结的相关方法，也是比较有效的方法，如果大家有更好的方法，也欢迎留言。","source":"_posts/浅谈JS中的浅拷贝与深拷贝.md","raw":"---\ntitle: 浅谈JS中的浅拷贝与深拷贝\ndate: 2018-04-13 09:00:51\ntags:\n  - js\ncategories:\n  - js\n---\n　　前端工程师应该都比较熟悉浅拷贝和深拷贝的概念，在日常业务代码的过程中，特别是做数据处理的时候，经常行的会遇到，比如如何在不修改原对象的基础上，重新生成一个一模一样的对象，加以利用，又或是，如何巧妙地运用相关的内置API，来达成自己所需要的结果，比如数组相关的操作，splice和slice就是截然相反的处理，虽然同样是对数组进行截取操作，但是前者会影响原数组，后者则是返回一个新的数组对象，而对原来的数组并不会产生任何影响，这其中的差别，需要有一定的开发经验才能明白。   \n好了，废话也不多说，下面来简单谈谈深拷贝与浅拷贝之间的那些事儿：  \n\n## 一、什么是浅拷贝，什么是深拷贝\n从名字上，就能看出来，这哥俩确实是有很大的区别，是对于复制方式的差别。浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存（内存区域没有隔离）。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存（内存区域隔离），修改新对象不会改到原对象。在多层对象上，浅拷贝只拷贝一层，而深拷贝则会层层迭代，直到最后一层里只有 基本类型值，没有复杂类型的值，比如对象或者是数组。    \n**浅拷贝举例**   \n```javascript\n  var Chinese = {\n　　nation:'中国'\n};\nvar Doctor ={\n　　career:'医生'\n}\nfunction extendCopy(p) {\n　　var c = {};\n　　for (var i in p) { \n　　　　c[i] = p[i];\n　　}\n　　return c;\n}\nvar Doctor = extendCopy(Chinese);\nDoctor.career = '医生';\nalert(Doctor.nation); // 中国\n```\n\n**深拷贝举例**  \n```javascript\nfunction deepCopy(p, c) {\n　 var c = c || {};\n　 for (var i in p) {\n　　　　if (typeof p[i] === 'object') {\n　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n　　　　　　deepCopy(p[i], c[i]);\n　　　　} else {\n　　　　　　c[i] = p[i];\n　　　　}\n　 }\n　 return c;\n}\n```\n\n## 二、深拷贝的实现方式\n\n### ES6方法 Object.assign\nES6为我们提供了一种十分好用的方法，Object.assign(target, ...source)方法，assign方法接受多个参数，第一个参数target为拷贝目标，剩余参数...source是拷贝源。此方法可以将...source中的属性复制到target中，同名属性会进行覆盖，并且在复制过程中实现了'伪'深拷贝\n\n```javascript\nlet foo = {\n    a: 1,\n    b: 2,\n    c: {\n        d: 1,\n    }\n}\nlet bar = {};\nObject.assign(bar, foo);\nfoo.a++;\nfoo.a === 2 //true\nbar.a === 1 //true\n```\n乍一看，好像已经实现了深拷贝的效果，对foo.a进行的操作并没有体现在bar.a中,但是再往后看\n```javascript\nfoo.c.d++;\nfoo.c.d === 2 //true\nbar.c.d === 1 //false\nbar.c.d === 2 //true\n```\n\nObject.assign()的拷贝类型十分明显了,这是一种可以对非嵌套对象进行深拷贝的方法,**如果对象中出现嵌套情况,那么其对被嵌套对象的行为就成了普通的浅拷贝**.\n\n如果真的想进行深拷贝,最简单粗暴地方式就是JSON操作.\n\nJSON对象中包含两个方法, stringify()和parse(),前者可以将对象JSON化,而后者可以将JSON格式转换为对象.这是一种可以实现深拷贝的方法.\n\n**但这种方法的缺陷是会破坏原型链,并且无法拷贝属性值为function的属性**\n\n所以如果只是想单纯复制一个嵌套对象,可以使用此方法\n\n```javascript\n  let foo = {\n    a: 1,\n    b: {\n        c: 1\n    }\n}\nlet bar = JSON.parse(JSON.stringify(foo));\n```\n\n### JQ中的$.extend\njQuery提供了一个可以用来做深拷贝的方法，就是$.extend\n\n```javascript\n  var $ = require('jquery');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = $.extend(true, {}, obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n另外lodash也有提供_.cloneDeep来做深拷贝操作。\n```javascript\n  var _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n### 递归实现深拷贝\n```javascript\nfunction clone( o ) {\n    var temp = {};\n    for( var k in o ) {\n        if( typeof o[ k ] == 'object' ){\n             temp[ k ] = clone( o[ k ] );\n        } else {\n             temp[ k ] = o[ k ];\n        }\n    }\n    return temp;\n}\n```\n\n结语：这是本人在开发过程中实际总结的相关方法，也是比较有效的方法，如果大家有更好的方法，也欢迎留言。","slug":"浅谈JS中的浅拷贝与深拷贝","published":1,"updated":"2018-06-01T01:17:30.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxms003amsvi0h9t2v6v","content":"<p>　　前端工程师应该都比较熟悉浅拷贝和深拷贝的概念，在日常业务代码的过程中，特别是做数据处理的时候，经常行的会遇到，比如如何在不修改原对象的基础上，重新生成一个一模一样的对象，加以利用，又或是，如何巧妙地运用相关的内置API，来达成自己所需要的结果，比如数组相关的操作，splice和slice就是截然相反的处理，虽然同样是对数组进行截取操作，但是前者会影响原数组，后者则是返回一个新的数组对象，而对原来的数组并不会产生任何影响，这其中的差别，需要有一定的开发经验才能明白。<br>好了，废话也不多说，下面来简单谈谈深拷贝与浅拷贝之间的那些事儿：  </p>\n<h2 id=\"一、什么是浅拷贝，什么是深拷贝\"><a href=\"#一、什么是浅拷贝，什么是深拷贝\" class=\"headerlink\" title=\"一、什么是浅拷贝，什么是深拷贝\"></a>一、什么是浅拷贝，什么是深拷贝</h2><p>从名字上，就能看出来，这哥俩确实是有很大的区别，是对于复制方式的差别。浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存（内存区域没有隔离）。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存（内存区域隔离），修改新对象不会改到原对象。在多层对象上，浅拷贝只拷贝一层，而深拷贝则会层层迭代，直到最后一层里只有 基本类型值，没有复杂类型的值，比如对象或者是数组。<br><strong>浅拷贝举例</strong>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> Chinese = &#123;</span><br><span class=\"line\">　　nation:<span class=\"string\">&#x27;中国&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor =&#123;</span><br><span class=\"line\">　　career:<span class=\"string\">&#x27;医生&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extendCopy</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> c = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> p) &#123; </span><br><span class=\"line\">　　　　c[i] = p[i];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor = extendCopy(Chinese);</span><br><span class=\"line\">Doctor.career = <span class=\"string\">&#x27;医生&#x27;</span>;</span><br><span class=\"line\">alert(Doctor.nation); <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<p><strong>深拷贝举例</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">p, c</span>) </span>&#123;</span><br><span class=\"line\">　 <span class=\"keyword\">var</span> c = c || &#123;&#125;;</span><br><span class=\"line\">　 <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> p) &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">　　　　　　c[i] = (p[i].constructor === <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;;</span><br><span class=\"line\">　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\">　　　　&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　 &#125;</span><br><span class=\"line\">　 <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、深拷贝的实现方式\"><a href=\"#二、深拷贝的实现方式\" class=\"headerlink\" title=\"二、深拷贝的实现方式\"></a>二、深拷贝的实现方式</h2><h3 id=\"ES6方法-Object-assign\"><a href=\"#ES6方法-Object-assign\" class=\"headerlink\" title=\"ES6方法 Object.assign\"></a>ES6方法 Object.assign</h3><p>ES6为我们提供了一种十分好用的方法，Object.assign(target, …source)方法，assign方法接受多个参数，第一个参数target为拷贝目标，剩余参数…source是拷贝源。此方法可以将…source中的属性复制到target中，同名属性会进行覆盖，并且在复制过程中实现了’伪’深拷贝</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">        d: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar, foo);</span><br><span class=\"line\">foo.a++;</span><br><span class=\"line\">foo.a === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">bar.a === <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>乍一看，好像已经实现了深拷贝的效果，对foo.a进行的操作并没有体现在bar.a中,但是再往后看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.c.d++;</span><br><span class=\"line\">foo.c.d === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">bar.c.d === <span class=\"number\">1</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">bar.c.d === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>Object.assign()的拷贝类型十分明显了,这是一种可以对非嵌套对象进行深拷贝的方法,<strong>如果对象中出现嵌套情况,那么其对被嵌套对象的行为就成了普通的浅拷贝</strong>.</p>\n<p>如果真的想进行深拷贝,最简单粗暴地方式就是JSON操作.</p>\n<p>JSON对象中包含两个方法, stringify()和parse(),前者可以将对象JSON化,而后者可以将JSON格式转换为对象.这是一种可以实现深拷贝的方法.</p>\n<p><strong>但这种方法的缺陷是会破坏原型链,并且无法拷贝属性值为function的属性</strong></p>\n<p>所以如果只是想单纯复制一个嵌套对象,可以使用此方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123;</span><br><span class=\"line\">        c: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(foo));</span><br></pre></td></tr></table></figure>\n<h3 id=\"JQ中的-extend\"><a href=\"#JQ中的-extend\" class=\"headerlink\" title=\"JQ中的$.extend\"></a>JQ中的$.extend</h3><p>jQuery提供了一个可以用来做深拷贝的方法，就是$.extend</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>另外lodash也有提供_.cloneDeep来做深拷贝操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"递归实现深拷贝\"><a href=\"#递归实现深拷贝\" class=\"headerlink\" title=\"递归实现深拷贝\"></a>递归实现深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\"> o </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> o[ k ] == <span class=\"string\">&#x27;object&#x27;</span> )&#123;</span><br><span class=\"line\">             temp[ k ] = clone( o[ k ] );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             temp[ k ] = o[ k ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结语：这是本人在开发过程中实际总结的相关方法，也是比较有效的方法，如果大家有更好的方法，也欢迎留言。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　前端工程师应该都比较熟悉浅拷贝和深拷贝的概念，在日常业务代码的过程中，特别是做数据处理的时候，经常行的会遇到，比如如何在不修改原对象的基础上，重新生成一个一模一样的对象，加以利用，又或是，如何巧妙地运用相关的内置API，来达成自己所需要的结果，比如数组相关的操作，splice和slice就是截然相反的处理，虽然同样是对数组进行截取操作，但是前者会影响原数组，后者则是返回一个新的数组对象，而对原来的数组并不会产生任何影响，这其中的差别，需要有一定的开发经验才能明白。<br>好了，废话也不多说，下面来简单谈谈深拷贝与浅拷贝之间的那些事儿：  </p>\n<h2 id=\"一、什么是浅拷贝，什么是深拷贝\"><a href=\"#一、什么是浅拷贝，什么是深拷贝\" class=\"headerlink\" title=\"一、什么是浅拷贝，什么是深拷贝\"></a>一、什么是浅拷贝，什么是深拷贝</h2><p>从名字上，就能看出来，这哥俩确实是有很大的区别，是对于复制方式的差别。浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存（内存区域没有隔离）。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存（内存区域隔离），修改新对象不会改到原对象。在多层对象上，浅拷贝只拷贝一层，而深拷贝则会层层迭代，直到最后一层里只有 基本类型值，没有复杂类型的值，比如对象或者是数组。<br><strong>浅拷贝举例</strong>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> Chinese = &#123;</span><br><span class=\"line\">　　nation:<span class=\"string\">&#x27;中国&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor =&#123;</span><br><span class=\"line\">　　career:<span class=\"string\">&#x27;医生&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extendCopy</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> c = &#123;&#125;;</span><br><span class=\"line\">　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> p) &#123; </span><br><span class=\"line\">　　　　c[i] = p[i];</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor = extendCopy(Chinese);</span><br><span class=\"line\">Doctor.career = <span class=\"string\">&#x27;医生&#x27;</span>;</span><br><span class=\"line\">alert(Doctor.nation); <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<p><strong>深拷贝举例</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">p, c</span>) </span>&#123;</span><br><span class=\"line\">　 <span class=\"keyword\">var</span> c = c || &#123;&#125;;</span><br><span class=\"line\">　 <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> p) &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">　　　　　　c[i] = (p[i].constructor === <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;;</span><br><span class=\"line\">　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\">　　　　&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　 &#125;</span><br><span class=\"line\">　 <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、深拷贝的实现方式\"><a href=\"#二、深拷贝的实现方式\" class=\"headerlink\" title=\"二、深拷贝的实现方式\"></a>二、深拷贝的实现方式</h2><h3 id=\"ES6方法-Object-assign\"><a href=\"#ES6方法-Object-assign\" class=\"headerlink\" title=\"ES6方法 Object.assign\"></a>ES6方法 Object.assign</h3><p>ES6为我们提供了一种十分好用的方法，Object.assign(target, …source)方法，assign方法接受多个参数，第一个参数target为拷贝目标，剩余参数…source是拷贝源。此方法可以将…source中的属性复制到target中，同名属性会进行覆盖，并且在复制过程中实现了’伪’深拷贝</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">        d: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar, foo);</span><br><span class=\"line\">foo.a++;</span><br><span class=\"line\">foo.a === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">bar.a === <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>乍一看，好像已经实现了深拷贝的效果，对foo.a进行的操作并没有体现在bar.a中,但是再往后看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.c.d++;</span><br><span class=\"line\">foo.c.d === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">bar.c.d === <span class=\"number\">1</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">bar.c.d === <span class=\"number\">2</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>Object.assign()的拷贝类型十分明显了,这是一种可以对非嵌套对象进行深拷贝的方法,<strong>如果对象中出现嵌套情况,那么其对被嵌套对象的行为就成了普通的浅拷贝</strong>.</p>\n<p>如果真的想进行深拷贝,最简单粗暴地方式就是JSON操作.</p>\n<p>JSON对象中包含两个方法, stringify()和parse(),前者可以将对象JSON化,而后者可以将JSON格式转换为对象.这是一种可以实现深拷贝的方法.</p>\n<p><strong>但这种方法的缺陷是会破坏原型链,并且无法拷贝属性值为function的属性</strong></p>\n<p>所以如果只是想单纯复制一个嵌套对象,可以使用此方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123;</span><br><span class=\"line\">        c: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(foo));</span><br></pre></td></tr></table></figure>\n<h3 id=\"JQ中的-extend\"><a href=\"#JQ中的-extend\" class=\"headerlink\" title=\"JQ中的$.extend\"></a>JQ中的$.extend</h3><p>jQuery提供了一个可以用来做深拷贝的方法，就是$.extend</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>另外lodash也有提供_.cloneDeep来做深拷贝操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"递归实现深拷贝\"><a href=\"#递归实现深拷贝\" class=\"headerlink\" title=\"递归实现深拷贝\"></a>递归实现深拷贝</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\"> o </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> o[ k ] == <span class=\"string\">&#x27;object&#x27;</span> )&#123;</span><br><span class=\"line\">             temp[ k ] = clone( o[ k ] );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             temp[ k ] = o[ k ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结语：这是本人在开发过程中实际总结的相关方法，也是比较有效的方法，如果大家有更好的方法，也欢迎留言。</p>\n"},{"title":"浅谈JS中的闭包","date":"2018-02-16T02:57:56.000Z","_content":"\n今天 大年初一，祝各位小伙伴们狗年旺旺啊，闲来也没事，只能钻研一下自己的分内之事，也就是作为一个前端码农的身份，得时刻保持学习的态度，温故而知新，每天都给自己一个小目标去完成，日积月累，所想达到的状态，都会有所见长。\n\n　　JS中的闭包，想必，做web开发的程序猿们都有一定的认识吧，不仅仅是js里有这种特性，而且弱语言类型的譬如python里也是有闭包这么一个强大的特性的，对于老司机们来说，闭包可真的是一个很好的东西，但是对于新入门的菜鸟们来说，闭包却是一个难以搞得清楚的特性，很多情况下，会用，但是却不能够深刻理解其中的含义，有些时候，出现问题了，也无法立刻找出问题的所在。下面我们来聊一聊js中的闭包相关的知识。\n\n\n\n## 一、什么是闭包？\n当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。  \n\n**简单的来说，所谓的闭包就是一个具有封闭的对外不公开的，包裹结构或空间。**\n\n## 二、为什么函数可以构成闭包？\n闭包就是一个具有封闭与包裹功能的结构，是为了实现具有私有访问空间的函数的。函数可以构成闭包。函数内部定义的数据函数外部无法访问，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函数可以构成闭包\n\n## 三、闭包有什么用（特性）\n闭包的作用，就是保存自己私有的变量，通过提供的接口(方法)给外部使用，但外部不能直接访问该变量。  \n当我们需要在模块中定义一些变量，并希望这些变量**一直保存在内存中**但又**不会“污染”全局**的变量时，就可以用闭包来定义这个模块。  \n**闭包的缺点**：闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。  \n**函数套函数就是闭包吗**？：不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。\n\n## 四、闭包的基本模型\n### 1、对象模式\n函数内部定义个一个对象，对象中绑定多个函数（方法），返回对象，利用对象的方法访问函数内的数据\n\n```javascript\n  function createPerson() {\n    var __name__ = \"\";\n    return {\n        getName: function () {\n            return __name__;\n        },\n        setName: function( value ) {\n            // 如果不姓张就报错\n            if ( value.charAt(0) === '张' ) {\n                __name__ = value;\n            } else {\n                throw new Error( '姓氏不对，不能取名' );\n            }\n        }\n    }\n}\nvar p = createPerson();\np.set_Name( '张三丰' );\nconsole.log( p.get_Name() );\np.set_Name( '张王富贵' );\nconsole.log( p.get_Name() );\n```\n\n### 2、函数模式\n函数内部定义一个新函数，返回新函数，用新函数获得函数内的数据\n```javascript\n  function foo() {\n    var num = Math.random();\n    function func() {\n        return mun;\n    }\n    return func;\n}\nvar f = foo();\n// f 可以直接访问这个 num\nvar res1 = f();\nvar res2 = f();\n```\n\n### 3、沙箱模式\n沙箱模式就是一个自调用函数，代码写到函数中一样会执行，但是不会与外界有任何的影响，比如jQuery\n```javascript\n  (function () {\n   var jQuery = function () { // 所有的算法 }\n   // .... // .... jQuery.each = function () {}\n   window.jQuery = window.$ = jQuery;\n})();\n$.each( ... )\n```\n\n## 五、闭包的缺点\n* 由于闭包会使得函数中的变量都保存在内存中，一方面会使内存消耗大，另一方面在ie下导致内存泄露，解决办法，在退出函数时，将不使用的局部变量全部删除（null掉吧）\n\n* 闭包会在父级外部，改变父函数内部内部变量的值；所以，如果你把父函数当作对象（object）使用，把闭包当做它的公用方法，把内部变量当做它的私有属性，这时你需要做的是，加倍小心，不要随便改变函数的值，否则你会后悔的。\n\n## 六、总结\n对于闭包的活学活用，一直需要通过不断地项目经验的累积，才能每次都能得出更为深刻的认识，想要成为一名优秀的前端工程师，既要知其然，也要知其所以然，才能让自己变得更加优秀。","source":"_posts/浅谈JS中的闭包.md","raw":"---\ntitle: 浅谈JS中的闭包\ndate: 2018-02-16 10:57:56\ntags:\n  - closure\n  - js特性\ncategories:\n  - js\n---\n\n今天 大年初一，祝各位小伙伴们狗年旺旺啊，闲来也没事，只能钻研一下自己的分内之事，也就是作为一个前端码农的身份，得时刻保持学习的态度，温故而知新，每天都给自己一个小目标去完成，日积月累，所想达到的状态，都会有所见长。\n\n　　JS中的闭包，想必，做web开发的程序猿们都有一定的认识吧，不仅仅是js里有这种特性，而且弱语言类型的譬如python里也是有闭包这么一个强大的特性的，对于老司机们来说，闭包可真的是一个很好的东西，但是对于新入门的菜鸟们来说，闭包却是一个难以搞得清楚的特性，很多情况下，会用，但是却不能够深刻理解其中的含义，有些时候，出现问题了，也无法立刻找出问题的所在。下面我们来聊一聊js中的闭包相关的知识。\n\n\n\n## 一、什么是闭包？\n当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。  \n\n**简单的来说，所谓的闭包就是一个具有封闭的对外不公开的，包裹结构或空间。**\n\n## 二、为什么函数可以构成闭包？\n闭包就是一个具有封闭与包裹功能的结构，是为了实现具有私有访问空间的函数的。函数可以构成闭包。函数内部定义的数据函数外部无法访问，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函数可以构成闭包\n\n## 三、闭包有什么用（特性）\n闭包的作用，就是保存自己私有的变量，通过提供的接口(方法)给外部使用，但外部不能直接访问该变量。  \n当我们需要在模块中定义一些变量，并希望这些变量**一直保存在内存中**但又**不会“污染”全局**的变量时，就可以用闭包来定义这个模块。  \n**闭包的缺点**：闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。  \n**函数套函数就是闭包吗**？：不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。\n\n## 四、闭包的基本模型\n### 1、对象模式\n函数内部定义个一个对象，对象中绑定多个函数（方法），返回对象，利用对象的方法访问函数内的数据\n\n```javascript\n  function createPerson() {\n    var __name__ = \"\";\n    return {\n        getName: function () {\n            return __name__;\n        },\n        setName: function( value ) {\n            // 如果不姓张就报错\n            if ( value.charAt(0) === '张' ) {\n                __name__ = value;\n            } else {\n                throw new Error( '姓氏不对，不能取名' );\n            }\n        }\n    }\n}\nvar p = createPerson();\np.set_Name( '张三丰' );\nconsole.log( p.get_Name() );\np.set_Name( '张王富贵' );\nconsole.log( p.get_Name() );\n```\n\n### 2、函数模式\n函数内部定义一个新函数，返回新函数，用新函数获得函数内的数据\n```javascript\n  function foo() {\n    var num = Math.random();\n    function func() {\n        return mun;\n    }\n    return func;\n}\nvar f = foo();\n// f 可以直接访问这个 num\nvar res1 = f();\nvar res2 = f();\n```\n\n### 3、沙箱模式\n沙箱模式就是一个自调用函数，代码写到函数中一样会执行，但是不会与外界有任何的影响，比如jQuery\n```javascript\n  (function () {\n   var jQuery = function () { // 所有的算法 }\n   // .... // .... jQuery.each = function () {}\n   window.jQuery = window.$ = jQuery;\n})();\n$.each( ... )\n```\n\n## 五、闭包的缺点\n* 由于闭包会使得函数中的变量都保存在内存中，一方面会使内存消耗大，另一方面在ie下导致内存泄露，解决办法，在退出函数时，将不使用的局部变量全部删除（null掉吧）\n\n* 闭包会在父级外部，改变父函数内部内部变量的值；所以，如果你把父函数当作对象（object）使用，把闭包当做它的公用方法，把内部变量当做它的私有属性，这时你需要做的是，加倍小心，不要随便改变函数的值，否则你会后悔的。\n\n## 六、总结\n对于闭包的活学活用，一直需要通过不断地项目经验的累积，才能每次都能得出更为深刻的认识，想要成为一名优秀的前端工程师，既要知其然，也要知其所以然，才能让自己变得更加优秀。","slug":"浅谈JS中的闭包","published":1,"updated":"2018-06-01T01:17:27.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmt003cmsvi1sjiaojj","content":"<p>今天 大年初一，祝各位小伙伴们狗年旺旺啊，闲来也没事，只能钻研一下自己的分内之事，也就是作为一个前端码农的身份，得时刻保持学习的态度，温故而知新，每天都给自己一个小目标去完成，日积月累，所想达到的状态，都会有所见长。</p>\n<p>　　JS中的闭包，想必，做web开发的程序猿们都有一定的认识吧，不仅仅是js里有这种特性，而且弱语言类型的譬如python里也是有闭包这么一个强大的特性的，对于老司机们来说，闭包可真的是一个很好的东西，但是对于新入门的菜鸟们来说，闭包却是一个难以搞得清楚的特性，很多情况下，会用，但是却不能够深刻理解其中的含义，有些时候，出现问题了，也无法立刻找出问题的所在。下面我们来聊一聊js中的闭包相关的知识。</p>\n<h2 id=\"一、什么是闭包？\"><a href=\"#一、什么是闭包？\" class=\"headerlink\" title=\"一、什么是闭包？\"></a>一、什么是闭包？</h2><p>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。  </p>\n<p><strong>简单的来说，所谓的闭包就是一个具有封闭的对外不公开的，包裹结构或空间。</strong></p>\n<h2 id=\"二、为什么函数可以构成闭包？\"><a href=\"#二、为什么函数可以构成闭包？\" class=\"headerlink\" title=\"二、为什么函数可以构成闭包？\"></a>二、为什么函数可以构成闭包？</h2><p>闭包就是一个具有封闭与包裹功能的结构，是为了实现具有私有访问空间的函数的。函数可以构成闭包。函数内部定义的数据函数外部无法访问，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函数可以构成闭包</p>\n<h2 id=\"三、闭包有什么用（特性）\"><a href=\"#三、闭包有什么用（特性）\" class=\"headerlink\" title=\"三、闭包有什么用（特性）\"></a>三、闭包有什么用（特性）</h2><p>闭包的作用，就是保存自己私有的变量，通过提供的接口(方法)给外部使用，但外部不能直接访问该变量。<br>当我们需要在模块中定义一些变量，并希望这些变量<strong>一直保存在内存中</strong>但又<strong>不会“污染”全局</strong>的变量时，就可以用闭包来定义这个模块。<br><strong>闭包的缺点</strong>：闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。<br><strong>函数套函数就是闭包吗</strong>？：不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。</p>\n<h2 id=\"四、闭包的基本模型\"><a href=\"#四、闭包的基本模型\" class=\"headerlink\" title=\"四、闭包的基本模型\"></a>四、闭包的基本模型</h2><h3 id=\"1、对象模式\"><a href=\"#1、对象模式\" class=\"headerlink\" title=\"1、对象模式\"></a>1、对象模式</h3><p>函数内部定义个一个对象，对象中绑定多个函数（方法），返回对象，利用对象的方法访问函数内的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __name__ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __name__;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        setName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果不姓张就报错</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( value.charAt(<span class=\"number\">0</span>) === <span class=\"string\">&#x27;张&#x27;</span> ) &#123;</span><br><span class=\"line\">                __name__ = value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( <span class=\"string\">&#x27;姓氏不对，不能取名&#x27;</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</span><br><span class=\"line\">p.set_Name( <span class=\"string\">&#x27;张三丰&#x27;</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.get_Name() );</span><br><span class=\"line\">p.set_Name( <span class=\"string\">&#x27;张王富贵&#x27;</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.get_Name() );</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、函数模式\"><a href=\"#2、函数模式\" class=\"headerlink\" title=\"2、函数模式\"></a>2、函数模式</h3><p>函数内部定义一个新函数，返回新函数，用新函数获得函数内的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mun;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo();</span><br><span class=\"line\"><span class=\"comment\">// f 可以直接访问这个 num</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res1 = f();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res2 = f();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、沙箱模式\"><a href=\"#3、沙箱模式\" class=\"headerlink\" title=\"3、沙箱模式\"></a>3、沙箱模式</h3><p>沙箱模式就是一个自调用函数，代码写到函数中一样会执行，但是不会与外界有任何的影响，比如jQuery</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 所有的算法 &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// .... // .... jQuery.each = function () &#123;&#125;</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">$.each( ... )</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、闭包的缺点\"><a href=\"#五、闭包的缺点\" class=\"headerlink\" title=\"五、闭包的缺点\"></a>五、闭包的缺点</h2><ul>\n<li><p>由于闭包会使得函数中的变量都保存在内存中，一方面会使内存消耗大，另一方面在ie下导致内存泄露，解决办法，在退出函数时，将不使用的局部变量全部删除（null掉吧）</p>\n</li>\n<li><p>闭包会在父级外部，改变父函数内部内部变量的值；所以，如果你把父函数当作对象（object）使用，把闭包当做它的公用方法，把内部变量当做它的私有属性，这时你需要做的是，加倍小心，不要随便改变函数的值，否则你会后悔的。</p>\n</li>\n</ul>\n<h2 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h2><p>对于闭包的活学活用，一直需要通过不断地项目经验的累积，才能每次都能得出更为深刻的认识，想要成为一名优秀的前端工程师，既要知其然，也要知其所以然，才能让自己变得更加优秀。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天 大年初一，祝各位小伙伴们狗年旺旺啊，闲来也没事，只能钻研一下自己的分内之事，也就是作为一个前端码农的身份，得时刻保持学习的态度，温故而知新，每天都给自己一个小目标去完成，日积月累，所想达到的状态，都会有所见长。</p>\n<p>　　JS中的闭包，想必，做web开发的程序猿们都有一定的认识吧，不仅仅是js里有这种特性，而且弱语言类型的譬如python里也是有闭包这么一个强大的特性的，对于老司机们来说，闭包可真的是一个很好的东西，但是对于新入门的菜鸟们来说，闭包却是一个难以搞得清楚的特性，很多情况下，会用，但是却不能够深刻理解其中的含义，有些时候，出现问题了，也无法立刻找出问题的所在。下面我们来聊一聊js中的闭包相关的知识。</p>\n<h2 id=\"一、什么是闭包？\"><a href=\"#一、什么是闭包？\" class=\"headerlink\" title=\"一、什么是闭包？\"></a>一、什么是闭包？</h2><p>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。  </p>\n<p><strong>简单的来说，所谓的闭包就是一个具有封闭的对外不公开的，包裹结构或空间。</strong></p>\n<h2 id=\"二、为什么函数可以构成闭包？\"><a href=\"#二、为什么函数可以构成闭包？\" class=\"headerlink\" title=\"二、为什么函数可以构成闭包？\"></a>二、为什么函数可以构成闭包？</h2><p>闭包就是一个具有封闭与包裹功能的结构，是为了实现具有私有访问空间的函数的。函数可以构成闭包。函数内部定义的数据函数外部无法访问，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函数可以构成闭包</p>\n<h2 id=\"三、闭包有什么用（特性）\"><a href=\"#三、闭包有什么用（特性）\" class=\"headerlink\" title=\"三、闭包有什么用（特性）\"></a>三、闭包有什么用（特性）</h2><p>闭包的作用，就是保存自己私有的变量，通过提供的接口(方法)给外部使用，但外部不能直接访问该变量。<br>当我们需要在模块中定义一些变量，并希望这些变量<strong>一直保存在内存中</strong>但又<strong>不会“污染”全局</strong>的变量时，就可以用闭包来定义这个模块。<br><strong>闭包的缺点</strong>：闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。<br><strong>函数套函数就是闭包吗</strong>？：不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。</p>\n<h2 id=\"四、闭包的基本模型\"><a href=\"#四、闭包的基本模型\" class=\"headerlink\" title=\"四、闭包的基本模型\"></a>四、闭包的基本模型</h2><h3 id=\"1、对象模式\"><a href=\"#1、对象模式\" class=\"headerlink\" title=\"1、对象模式\"></a>1、对象模式</h3><p>函数内部定义个一个对象，对象中绑定多个函数（方法），返回对象，利用对象的方法访问函数内的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __name__ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __name__;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        setName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果不姓张就报错</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( value.charAt(<span class=\"number\">0</span>) === <span class=\"string\">&#x27;张&#x27;</span> ) &#123;</span><br><span class=\"line\">                __name__ = value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( <span class=\"string\">&#x27;姓氏不对，不能取名&#x27;</span> );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</span><br><span class=\"line\">p.set_Name( <span class=\"string\">&#x27;张三丰&#x27;</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.get_Name() );</span><br><span class=\"line\">p.set_Name( <span class=\"string\">&#x27;张王富贵&#x27;</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.get_Name() );</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、函数模式\"><a href=\"#2、函数模式\" class=\"headerlink\" title=\"2、函数模式\"></a>2、函数模式</h3><p>函数内部定义一个新函数，返回新函数，用新函数获得函数内的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mun;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo();</span><br><span class=\"line\"><span class=\"comment\">// f 可以直接访问这个 num</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res1 = f();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res2 = f();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、沙箱模式\"><a href=\"#3、沙箱模式\" class=\"headerlink\" title=\"3、沙箱模式\"></a>3、沙箱模式</h3><p>沙箱模式就是一个自调用函数，代码写到函数中一样会执行，但是不会与外界有任何的影响，比如jQuery</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 所有的算法 &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// .... // .... jQuery.each = function () &#123;&#125;</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">$.each( ... )</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、闭包的缺点\"><a href=\"#五、闭包的缺点\" class=\"headerlink\" title=\"五、闭包的缺点\"></a>五、闭包的缺点</h2><ul>\n<li><p>由于闭包会使得函数中的变量都保存在内存中，一方面会使内存消耗大，另一方面在ie下导致内存泄露，解决办法，在退出函数时，将不使用的局部变量全部删除（null掉吧）</p>\n</li>\n<li><p>闭包会在父级外部，改变父函数内部内部变量的值；所以，如果你把父函数当作对象（object）使用，把闭包当做它的公用方法，把内部变量当做它的私有属性，这时你需要做的是，加倍小心，不要随便改变函数的值，否则你会后悔的。</p>\n</li>\n</ul>\n<h2 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h2><p>对于闭包的活学活用，一直需要通过不断地项目经验的累积，才能每次都能得出更为深刻的认识，想要成为一名优秀的前端工程师，既要知其然，也要知其所以然，才能让自己变得更加优秀。</p>\n"},{"title":"浏览器调用摄像头生成照片","date":"2019-08-25T13:31:21.000Z","_content":"\n> 最近项目里遇到这么一个功能，浏览器通过摄像头进行拍照，生成照片，与后端进行数据交互，从而完成预约和签到等功能。  // 18255111499\n\n> 首先，来看下，主要的页面元素\n\n```html\n\n<video class=\"video-wrap\" id=\"video\" width=\"1098\" height=\"514\" autoplay=\"\" playsinline muted></video>\n<canvas id=\"canvas\" class=\"canvas\" width=\"620\" height=\"514\"></canvas>\n```\n\n> 看了下界面元素，首先来解释下整个逻辑流程，首先，我们需要浏览器，调用摄像头，但是摄像头产生的视频流，我们需要通过video标签进行挂载，实时的传输，然后呢，我们如何去生成一张快照呢，我们需要使用到canvas绘制图片的相关api，点击拍照按钮的时候，绘制一张img图片，再经过相关的格式转换，生成file文件对象，来完成与后端的交互。\n\n> 下面来看下，具体的代码，摄像头调用相关的api，其实网上都能查到：\n\n```js\n//如果不支持摄像头功能\n      if (navigator.mediaDevices === undefined) {\n        alert('您的浏览器不支持开启摄像头功能哦！')\n        return\n      }\n      navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({\n            audio: true,\n            video: {\n              width: 1098,\n              height: 514\n            }\n          },\n          (stream) => {\n            var video = document.querySelector('video');\n            this.stream = stream\n            this.mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1]\n            video.srcObject = stream;\n            video.onloadedmetadata = function (e) {\n              video.play();\n            };\n          },\n          (err) => {\n            alert(\"The following error occurred: \" + err.name);\n          }\n        );\n      } else {\n        alert('您的浏览器不支持开启摄像头功能哦！')\n      }\n```\n\n> 我们通过对navigator.getUserMedia来获取本地摄像头的相关功能，并做了一个简单的兼容，然后呢，getUserMedia这个方法，接受三个参数，第一个是相关的配置，是个对象，里面可以配上声音和视频的一些基本配置，第二个参数，是成功的回调，第三个是出错的回调\n\n> 重点说一下，成功的回调，函数参数，为视频流，我们需要对这个流进行操作，通过getTracks方法，来获取到流的对象，以方便之后，进行拍摄功能的关闭工作，获取到video元素对象，给它的srcObject属性赋值stream，再在它的加载成功的回调中，调用video的play方法。这样，当你调用打开摄像头的时候，浏览器会询问你是否允许开启摄像功能，允许后，就可以看到，摄像头打开，画面并且出现了。\n\n> 接下来，看下生成快照的相关操作，先上代码：\n\n\n```js\n\n//点击拍照，生成图片\n    takePhoto() {\n      let myCanvas = document.querySelector('canvas')\n      let ctx = myCanvas.getContext(\"2d\")\n      ctx.drawImage(document.querySelector(\"#video\"), 240, 0, 620, 514, 0, 0, 620, 514);\n      this.imgFile = this.imageUrlToFile(myCanvas.toDataURL('image/png'), 'file')\n    },\n\n    //图片格式转换\n    imageUrlToFile(dataUrl, fileName) {\n      var arr = dataUrl.split(',')\n      var mime = arr[0].match(/:(.*?);/)[1]\n      var suffix = mime.split('/')[1]\n      var bstr = atob(arr[1])\n      var n = bstr.length\n      var u8arr = new Uint8Array(n)\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      return new File([u8arr], `${fileName}.${suffix}`, {\n        type: mime\n      })\n\n    },\n\n```\n\n> takePhoto是点击拍照后的调用方法，首先，我们获取到canvas画布，获取到绘制对象ctx，再通过drawImage这个方法，来对video标签，生成一张快照，再通过我们封装的一个，将canvas生成的Base64图片转换成file对象的方法，来生成一个file文件对象\n\n> 之后的事情就简单了，直接将这个file对象，传给后端，就可以了\n\n> 这里有个问题，就是本地开发localhost去访问的，是可以调用摄像头的，但是最新的chrome，如果通过ip去访问，就会被限制，这里需要对http进行升级，成为https了，就可以调用摄像头功能了。\n","source":"_posts/浏览器调用摄像头生成照片.md","raw":"---\ntitle: 浏览器调用摄像头生成照片\ndate: 2019-08-25 21:31:21\ntags:\n  - chrome\n  - navigator\ncategories:\n  - chrome\n  - navigator\n---\n\n> 最近项目里遇到这么一个功能，浏览器通过摄像头进行拍照，生成照片，与后端进行数据交互，从而完成预约和签到等功能。  // 18255111499\n\n> 首先，来看下，主要的页面元素\n\n```html\n\n<video class=\"video-wrap\" id=\"video\" width=\"1098\" height=\"514\" autoplay=\"\" playsinline muted></video>\n<canvas id=\"canvas\" class=\"canvas\" width=\"620\" height=\"514\"></canvas>\n```\n\n> 看了下界面元素，首先来解释下整个逻辑流程，首先，我们需要浏览器，调用摄像头，但是摄像头产生的视频流，我们需要通过video标签进行挂载，实时的传输，然后呢，我们如何去生成一张快照呢，我们需要使用到canvas绘制图片的相关api，点击拍照按钮的时候，绘制一张img图片，再经过相关的格式转换，生成file文件对象，来完成与后端的交互。\n\n> 下面来看下，具体的代码，摄像头调用相关的api，其实网上都能查到：\n\n```js\n//如果不支持摄像头功能\n      if (navigator.mediaDevices === undefined) {\n        alert('您的浏览器不支持开启摄像头功能哦！')\n        return\n      }\n      navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({\n            audio: true,\n            video: {\n              width: 1098,\n              height: 514\n            }\n          },\n          (stream) => {\n            var video = document.querySelector('video');\n            this.stream = stream\n            this.mediaStreamTrack = typeof stream.stop === 'function' ? stream : stream.getTracks()[1]\n            video.srcObject = stream;\n            video.onloadedmetadata = function (e) {\n              video.play();\n            };\n          },\n          (err) => {\n            alert(\"The following error occurred: \" + err.name);\n          }\n        );\n      } else {\n        alert('您的浏览器不支持开启摄像头功能哦！')\n      }\n```\n\n> 我们通过对navigator.getUserMedia来获取本地摄像头的相关功能，并做了一个简单的兼容，然后呢，getUserMedia这个方法，接受三个参数，第一个是相关的配置，是个对象，里面可以配上声音和视频的一些基本配置，第二个参数，是成功的回调，第三个是出错的回调\n\n> 重点说一下，成功的回调，函数参数，为视频流，我们需要对这个流进行操作，通过getTracks方法，来获取到流的对象，以方便之后，进行拍摄功能的关闭工作，获取到video元素对象，给它的srcObject属性赋值stream，再在它的加载成功的回调中，调用video的play方法。这样，当你调用打开摄像头的时候，浏览器会询问你是否允许开启摄像功能，允许后，就可以看到，摄像头打开，画面并且出现了。\n\n> 接下来，看下生成快照的相关操作，先上代码：\n\n\n```js\n\n//点击拍照，生成图片\n    takePhoto() {\n      let myCanvas = document.querySelector('canvas')\n      let ctx = myCanvas.getContext(\"2d\")\n      ctx.drawImage(document.querySelector(\"#video\"), 240, 0, 620, 514, 0, 0, 620, 514);\n      this.imgFile = this.imageUrlToFile(myCanvas.toDataURL('image/png'), 'file')\n    },\n\n    //图片格式转换\n    imageUrlToFile(dataUrl, fileName) {\n      var arr = dataUrl.split(',')\n      var mime = arr[0].match(/:(.*?);/)[1]\n      var suffix = mime.split('/')[1]\n      var bstr = atob(arr[1])\n      var n = bstr.length\n      var u8arr = new Uint8Array(n)\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      return new File([u8arr], `${fileName}.${suffix}`, {\n        type: mime\n      })\n\n    },\n\n```\n\n> takePhoto是点击拍照后的调用方法，首先，我们获取到canvas画布，获取到绘制对象ctx，再通过drawImage这个方法，来对video标签，生成一张快照，再通过我们封装的一个，将canvas生成的Base64图片转换成file对象的方法，来生成一个file文件对象\n\n> 之后的事情就简单了，直接将这个file对象，传给后端，就可以了\n\n> 这里有个问题，就是本地开发localhost去访问的，是可以调用摄像头的，但是最新的chrome，如果通过ip去访问，就会被限制，这里需要对http进行升级，成为https了，就可以调用摄像头功能了。\n","slug":"浏览器调用摄像头生成照片","published":1,"updated":"2019-08-25T13:33:19.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmu003hmsvi4ka40yhr","content":"<blockquote>\n<p>最近项目里遇到这么一个功能，浏览器通过摄像头进行拍照，生成照片，与后端进行数据交互，从而完成预约和签到等功能。  // 18255111499</p>\n</blockquote>\n<blockquote>\n<p>首先，来看下，主要的页面元素</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;video-wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;1098&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;514&quot;</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">playsinline</span> <span class=\"attr\">muted</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;620&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;514&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看了下界面元素，首先来解释下整个逻辑流程，首先，我们需要浏览器，调用摄像头，但是摄像头产生的视频流，我们需要通过video标签进行挂载，实时的传输，然后呢，我们如何去生成一张快照呢，我们需要使用到canvas绘制图片的相关api，点击拍照按钮的时候，绘制一张img图片，再经过相关的格式转换，生成file文件对象，来完成与后端的交互。</p>\n</blockquote>\n<blockquote>\n<p>下面来看下，具体的代码，摄像头调用相关的api，其实网上都能查到：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果不支持摄像头功能</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (navigator.mediaDevices === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;您的浏览器不支持开启摄像头功能哦！&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      navigator.getUserMedia = navigator.getUserMedia ||</span><br><span class=\"line\">        navigator.webkitGetUserMedia ||</span><br><span class=\"line\">        navigator.mozGetUserMedia;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (navigator.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.getUserMedia(&#123;</span><br><span class=\"line\">            audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            video: &#123;</span><br><span class=\"line\">              width: <span class=\"number\">1098</span>,</span><br><span class=\"line\">              height: <span class=\"number\">514</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (stream) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;video&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.stream = stream</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mediaStreamTrack = <span class=\"keyword\">typeof</span> stream.stop === <span class=\"string\">&#x27;function&#x27;</span> ? stream : stream.getTracks()[<span class=\"number\">1</span>]</span><br><span class=\"line\">            video.srcObject = stream;</span><br><span class=\"line\">            video.onloadedmetadata = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">              video.play();</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (err) =&gt; &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;The following error occurred: &quot;</span> + err.name);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;您的浏览器不支持开启摄像头功能哦！&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过对navigator.getUserMedia来获取本地摄像头的相关功能，并做了一个简单的兼容，然后呢，getUserMedia这个方法，接受三个参数，第一个是相关的配置，是个对象，里面可以配上声音和视频的一些基本配置，第二个参数，是成功的回调，第三个是出错的回调</p>\n</blockquote>\n<blockquote>\n<p>重点说一下，成功的回调，函数参数，为视频流，我们需要对这个流进行操作，通过getTracks方法，来获取到流的对象，以方便之后，进行拍摄功能的关闭工作，获取到video元素对象，给它的srcObject属性赋值stream，再在它的加载成功的回调中，调用video的play方法。这样，当你调用打开摄像头的时候，浏览器会询问你是否允许开启摄像功能，允许后，就可以看到，摄像头打开，画面并且出现了。</p>\n</blockquote>\n<blockquote>\n<p>接下来，看下生成快照的相关操作，先上代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击拍照，生成图片</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">takePhoto</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ctx = myCanvas.getContext(<span class=\"string\">&quot;2d&quot;</span>)</span><br><span class=\"line\">      ctx.drawImage(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#video&quot;</span>), <span class=\"number\">240</span>, <span class=\"number\">0</span>, <span class=\"number\">620</span>, <span class=\"number\">514</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">620</span>, <span class=\"number\">514</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.imgFile = <span class=\"built_in\">this</span>.imageUrlToFile(myCanvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>), <span class=\"string\">&#x27;file&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图片格式转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">imageUrlToFile</span>(<span class=\"params\">dataUrl, fileName</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arr = dataUrl.split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">var</span> suffix = mime.split(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bstr = atob(arr[<span class=\"number\">1</span>])</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = bstr.length</span><br><span class=\"line\">      <span class=\"keyword\">var</span> u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n)</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File([u8arr], <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>.<span class=\"subst\">$&#123;suffix&#125;</span>`</span>, &#123;</span><br><span class=\"line\">        type: mime</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>takePhoto是点击拍照后的调用方法，首先，我们获取到canvas画布，获取到绘制对象ctx，再通过drawImage这个方法，来对video标签，生成一张快照，再通过我们封装的一个，将canvas生成的Base64图片转换成file对象的方法，来生成一个file文件对象</p>\n</blockquote>\n<blockquote>\n<p>之后的事情就简单了，直接将这个file对象，传给后端，就可以了</p>\n</blockquote>\n<blockquote>\n<p>这里有个问题，就是本地开发localhost去访问的，是可以调用摄像头的，但是最新的chrome，如果通过ip去访问，就会被限制，这里需要对http进行升级，成为https了，就可以调用摄像头功能了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>最近项目里遇到这么一个功能，浏览器通过摄像头进行拍照，生成照片，与后端进行数据交互，从而完成预约和签到等功能。  // 18255111499</p>\n</blockquote>\n<blockquote>\n<p>首先，来看下，主要的页面元素</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;video-wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;1098&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;514&quot;</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">playsinline</span> <span class=\"attr\">muted</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;620&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;514&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看了下界面元素，首先来解释下整个逻辑流程，首先，我们需要浏览器，调用摄像头，但是摄像头产生的视频流，我们需要通过video标签进行挂载，实时的传输，然后呢，我们如何去生成一张快照呢，我们需要使用到canvas绘制图片的相关api，点击拍照按钮的时候，绘制一张img图片，再经过相关的格式转换，生成file文件对象，来完成与后端的交互。</p>\n</blockquote>\n<blockquote>\n<p>下面来看下，具体的代码，摄像头调用相关的api，其实网上都能查到：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果不支持摄像头功能</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (navigator.mediaDevices === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;您的浏览器不支持开启摄像头功能哦！&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      navigator.getUserMedia = navigator.getUserMedia ||</span><br><span class=\"line\">        navigator.webkitGetUserMedia ||</span><br><span class=\"line\">        navigator.mozGetUserMedia;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (navigator.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.getUserMedia(&#123;</span><br><span class=\"line\">            audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            video: &#123;</span><br><span class=\"line\">              width: <span class=\"number\">1098</span>,</span><br><span class=\"line\">              height: <span class=\"number\">514</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (stream) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;video&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.stream = stream</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mediaStreamTrack = <span class=\"keyword\">typeof</span> stream.stop === <span class=\"string\">&#x27;function&#x27;</span> ? stream : stream.getTracks()[<span class=\"number\">1</span>]</span><br><span class=\"line\">            video.srcObject = stream;</span><br><span class=\"line\">            video.onloadedmetadata = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">              video.play();</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (err) =&gt; &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;The following error occurred: &quot;</span> + err.name);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;您的浏览器不支持开启摄像头功能哦！&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们通过对navigator.getUserMedia来获取本地摄像头的相关功能，并做了一个简单的兼容，然后呢，getUserMedia这个方法，接受三个参数，第一个是相关的配置，是个对象，里面可以配上声音和视频的一些基本配置，第二个参数，是成功的回调，第三个是出错的回调</p>\n</blockquote>\n<blockquote>\n<p>重点说一下，成功的回调，函数参数，为视频流，我们需要对这个流进行操作，通过getTracks方法，来获取到流的对象，以方便之后，进行拍摄功能的关闭工作，获取到video元素对象，给它的srcObject属性赋值stream，再在它的加载成功的回调中，调用video的play方法。这样，当你调用打开摄像头的时候，浏览器会询问你是否允许开启摄像功能，允许后，就可以看到，摄像头打开，画面并且出现了。</p>\n</blockquote>\n<blockquote>\n<p>接下来，看下生成快照的相关操作，先上代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击拍照，生成图片</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">takePhoto</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ctx = myCanvas.getContext(<span class=\"string\">&quot;2d&quot;</span>)</span><br><span class=\"line\">      ctx.drawImage(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#video&quot;</span>), <span class=\"number\">240</span>, <span class=\"number\">0</span>, <span class=\"number\">620</span>, <span class=\"number\">514</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">620</span>, <span class=\"number\">514</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.imgFile = <span class=\"built_in\">this</span>.imageUrlToFile(myCanvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>), <span class=\"string\">&#x27;file&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图片格式转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">imageUrlToFile</span>(<span class=\"params\">dataUrl, fileName</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arr = dataUrl.split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">var</span> suffix = mime.split(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">var</span> bstr = atob(arr[<span class=\"number\">1</span>])</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = bstr.length</span><br><span class=\"line\">      <span class=\"keyword\">var</span> u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n)</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File([u8arr], <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>.<span class=\"subst\">$&#123;suffix&#125;</span>`</span>, &#123;</span><br><span class=\"line\">        type: mime</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>takePhoto是点击拍照后的调用方法，首先，我们获取到canvas画布，获取到绘制对象ctx，再通过drawImage这个方法，来对video标签，生成一张快照，再通过我们封装的一个，将canvas生成的Base64图片转换成file对象的方法，来生成一个file文件对象</p>\n</blockquote>\n<blockquote>\n<p>之后的事情就简单了，直接将这个file对象，传给后端，就可以了</p>\n</blockquote>\n<blockquote>\n<p>这里有个问题，就是本地开发localhost去访问的，是可以调用摄像头的，但是最新的chrome，如果通过ip去访问，就会被限制，这里需要对http进行升级，成为https了，就可以调用摄像头功能了。</p>\n</blockquote>\n"},{"title":"百度地图信息窗口如何添加事件","date":"2018-06-20T13:51:26.000Z","_content":"\n\n今天在使用百度地图的API开发项目的时候，有一个需求，就是在信息弹窗里有个图片展示以及信息展示的tab切换，大概结构如下：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/1.png?raw=true)\n\n如上图所示，弹窗内部有个可以点击切换的tab栏，当我们使用正常的dom事件绑定去开发的时候，会发现点击根本就没有起作用，其中的原因，猜了一下，一定是出于安全问题还是什么其他的问题，地图内置的事件系统，阻止了自定义事件绑定的冒泡，进而阻止了相关事件的生效，禁止用户直接去进行dom事件绑定操作。\n\n那么事情原因弄清楚了，该去怎么解决呢，其实我也是首先网上找答案，找到的第一个解决方案，就是[这里](https://blog.csdn.net/qq_23039185/article/details/53536705)\n\n让我们去引入一个第三方的开源库，进而完成对自定义事件的绑定生效，但实际上，我在引入之后，页面一直正在加载，后来发现，原来是天朝连接Github速度太慢，那这怎么行呢，必须要有其他的方式，才能完成这样的需求啊，因此我接着找解决方案，那么在无意中打开的[链接](https://www.cnblogs.com/LYunF/p/3761008.html)里，我无意中发现了这样的一个引入：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/2.png?raw=true)\n\n能明显看到，上图的引入，文件名字很像第一个解决方案里面的那个全局变量名，但到底如何呢，我把原链接打开了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/3.png?raw=true)\n\n如上图红框所示，果然一个全局变量BMapLib.EventWrapper是被暴露出来的，但是，到底是不是我们所需要的那样的使用方式，到底能不能实现呢？废话不多说，马上使用,先试试再说：\n首先，引入相关js：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/4.png?raw=true)\n\n然后，在创建marker标注对象之后，创建信息窗口对象的引用infoWindow，监听infoWindow的open事件，进行相关事件的绑定，如下图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/5.png?raw=true)\n\n最后，打开浏览器刷新，可以看到，tab栏顺利切换，console顺利打印，事件绑定已经生效：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/6.png?raw=true)\n\n其实后来通过相关查阅，在百度地图的API里，开源库中，存在一个事件包装器的类库，详情[戳这里](http://api.map.baidu.com/library/EventWrapper/1.2/docs/help.html)，上面所提供的解决方案，在链接里均有参照。\n\n","source":"_posts/百度地图信息窗口如何添加事件.md","raw":"---\ntitle: 百度地图信息窗口如何添加事件\ndate: 2018-06-20 21:51:26\ntags:\n  - js \n  - 百度地图API\ncategories:\n  - js\n---\n\n\n今天在使用百度地图的API开发项目的时候，有一个需求，就是在信息弹窗里有个图片展示以及信息展示的tab切换，大概结构如下：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/1.png?raw=true)\n\n如上图所示，弹窗内部有个可以点击切换的tab栏，当我们使用正常的dom事件绑定去开发的时候，会发现点击根本就没有起作用，其中的原因，猜了一下，一定是出于安全问题还是什么其他的问题，地图内置的事件系统，阻止了自定义事件绑定的冒泡，进而阻止了相关事件的生效，禁止用户直接去进行dom事件绑定操作。\n\n那么事情原因弄清楚了，该去怎么解决呢，其实我也是首先网上找答案，找到的第一个解决方案，就是[这里](https://blog.csdn.net/qq_23039185/article/details/53536705)\n\n让我们去引入一个第三方的开源库，进而完成对自定义事件的绑定生效，但实际上，我在引入之后，页面一直正在加载，后来发现，原来是天朝连接Github速度太慢，那这怎么行呢，必须要有其他的方式，才能完成这样的需求啊，因此我接着找解决方案，那么在无意中打开的[链接](https://www.cnblogs.com/LYunF/p/3761008.html)里，我无意中发现了这样的一个引入：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/2.png?raw=true)\n\n能明显看到，上图的引入，文件名字很像第一个解决方案里面的那个全局变量名，但到底如何呢，我把原链接打开了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/3.png?raw=true)\n\n如上图红框所示，果然一个全局变量BMapLib.EventWrapper是被暴露出来的，但是，到底是不是我们所需要的那样的使用方式，到底能不能实现呢？废话不多说，马上使用,先试试再说：\n首先，引入相关js：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/4.png?raw=true)\n\n然后，在创建marker标注对象之后，创建信息窗口对象的引用infoWindow，监听infoWindow的open事件，进行相关事件的绑定，如下图：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/5.png?raw=true)\n\n最后，打开浏览器刷新，可以看到，tab栏顺利切换，console顺利打印，事件绑定已经生效：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180620/6.png?raw=true)\n\n其实后来通过相关查阅，在百度地图的API里，开源库中，存在一个事件包装器的类库，详情[戳这里](http://api.map.baidu.com/library/EventWrapper/1.2/docs/help.html)，上面所提供的解决方案，在链接里均有参照。\n\n","slug":"百度地图信息窗口如何添加事件","published":1,"updated":"2018-06-20T13:57:19.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmv003kmsvi58lr7l5l","content":"<p>今天在使用百度地图的API开发项目的时候，有一个需求，就是在信息弹窗里有个图片展示以及信息展示的tab切换，大概结构如下：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/1.png?raw=true\"></p>\n<p>如上图所示，弹窗内部有个可以点击切换的tab栏，当我们使用正常的dom事件绑定去开发的时候，会发现点击根本就没有起作用，其中的原因，猜了一下，一定是出于安全问题还是什么其他的问题，地图内置的事件系统，阻止了自定义事件绑定的冒泡，进而阻止了相关事件的生效，禁止用户直接去进行dom事件绑定操作。</p>\n<p>那么事情原因弄清楚了，该去怎么解决呢，其实我也是首先网上找答案，找到的第一个解决方案，就是<a href=\"https://blog.csdn.net/qq_23039185/article/details/53536705\">这里</a></p>\n<p>让我们去引入一个第三方的开源库，进而完成对自定义事件的绑定生效，但实际上，我在引入之后，页面一直正在加载，后来发现，原来是天朝连接Github速度太慢，那这怎么行呢，必须要有其他的方式，才能完成这样的需求啊，因此我接着找解决方案，那么在无意中打开的<a href=\"https://www.cnblogs.com/LYunF/p/3761008.html\">链接</a>里，我无意中发现了这样的一个引入：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/2.png?raw=true\"></p>\n<p>能明显看到，上图的引入，文件名字很像第一个解决方案里面的那个全局变量名，但到底如何呢，我把原链接打开了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/3.png?raw=true\"></p>\n<p>如上图红框所示，果然一个全局变量BMapLib.EventWrapper是被暴露出来的，但是，到底是不是我们所需要的那样的使用方式，到底能不能实现呢？废话不多说，马上使用,先试试再说：<br>首先，引入相关js：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/4.png?raw=true\"></p>\n<p>然后，在创建marker标注对象之后，创建信息窗口对象的引用infoWindow，监听infoWindow的open事件，进行相关事件的绑定，如下图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/5.png?raw=true\"></p>\n<p>最后，打开浏览器刷新，可以看到，tab栏顺利切换，console顺利打印，事件绑定已经生效：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/6.png?raw=true\"></p>\n<p>其实后来通过相关查阅，在百度地图的API里，开源库中，存在一个事件包装器的类库，详情<a href=\"http://api.map.baidu.com/library/EventWrapper/1.2/docs/help.html\">戳这里</a>，上面所提供的解决方案，在链接里均有参照。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在使用百度地图的API开发项目的时候，有一个需求，就是在信息弹窗里有个图片展示以及信息展示的tab切换，大概结构如下：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/1.png?raw=true\"></p>\n<p>如上图所示，弹窗内部有个可以点击切换的tab栏，当我们使用正常的dom事件绑定去开发的时候，会发现点击根本就没有起作用，其中的原因，猜了一下，一定是出于安全问题还是什么其他的问题，地图内置的事件系统，阻止了自定义事件绑定的冒泡，进而阻止了相关事件的生效，禁止用户直接去进行dom事件绑定操作。</p>\n<p>那么事情原因弄清楚了，该去怎么解决呢，其实我也是首先网上找答案，找到的第一个解决方案，就是<a href=\"https://blog.csdn.net/qq_23039185/article/details/53536705\">这里</a></p>\n<p>让我们去引入一个第三方的开源库，进而完成对自定义事件的绑定生效，但实际上，我在引入之后，页面一直正在加载，后来发现，原来是天朝连接Github速度太慢，那这怎么行呢，必须要有其他的方式，才能完成这样的需求啊，因此我接着找解决方案，那么在无意中打开的<a href=\"https://www.cnblogs.com/LYunF/p/3761008.html\">链接</a>里，我无意中发现了这样的一个引入：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/2.png?raw=true\"></p>\n<p>能明显看到，上图的引入，文件名字很像第一个解决方案里面的那个全局变量名，但到底如何呢，我把原链接打开了：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/3.png?raw=true\"></p>\n<p>如上图红框所示，果然一个全局变量BMapLib.EventWrapper是被暴露出来的，但是，到底是不是我们所需要的那样的使用方式，到底能不能实现呢？废话不多说，马上使用,先试试再说：<br>首先，引入相关js：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/4.png?raw=true\"></p>\n<p>然后，在创建marker标注对象之后，创建信息窗口对象的引用infoWindow，监听infoWindow的open事件，进行相关事件的绑定，如下图：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/5.png?raw=true\"></p>\n<p>最后，打开浏览器刷新，可以看到，tab栏顺利切换，console顺利打印，事件绑定已经生效：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180620/6.png?raw=true\"></p>\n<p>其实后来通过相关查阅，在百度地图的API里，开源库中，存在一个事件包装器的类库，详情<a href=\"http://api.map.baidu.com/library/EventWrapper/1.2/docs/help.html\">戳这里</a>，上面所提供的解决方案，在链接里均有参照。</p>\n"},{"title":"百度地图在移动端页面点击事件失效的解决","date":"2018-08-09T13:42:52.000Z","_content":"\n最近在开发一个移动端混合APP项目的时候，遇到了一个移动端才会出现的问题，就是百度地图覆盖物的点击事件，在移动端会绑定失效，也就是下面代码，会在移动端页面失效：\n\n```js\noverlay.addEventListener(\"click\",function(e){\n  console.log(e)\n})\n```\n\n简单上网查了一下原因，大概是这样的，覆盖物的点击事件，之所以会在移动端失效，而PC端正常，是因为移动端百度地图默认是阻止click事件的，因此，监听click事件失效，那么，其实有一种办法，可以起到让click生效的效果，就是使用如下的代码，禁止掉地图的拖动事件：\n\n```js\nmap.disableDragging()\n```\n但是，这么做特别影响用户的交互，特别是移动端地图展示，少不了用户的手势操作，怎么能禁止掉地图的拖动呢，更别说手势缩放了，所以这个解决方案直接pass。\n\n细想一下，其实click事件，在移动端，根本没有存在的必要，还有300ms的延迟（这个是个旧梗了，目前不存在这个问题了其实），移动端有自己的手势事件，可以想一下，touchstart就可以很好的替代click事件啊，因此，使用如下的代码替换：\n\n```js\noverlay.addEventListener(\"touchstart\",function(e){\n  console.log(e)\n})\n```\n经过测试验证，确实是可以生效的，响应效果也特别迅速。看上去，这个问题似乎已经得到了解决。。。但是，完美么，我并不这么认为。\n\n因为之前写过一篇pc端百度地图覆盖物拖动事件触发click的bug，在移动端肯定也是同样的，假如，用户是在覆盖物上面触发地图的拖动事件呢？结果很显然，touchstart事件会被触发！那么，这就是bug，至少用户体验上来说，非常不好，那么有解决办法没？答案是肯定的。\n\n如同之前在pc端解决这种问题的方式，移动端也有一个区别用户是点击还是拖动的方式，就是利用touchstart和touchend事件对象的screenX、screenY对象，判断一下，是否有移动的距离，如果超过一个固定值，就判断为是拖动，否则，则是点击，便触发相应的点击事件：\n\n```js\nvar x1,y1,x2,y2;\noverlay.addEventListener(\"touchstart\",function(e){\n  x1=e.changedTouches[0].screenX\n  y1=e.changedTouches[0].screenY\n})\noverlay.addEventListener(\"touchend\",function(e){\n  x2=e.changedTouches[0].screenX\n  y2=e.changedTouches[0].screenY\n\n  var d=Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n\n  if(d<7){\n    //做click事件该做的事情。。。\n  }\n})\n\n```\n\n关于上面代码，有个问题需要提出下，就是关于为什么使用changedTouches而不是touches呢？\n\n* touches: 当前屏幕上所有触摸点的列表\n* changedTouches: 涉及当前(引发)事件的触摸点的列表\n\n如果使用touches，那么在touchend事件里，touches对象是空的，取不到对应的触摸点信息，那么只有在changedTouches里，也就是涉及当前事件的触摸点列表，才能获取到触摸结束之前那一刻触摸点的信息。\n\n\n解决的大概思路就是这样，第一次发现这样的坑，以后就会更加注意。\n\n\n\n","source":"_posts/百度地图在移动端页面点击事件失效的解决.md","raw":"---\ntitle: 百度地图在移动端页面点击事件失效的解决\ndate: 2018-08-09 21:42:52\ntags:\n  - js\ncategories:\n  - js\n---\n\n最近在开发一个移动端混合APP项目的时候，遇到了一个移动端才会出现的问题，就是百度地图覆盖物的点击事件，在移动端会绑定失效，也就是下面代码，会在移动端页面失效：\n\n```js\noverlay.addEventListener(\"click\",function(e){\n  console.log(e)\n})\n```\n\n简单上网查了一下原因，大概是这样的，覆盖物的点击事件，之所以会在移动端失效，而PC端正常，是因为移动端百度地图默认是阻止click事件的，因此，监听click事件失效，那么，其实有一种办法，可以起到让click生效的效果，就是使用如下的代码，禁止掉地图的拖动事件：\n\n```js\nmap.disableDragging()\n```\n但是，这么做特别影响用户的交互，特别是移动端地图展示，少不了用户的手势操作，怎么能禁止掉地图的拖动呢，更别说手势缩放了，所以这个解决方案直接pass。\n\n细想一下，其实click事件，在移动端，根本没有存在的必要，还有300ms的延迟（这个是个旧梗了，目前不存在这个问题了其实），移动端有自己的手势事件，可以想一下，touchstart就可以很好的替代click事件啊，因此，使用如下的代码替换：\n\n```js\noverlay.addEventListener(\"touchstart\",function(e){\n  console.log(e)\n})\n```\n经过测试验证，确实是可以生效的，响应效果也特别迅速。看上去，这个问题似乎已经得到了解决。。。但是，完美么，我并不这么认为。\n\n因为之前写过一篇pc端百度地图覆盖物拖动事件触发click的bug，在移动端肯定也是同样的，假如，用户是在覆盖物上面触发地图的拖动事件呢？结果很显然，touchstart事件会被触发！那么，这就是bug，至少用户体验上来说，非常不好，那么有解决办法没？答案是肯定的。\n\n如同之前在pc端解决这种问题的方式，移动端也有一个区别用户是点击还是拖动的方式，就是利用touchstart和touchend事件对象的screenX、screenY对象，判断一下，是否有移动的距离，如果超过一个固定值，就判断为是拖动，否则，则是点击，便触发相应的点击事件：\n\n```js\nvar x1,y1,x2,y2;\noverlay.addEventListener(\"touchstart\",function(e){\n  x1=e.changedTouches[0].screenX\n  y1=e.changedTouches[0].screenY\n})\noverlay.addEventListener(\"touchend\",function(e){\n  x2=e.changedTouches[0].screenX\n  y2=e.changedTouches[0].screenY\n\n  var d=Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n\n  if(d<7){\n    //做click事件该做的事情。。。\n  }\n})\n\n```\n\n关于上面代码，有个问题需要提出下，就是关于为什么使用changedTouches而不是touches呢？\n\n* touches: 当前屏幕上所有触摸点的列表\n* changedTouches: 涉及当前(引发)事件的触摸点的列表\n\n如果使用touches，那么在touchend事件里，touches对象是空的，取不到对应的触摸点信息，那么只有在changedTouches里，也就是涉及当前事件的触摸点列表，才能获取到触摸结束之前那一刻触摸点的信息。\n\n\n解决的大概思路就是这样，第一次发现这样的坑，以后就会更加注意。\n\n\n\n","slug":"百度地图在移动端页面点击事件失效的解决","published":1,"updated":"2018-08-12T13:27:16.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmw003pmsvi4c289qlb","content":"<p>最近在开发一个移动端混合APP项目的时候，遇到了一个移动端才会出现的问题，就是百度地图覆盖物的点击事件，在移动端会绑定失效，也就是下面代码，会在移动端页面失效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>简单上网查了一下原因，大概是这样的，覆盖物的点击事件，之所以会在移动端失效，而PC端正常，是因为移动端百度地图默认是阻止click事件的，因此，监听click事件失效，那么，其实有一种办法，可以起到让click生效的效果，就是使用如下的代码，禁止掉地图的拖动事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.disableDragging()</span><br></pre></td></tr></table></figure>\n<p>但是，这么做特别影响用户的交互，特别是移动端地图展示，少不了用户的手势操作，怎么能禁止掉地图的拖动呢，更别说手势缩放了，所以这个解决方案直接pass。</p>\n<p>细想一下，其实click事件，在移动端，根本没有存在的必要，还有300ms的延迟（这个是个旧梗了，目前不存在这个问题了其实），移动端有自己的手势事件，可以想一下，touchstart就可以很好的替代click事件啊，因此，使用如下的代码替换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchstart&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>经过测试验证，确实是可以生效的，响应效果也特别迅速。看上去，这个问题似乎已经得到了解决。。。但是，完美么，我并不这么认为。</p>\n<p>因为之前写过一篇pc端百度地图覆盖物拖动事件触发click的bug，在移动端肯定也是同样的，假如，用户是在覆盖物上面触发地图的拖动事件呢？结果很显然，touchstart事件会被触发！那么，这就是bug，至少用户体验上来说，非常不好，那么有解决办法没？答案是肯定的。</p>\n<p>如同之前在pc端解决这种问题的方式，移动端也有一个区别用户是点击还是拖动的方式，就是利用touchstart和touchend事件对象的screenX、screenY对象，判断一下，是否有移动的距离，如果超过一个固定值，就判断为是拖动，否则，则是点击，便触发相应的点击事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1,y1,x2,y2;</span><br><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchstart&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  x1=e.changedTouches[<span class=\"number\">0</span>].screenX</span><br><span class=\"line\">  y1=e.changedTouches[<span class=\"number\">0</span>].screenY</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchend&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  x2=e.changedTouches[<span class=\"number\">0</span>].screenX</span><br><span class=\"line\">  y2=e.changedTouches[<span class=\"number\">0</span>].screenY</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d=<span class=\"built_in\">Math</span>.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">7</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做click事件该做的事情。。。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关于上面代码，有个问题需要提出下，就是关于为什么使用changedTouches而不是touches呢？</p>\n<ul>\n<li>touches: 当前屏幕上所有触摸点的列表</li>\n<li>changedTouches: 涉及当前(引发)事件的触摸点的列表</li>\n</ul>\n<p>如果使用touches，那么在touchend事件里，touches对象是空的，取不到对应的触摸点信息，那么只有在changedTouches里，也就是涉及当前事件的触摸点列表，才能获取到触摸结束之前那一刻触摸点的信息。</p>\n<p>解决的大概思路就是这样，第一次发现这样的坑，以后就会更加注意。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在开发一个移动端混合APP项目的时候，遇到了一个移动端才会出现的问题，就是百度地图覆盖物的点击事件，在移动端会绑定失效，也就是下面代码，会在移动端页面失效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>简单上网查了一下原因，大概是这样的，覆盖物的点击事件，之所以会在移动端失效，而PC端正常，是因为移动端百度地图默认是阻止click事件的，因此，监听click事件失效，那么，其实有一种办法，可以起到让click生效的效果，就是使用如下的代码，禁止掉地图的拖动事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.disableDragging()</span><br></pre></td></tr></table></figure>\n<p>但是，这么做特别影响用户的交互，特别是移动端地图展示，少不了用户的手势操作，怎么能禁止掉地图的拖动呢，更别说手势缩放了，所以这个解决方案直接pass。</p>\n<p>细想一下，其实click事件，在移动端，根本没有存在的必要，还有300ms的延迟（这个是个旧梗了，目前不存在这个问题了其实），移动端有自己的手势事件，可以想一下，touchstart就可以很好的替代click事件啊，因此，使用如下的代码替换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchstart&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>经过测试验证，确实是可以生效的，响应效果也特别迅速。看上去，这个问题似乎已经得到了解决。。。但是，完美么，我并不这么认为。</p>\n<p>因为之前写过一篇pc端百度地图覆盖物拖动事件触发click的bug，在移动端肯定也是同样的，假如，用户是在覆盖物上面触发地图的拖动事件呢？结果很显然，touchstart事件会被触发！那么，这就是bug，至少用户体验上来说，非常不好，那么有解决办法没？答案是肯定的。</p>\n<p>如同之前在pc端解决这种问题的方式，移动端也有一个区别用户是点击还是拖动的方式，就是利用touchstart和touchend事件对象的screenX、screenY对象，判断一下，是否有移动的距离，如果超过一个固定值，就判断为是拖动，否则，则是点击，便触发相应的点击事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1,y1,x2,y2;</span><br><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchstart&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  x1=e.changedTouches[<span class=\"number\">0</span>].screenX</span><br><span class=\"line\">  y1=e.changedTouches[<span class=\"number\">0</span>].screenY</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">overlay.addEventListener(<span class=\"string\">&quot;touchend&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  x2=e.changedTouches[<span class=\"number\">0</span>].screenX</span><br><span class=\"line\">  y2=e.changedTouches[<span class=\"number\">0</span>].screenY</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d=<span class=\"built_in\">Math</span>.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(d&lt;<span class=\"number\">7</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做click事件该做的事情。。。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关于上面代码，有个问题需要提出下，就是关于为什么使用changedTouches而不是touches呢？</p>\n<ul>\n<li>touches: 当前屏幕上所有触摸点的列表</li>\n<li>changedTouches: 涉及当前(引发)事件的触摸点的列表</li>\n</ul>\n<p>如果使用touches，那么在touchend事件里，touches对象是空的，取不到对应的触摸点信息，那么只有在changedTouches里，也就是涉及当前事件的触摸点列表，才能获取到触摸结束之前那一刻触摸点的信息。</p>\n<p>解决的大概思路就是这样，第一次发现这样的坑，以后就会更加注意。</p>\n"},{"title":"百度地图在项目中使用的js小优化","date":"2018-07-12T13:50:44.000Z","_content":"\n\n\n在最近的项目里，有一个地图模式的展示页面，需要根据当前用户的类别选择，分别展示不同的类别下的数据，当然，地图还是使用的百度地图api，具体的交互方式如下图所示： \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/1.png?raw=true)\n\n当点击箭头所指的tab切换时，就要进行相关数据的获取和更新。问题是，一开始进来获取数据，和用户交互获取数据，我采取的是同一个方法getListByType，如下图所示：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/2.png?raw=true)  \n\n因为，如果为这两种获取数据方式而分开写获取的方法，也显得太过冗余，但是，首次获取数据，是在获取数据后，才能初始化地图，但若是使用上图所示的代码，同样用于去完成动态获取类别数据的话，会有很大的性能问题，因为每次都会去调用地图的初始化，地图的初始化代码如下所示，那么就意味着，每一次的请求，都会造成地图的重新初始化，这样违背了最基本的原则，性能之上，这种处理方式肯定是不可取的。    \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/3.png?raw=true)   \n\n那么如何在这一公用的方法里，去区分页面一开始获取的数据还是用户操作动态获取的呢？  \n其实很简单，因为如上图所示，map对象里，有一个mapObj的字段，用来存储地图的实例对象，那么一开始加载的时候，地图对象是没有被初始化的，因此mapObj仍然为null值，当初始化之后，mapObj就变成了百度地图的实例化对象，那么在用户交互获取数据的时候，mapObj就不可能为null,因此，通过判断mapObj对象是null还是地图实例对象，来进行不同的加载操作。   \n\n如图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/5.png?raw=true) \n\n如果是null，则进行map.init()操作  \n\n如果不是null，则进行map.update()操作.update方法代码如下，其实也就是进行地图覆盖物的常规操作，先进行点清除，再进行点的重新渲染:   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/4.png?raw=true)\n\n别看这样的操作很简单，但其实，代码的质量，大部分取决于细节方面的展现，虽然，真的可以，map.init()确实也可以实现，每次数据的刷新和展示，但是，每次都创建一个地图实例对象，耗费的性能是很大的，倒不如进行一个区分判断，这样对于性能能够有较大的提升，并且在用户体验上，也能有个较大的提升和优化。\n","source":"_posts/百度地图在项目中使用的js小优化.md","raw":"---\ntitle: 百度地图在项目中使用的js小优化\ndate: 2018-07-12 21:50:44\ntags: \n  - js \n  - 百度地图\ncategories:\n  - js\n---\n\n\n\n在最近的项目里，有一个地图模式的展示页面，需要根据当前用户的类别选择，分别展示不同的类别下的数据，当然，地图还是使用的百度地图api，具体的交互方式如下图所示： \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/1.png?raw=true)\n\n当点击箭头所指的tab切换时，就要进行相关数据的获取和更新。问题是，一开始进来获取数据，和用户交互获取数据，我采取的是同一个方法getListByType，如下图所示：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/2.png?raw=true)  \n\n因为，如果为这两种获取数据方式而分开写获取的方法，也显得太过冗余，但是，首次获取数据，是在获取数据后，才能初始化地图，但若是使用上图所示的代码，同样用于去完成动态获取类别数据的话，会有很大的性能问题，因为每次都会去调用地图的初始化，地图的初始化代码如下所示，那么就意味着，每一次的请求，都会造成地图的重新初始化，这样违背了最基本的原则，性能之上，这种处理方式肯定是不可取的。    \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/3.png?raw=true)   \n\n那么如何在这一公用的方法里，去区分页面一开始获取的数据还是用户操作动态获取的呢？  \n其实很简单，因为如上图所示，map对象里，有一个mapObj的字段，用来存储地图的实例对象，那么一开始加载的时候，地图对象是没有被初始化的，因此mapObj仍然为null值，当初始化之后，mapObj就变成了百度地图的实例化对象，那么在用户交互获取数据的时候，mapObj就不可能为null,因此，通过判断mapObj对象是null还是地图实例对象，来进行不同的加载操作。   \n\n如图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/5.png?raw=true) \n\n如果是null，则进行map.init()操作  \n\n如果不是null，则进行map.update()操作.update方法代码如下，其实也就是进行地图覆盖物的常规操作，先进行点清除，再进行点的重新渲染:   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20180712/4.png?raw=true)\n\n别看这样的操作很简单，但其实，代码的质量，大部分取决于细节方面的展现，虽然，真的可以，map.init()确实也可以实现，每次数据的刷新和展示，但是，每次都创建一个地图实例对象，耗费的性能是很大的，倒不如进行一个区分判断，这样对于性能能够有较大的提升，并且在用户体验上，也能有个较大的提升和优化。\n","slug":"百度地图在项目中使用的js小优化","published":1,"updated":"2018-07-12T14:16:05.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmx003smsvif1m4hrwn","content":"<p>在最近的项目里，有一个地图模式的展示页面，需要根据当前用户的类别选择，分别展示不同的类别下的数据，当然，地图还是使用的百度地图api，具体的交互方式如下图所示： </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/1.png?raw=true\"></p>\n<p>当点击箭头所指的tab切换时，就要进行相关数据的获取和更新。问题是，一开始进来获取数据，和用户交互获取数据，我采取的是同一个方法getListByType，如下图所示：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/2.png?raw=true\">  </p>\n<p>因为，如果为这两种获取数据方式而分开写获取的方法，也显得太过冗余，但是，首次获取数据，是在获取数据后，才能初始化地图，但若是使用上图所示的代码，同样用于去完成动态获取类别数据的话，会有很大的性能问题，因为每次都会去调用地图的初始化，地图的初始化代码如下所示，那么就意味着，每一次的请求，都会造成地图的重新初始化，这样违背了最基本的原则，性能之上，这种处理方式肯定是不可取的。    </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/3.png?raw=true\">   </p>\n<p>那么如何在这一公用的方法里，去区分页面一开始获取的数据还是用户操作动态获取的呢？<br>其实很简单，因为如上图所示，map对象里，有一个mapObj的字段，用来存储地图的实例对象，那么一开始加载的时候，地图对象是没有被初始化的，因此mapObj仍然为null值，当初始化之后，mapObj就变成了百度地图的实例化对象，那么在用户交互获取数据的时候，mapObj就不可能为null,因此，通过判断mapObj对象是null还是地图实例对象，来进行不同的加载操作。   </p>\n<p>如图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/5.png?raw=true\"> </p>\n<p>如果是null，则进行map.init()操作  </p>\n<p>如果不是null，则进行map.update()操作.update方法代码如下，其实也就是进行地图覆盖物的常规操作，先进行点清除，再进行点的重新渲染:   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/4.png?raw=true\"></p>\n<p>别看这样的操作很简单，但其实，代码的质量，大部分取决于细节方面的展现，虽然，真的可以，map.init()确实也可以实现，每次数据的刷新和展示，但是，每次都创建一个地图实例对象，耗费的性能是很大的，倒不如进行一个区分判断，这样对于性能能够有较大的提升，并且在用户体验上，也能有个较大的提升和优化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近的项目里，有一个地图模式的展示页面，需要根据当前用户的类别选择，分别展示不同的类别下的数据，当然，地图还是使用的百度地图api，具体的交互方式如下图所示： </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/1.png?raw=true\"></p>\n<p>当点击箭头所指的tab切换时，就要进行相关数据的获取和更新。问题是，一开始进来获取数据，和用户交互获取数据，我采取的是同一个方法getListByType，如下图所示：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/2.png?raw=true\">  </p>\n<p>因为，如果为这两种获取数据方式而分开写获取的方法，也显得太过冗余，但是，首次获取数据，是在获取数据后，才能初始化地图，但若是使用上图所示的代码，同样用于去完成动态获取类别数据的话，会有很大的性能问题，因为每次都会去调用地图的初始化，地图的初始化代码如下所示，那么就意味着，每一次的请求，都会造成地图的重新初始化，这样违背了最基本的原则，性能之上，这种处理方式肯定是不可取的。    </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/3.png?raw=true\">   </p>\n<p>那么如何在这一公用的方法里，去区分页面一开始获取的数据还是用户操作动态获取的呢？<br>其实很简单，因为如上图所示，map对象里，有一个mapObj的字段，用来存储地图的实例对象，那么一开始加载的时候，地图对象是没有被初始化的，因此mapObj仍然为null值，当初始化之后，mapObj就变成了百度地图的实例化对象，那么在用户交互获取数据的时候，mapObj就不可能为null,因此，通过判断mapObj对象是null还是地图实例对象，来进行不同的加载操作。   </p>\n<p>如图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/5.png?raw=true\"> </p>\n<p>如果是null，则进行map.init()操作  </p>\n<p>如果不是null，则进行map.update()操作.update方法代码如下，其实也就是进行地图覆盖物的常规操作，先进行点清除，再进行点的重新渲染:   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20180712/4.png?raw=true\"></p>\n<p>别看这样的操作很简单，但其实，代码的质量，大部分取决于细节方面的展现，虽然，真的可以，map.init()确实也可以实现，每次数据的刷新和展示，但是，每次都创建一个地图实例对象，耗费的性能是很大的，倒不如进行一个区分判断，这样对于性能能够有较大的提升，并且在用户体验上，也能有个较大的提升和优化。</p>\n"},{"title":"移动端页面遮罩层禁止页面滚动","date":"2018-07-29T13:48:09.000Z","_content":"\n今天要抛出来的一个问题，大家肯定都遇到过，尤其是经常做移动端页面开发的童鞋，就是一个内容长度超出屏幕高度的页面，具有滚动条。页面有个弹出框，同时有个遮罩层，会在页面显示。\n\n需求是这样的，需要在遮罩层显示的时候，阻止掉背后内容的滚动，也就是说，滑动遮罩层，并不会导致背后内容滚动。\n\n其实我刚出来的时候，做法很简单，很粗暴，但看上去不怎么好，但至少结果是对的，我想大部分童鞋都这么设置过吧，就是直接在遮罩层弹出来的时候，禁止掉body或是滚动元素的滚动效果，也就是加上overflow：hidden的css属性   \n\n但是这种效果，是有缺陷的，比如，当滚动元素的本身外部，有绝对定位的子元素，那么hidden会让子元素消失，所以，透过遮罩层，是会隐约看到元素突然消失的。[笑哭]别问我怎么知道的，毕竟踩过坑。   \n\n因此，上面这种方法，在大多数情况下面，还是可以粗暴的试一下的。接下来，要说到，常规的解决方法了。\n\n其实，来分析下，这滚动现象的原理，其实就是滚动穿透了，那么正常的滚动，移动端的滚动，都是手指触发的，那么，肯定是手指先触发，然后，导致了页面的滚动，那么，按照这样的逻辑分析，在页面滚动前，肯定发生了手指触屏的事件，也就是touchmove事件。\n\n如何去阻止touchmove事件后触发的滚动事件呢？这个做法很常规，也就是监听元素的touchmove事件，在事件的监听回调里，阻止掉后续的事件触发，也就是滚动的触发，因此有下面的代码：\n\n```js\n  $(el).on(\"touchmove\",function(e){\n    e.preventDefault();  //这行代码就可以阻止掉后续的滚动\n  })\n```\n\n上面的方法，还有一个注意点，就是在遮罩层关闭之后，需要手动移除绑定的监听事件,也就是使用jq的off方法：\n\n```js\n$(el).off(\"touchmove\")\n```\n\n这样，才算完美实现了需求。","source":"_posts/移动端页面遮罩层禁止页面滚动.md","raw":"---\ntitle: 移动端页面遮罩层禁止页面滚动\ndate: 2018-07-29 21:48:09\ntags:\n  - 移动端\ncategories:\n  - js\n---\n\n今天要抛出来的一个问题，大家肯定都遇到过，尤其是经常做移动端页面开发的童鞋，就是一个内容长度超出屏幕高度的页面，具有滚动条。页面有个弹出框，同时有个遮罩层，会在页面显示。\n\n需求是这样的，需要在遮罩层显示的时候，阻止掉背后内容的滚动，也就是说，滑动遮罩层，并不会导致背后内容滚动。\n\n其实我刚出来的时候，做法很简单，很粗暴，但看上去不怎么好，但至少结果是对的，我想大部分童鞋都这么设置过吧，就是直接在遮罩层弹出来的时候，禁止掉body或是滚动元素的滚动效果，也就是加上overflow：hidden的css属性   \n\n但是这种效果，是有缺陷的，比如，当滚动元素的本身外部，有绝对定位的子元素，那么hidden会让子元素消失，所以，透过遮罩层，是会隐约看到元素突然消失的。[笑哭]别问我怎么知道的，毕竟踩过坑。   \n\n因此，上面这种方法，在大多数情况下面，还是可以粗暴的试一下的。接下来，要说到，常规的解决方法了。\n\n其实，来分析下，这滚动现象的原理，其实就是滚动穿透了，那么正常的滚动，移动端的滚动，都是手指触发的，那么，肯定是手指先触发，然后，导致了页面的滚动，那么，按照这样的逻辑分析，在页面滚动前，肯定发生了手指触屏的事件，也就是touchmove事件。\n\n如何去阻止touchmove事件后触发的滚动事件呢？这个做法很常规，也就是监听元素的touchmove事件，在事件的监听回调里，阻止掉后续的事件触发，也就是滚动的触发，因此有下面的代码：\n\n```js\n  $(el).on(\"touchmove\",function(e){\n    e.preventDefault();  //这行代码就可以阻止掉后续的滚动\n  })\n```\n\n上面的方法，还有一个注意点，就是在遮罩层关闭之后，需要手动移除绑定的监听事件,也就是使用jq的off方法：\n\n```js\n$(el).off(\"touchmove\")\n```\n\n这样，才算完美实现了需求。","slug":"移动端页面遮罩层禁止页面滚动","published":1,"updated":"2018-07-29T14:25:48.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxmz003xmsviaxi96q0f","content":"<p>今天要抛出来的一个问题，大家肯定都遇到过，尤其是经常做移动端页面开发的童鞋，就是一个内容长度超出屏幕高度的页面，具有滚动条。页面有个弹出框，同时有个遮罩层，会在页面显示。</p>\n<p>需求是这样的，需要在遮罩层显示的时候，阻止掉背后内容的滚动，也就是说，滑动遮罩层，并不会导致背后内容滚动。</p>\n<p>其实我刚出来的时候，做法很简单，很粗暴，但看上去不怎么好，但至少结果是对的，我想大部分童鞋都这么设置过吧，就是直接在遮罩层弹出来的时候，禁止掉body或是滚动元素的滚动效果，也就是加上overflow：hidden的css属性   </p>\n<p>但是这种效果，是有缺陷的，比如，当滚动元素的本身外部，有绝对定位的子元素，那么hidden会让子元素消失，所以，透过遮罩层，是会隐约看到元素突然消失的。[笑哭]别问我怎么知道的，毕竟踩过坑。   </p>\n<p>因此，上面这种方法，在大多数情况下面，还是可以粗暴的试一下的。接下来，要说到，常规的解决方法了。</p>\n<p>其实，来分析下，这滚动现象的原理，其实就是滚动穿透了，那么正常的滚动，移动端的滚动，都是手指触发的，那么，肯定是手指先触发，然后，导致了页面的滚动，那么，按照这样的逻辑分析，在页面滚动前，肯定发生了手指触屏的事件，也就是touchmove事件。</p>\n<p>如何去阻止touchmove事件后触发的滚动事件呢？这个做法很常规，也就是监听元素的touchmove事件，在事件的监听回调里，阻止掉后续的事件触发，也就是滚动的触发，因此有下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(el).on(<span class=\"string\">&quot;touchmove&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();  <span class=\"comment\">//这行代码就可以阻止掉后续的滚动</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的方法，还有一个注意点，就是在遮罩层关闭之后，需要手动移除绑定的监听事件,也就是使用jq的off方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(el).off(<span class=\"string\">&quot;touchmove&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，才算完美实现了需求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天要抛出来的一个问题，大家肯定都遇到过，尤其是经常做移动端页面开发的童鞋，就是一个内容长度超出屏幕高度的页面，具有滚动条。页面有个弹出框，同时有个遮罩层，会在页面显示。</p>\n<p>需求是这样的，需要在遮罩层显示的时候，阻止掉背后内容的滚动，也就是说，滑动遮罩层，并不会导致背后内容滚动。</p>\n<p>其实我刚出来的时候，做法很简单，很粗暴，但看上去不怎么好，但至少结果是对的，我想大部分童鞋都这么设置过吧，就是直接在遮罩层弹出来的时候，禁止掉body或是滚动元素的滚动效果，也就是加上overflow：hidden的css属性   </p>\n<p>但是这种效果，是有缺陷的，比如，当滚动元素的本身外部，有绝对定位的子元素，那么hidden会让子元素消失，所以，透过遮罩层，是会隐约看到元素突然消失的。[笑哭]别问我怎么知道的，毕竟踩过坑。   </p>\n<p>因此，上面这种方法，在大多数情况下面，还是可以粗暴的试一下的。接下来，要说到，常规的解决方法了。</p>\n<p>其实，来分析下，这滚动现象的原理，其实就是滚动穿透了，那么正常的滚动，移动端的滚动，都是手指触发的，那么，肯定是手指先触发，然后，导致了页面的滚动，那么，按照这样的逻辑分析，在页面滚动前，肯定发生了手指触屏的事件，也就是touchmove事件。</p>\n<p>如何去阻止touchmove事件后触发的滚动事件呢？这个做法很常规，也就是监听元素的touchmove事件，在事件的监听回调里，阻止掉后续的事件触发，也就是滚动的触发，因此有下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(el).on(<span class=\"string\">&quot;touchmove&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();  <span class=\"comment\">//这行代码就可以阻止掉后续的滚动</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的方法，还有一个注意点，就是在遮罩层关闭之后，需要手动移除绑定的监听事件,也就是使用jq的off方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(el).off(<span class=\"string\">&quot;touchmove&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>这样，才算完美实现了需求。</p>\n"},{"title":"解决js中onclick与ondblclick事件绑定冲突的问题","date":"2018-06-27T14:22:53.000Z","_content":"\n最近在黄山学院智慧旅游语音导览系统里，采用了百度地图的API，其中给自定义覆盖物绑定的相关事件，是采用dom0级的事件绑定，根据需求，覆盖物的单击双击事件需要触发不同的交互，所以想当然的写出了下面的代码：\n```js\ndiv.onclick=function(){\n  //do something\n  console.log(111)\n}\n\ndiv.ondblclick=function(){\n  //do another something\n  console.log(222)\n}\n```\n\n但实际测试过程中,单击事件的绑定，成功console出了111，但是当我双击的时候，单击事件也出发了，随后双击事件也触发了，所以控制台console出了一次111，一次222。   \n\n如果想要解决这个问题，其实很简单，只要在单击事件里加一个时间延迟，超过这个时间的，就算单击事件，如果在这个时间内又触发了，算是双击事件，时间值给300ms比较适合，所以，解决的方法如下：\n\n```js\n//定时器对象\nvar clickTimer = null;\n\ndiv.onclick = function () {\n  \n  if (clickTimer) {\n    window.clearTimeout(clickTimer);\n    clickTimer = null;\n  }\n\n  //单击事件延迟300ms后触发\n  clickTimer = window.setTimeout(function () {\n    // your click process code here  \n    console.log(111);\n  }, 300);\n\n}\n\ndiv.ondblclick = function () {\n  \n  //进入双击后，取消定时器，从而阻止单击事件的触发\n  if (clickTimer) {\n    window.clearTimeout(clickTimer);\n    clickTimer = null;\n  }\n\n  // your click process code here  \n  console.log(222)\n}\n```\n\n所以，处理思想就是：利用定时器延迟执行onclick事件，这样在双击过程中会取消中途触发的单击事件。\n","source":"_posts/解决js中onclick与ondblclick事件绑定冲突的问题.md","raw":"---\ntitle: 解决js中onclick与ondblclick事件绑定冲突的问题\ndate: 2018-06-27 22:22:53\ntags:\n  - 原生js\n  - 事件绑定\ncategories:\n  - js\n---\n\n最近在黄山学院智慧旅游语音导览系统里，采用了百度地图的API，其中给自定义覆盖物绑定的相关事件，是采用dom0级的事件绑定，根据需求，覆盖物的单击双击事件需要触发不同的交互，所以想当然的写出了下面的代码：\n```js\ndiv.onclick=function(){\n  //do something\n  console.log(111)\n}\n\ndiv.ondblclick=function(){\n  //do another something\n  console.log(222)\n}\n```\n\n但实际测试过程中,单击事件的绑定，成功console出了111，但是当我双击的时候，单击事件也出发了，随后双击事件也触发了，所以控制台console出了一次111，一次222。   \n\n如果想要解决这个问题，其实很简单，只要在单击事件里加一个时间延迟，超过这个时间的，就算单击事件，如果在这个时间内又触发了，算是双击事件，时间值给300ms比较适合，所以，解决的方法如下：\n\n```js\n//定时器对象\nvar clickTimer = null;\n\ndiv.onclick = function () {\n  \n  if (clickTimer) {\n    window.clearTimeout(clickTimer);\n    clickTimer = null;\n  }\n\n  //单击事件延迟300ms后触发\n  clickTimer = window.setTimeout(function () {\n    // your click process code here  \n    console.log(111);\n  }, 300);\n\n}\n\ndiv.ondblclick = function () {\n  \n  //进入双击后，取消定时器，从而阻止单击事件的触发\n  if (clickTimer) {\n    window.clearTimeout(clickTimer);\n    clickTimer = null;\n  }\n\n  // your click process code here  \n  console.log(222)\n}\n```\n\n所以，处理思想就是：利用定时器延迟执行onclick事件，这样在双击过程中会取消中途触发的单击事件。\n","slug":"解决js中onclick与ondblclick事件绑定冲突的问题","published":1,"updated":"2018-06-27T14:38:34.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn00040msvi81qoeqym","content":"<p>最近在黄山学院智慧旅游语音导览系统里，采用了百度地图的API，其中给自定义覆盖物绑定的相关事件，是采用dom0级的事件绑定，根据需求，覆盖物的单击双击事件需要触发不同的交互，所以想当然的写出了下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div.ondblclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do another something</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但实际测试过程中,单击事件的绑定，成功console出了111，但是当我双击的时候，单击事件也出发了，随后双击事件也触发了，所以控制台console出了一次111，一次222。   </p>\n<p>如果想要解决这个问题，其实很简单，只要在单击事件里加一个时间延迟，超过这个时间的，就算单击事件，如果在这个时间内又触发了，算是双击事件，时间值给300ms比较适合，所以，解决的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定时器对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (clickTimer) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.clearTimeout(clickTimer);</span><br><span class=\"line\">    clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//单击事件延迟300ms后触发</span></span><br><span class=\"line\">  clickTimer = <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// your click process code here  </span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div.ondblclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//进入双击后，取消定时器，从而阻止单击事件的触发</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (clickTimer) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.clearTimeout(clickTimer);</span><br><span class=\"line\">    clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// your click process code here  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，处理思想就是：利用定时器延迟执行onclick事件，这样在双击过程中会取消中途触发的单击事件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在黄山学院智慧旅游语音导览系统里，采用了百度地图的API，其中给自定义覆盖物绑定的相关事件，是采用dom0级的事件绑定，根据需求，覆盖物的单击双击事件需要触发不同的交互，所以想当然的写出了下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div.ondblclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do another something</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但实际测试过程中,单击事件的绑定，成功console出了111，但是当我双击的时候，单击事件也出发了，随后双击事件也触发了，所以控制台console出了一次111，一次222。   </p>\n<p>如果想要解决这个问题，其实很简单，只要在单击事件里加一个时间延迟，超过这个时间的，就算单击事件，如果在这个时间内又触发了，算是双击事件，时间值给300ms比较适合，所以，解决的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定时器对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (clickTimer) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.clearTimeout(clickTimer);</span><br><span class=\"line\">    clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//单击事件延迟300ms后触发</span></span><br><span class=\"line\">  clickTimer = <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// your click process code here  </span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div.ondblclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//进入双击后，取消定时器，从而阻止单击事件的触发</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (clickTimer) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.clearTimeout(clickTimer);</span><br><span class=\"line\">    clickTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// your click process code here  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，处理思想就是：利用定时器延迟执行onclick事件，这样在双击过程中会取消中途触发的单击事件。</p>\n"},{"title":"解决transition过度在height:auto失效的问题","date":"2019-06-25T13:54:33.000Z","_content":"\n最近项目中遇到了一个问题，竖向菜单显示和隐藏，通过transition过渡 影响height改变，本来代码如下：\n\n```css\n\n.demo {\n  height:0;\n  transition:all .5s\n}\n.demo.active {\n  height:auto\n}\n```\n\n上面的代码，所处的场景是，过渡元素的高度是不确定的，因此需要从height:0 到 height:auto 过渡，但是实际上是无法实现效果的，原因是并不是所有的css属性都支持过渡，支持过渡的前提是，其属性有明确的开始值，和结束值，并且存在过渡的中间值，如果我们高度不确定，那么过渡效果是无法实现的，那么解决办法是什么呢？\n\ncss还有一个属性，max-height，顾名思义，就是当元素高度没有该值高时，以该元素本身高度展示，当元素高于该值时，则高度以该值显示，我们给该元素加上一个足够高的max-height属性，那么，我们就能通过max-height属性，来对元素进行过渡啦：\n\n\n```css\n\n.demo {\n  max-height:0;\n  transition:all .5s\n}\n.demo.active {\n  max-height:200px; /*可根据实际情况设置高度值*/\n}\n```\n\n上面的代码，就能够实现高度的过渡效果了。\n\n","source":"_posts/解决transition过度在height-auto失效的问题.md","raw":"---\ntitle: '解决transition过度在height:auto失效的问题'\ndate: 2019-06-25 21:54:33\ntags:\n  - css\n  - transition\ncategories:\n  - css\n  - transition\n---\n\n最近项目中遇到了一个问题，竖向菜单显示和隐藏，通过transition过渡 影响height改变，本来代码如下：\n\n```css\n\n.demo {\n  height:0;\n  transition:all .5s\n}\n.demo.active {\n  height:auto\n}\n```\n\n上面的代码，所处的场景是，过渡元素的高度是不确定的，因此需要从height:0 到 height:auto 过渡，但是实际上是无法实现效果的，原因是并不是所有的css属性都支持过渡，支持过渡的前提是，其属性有明确的开始值，和结束值，并且存在过渡的中间值，如果我们高度不确定，那么过渡效果是无法实现的，那么解决办法是什么呢？\n\ncss还有一个属性，max-height，顾名思义，就是当元素高度没有该值高时，以该元素本身高度展示，当元素高于该值时，则高度以该值显示，我们给该元素加上一个足够高的max-height属性，那么，我们就能通过max-height属性，来对元素进行过渡啦：\n\n\n```css\n\n.demo {\n  max-height:0;\n  transition:all .5s\n}\n.demo.active {\n  max-height:200px; /*可根据实际情况设置高度值*/\n}\n```\n\n上面的代码，就能够实现高度的过渡效果了。\n\n","slug":"解决transition过度在height-auto失效的问题","published":1,"updated":"2019-06-25T14:15:54.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn10043msvigq6n85cc","content":"<p>最近项目中遇到了一个问题，竖向菜单显示和隐藏，通过transition过渡 影响height改变，本来代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>:all .<span class=\"number\">5s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:auto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，所处的场景是，过渡元素的高度是不确定的，因此需要从height:0 到 height:auto 过渡，但是实际上是无法实现效果的，原因是并不是所有的css属性都支持过渡，支持过渡的前提是，其属性有明确的开始值，和结束值，并且存在过渡的中间值，如果我们高度不确定，那么过渡效果是无法实现的，那么解决办法是什么呢？</p>\n<p>css还有一个属性，max-height，顾名思义，就是当元素高度没有该值高时，以该元素本身高度展示，当元素高于该值时，则高度以该值显示，我们给该元素加上一个足够高的max-height属性，那么，我们就能通过max-height属性，来对元素进行过渡啦：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>:all .<span class=\"number\">5s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>:<span class=\"number\">200px</span>; <span class=\"comment\">/*可根据实际情况设置高度值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，就能够实现高度的过渡效果了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目中遇到了一个问题，竖向菜单显示和隐藏，通过transition过渡 影响height改变，本来代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>:all .<span class=\"number\">5s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:auto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，所处的场景是，过渡元素的高度是不确定的，因此需要从height:0 到 height:auto 过渡，但是实际上是无法实现效果的，原因是并不是所有的css属性都支持过渡，支持过渡的前提是，其属性有明确的开始值，和结束值，并且存在过渡的中间值，如果我们高度不确定，那么过渡效果是无法实现的，那么解决办法是什么呢？</p>\n<p>css还有一个属性，max-height，顾名思义，就是当元素高度没有该值高时，以该元素本身高度展示，当元素高于该值时，则高度以该值显示，我们给该元素加上一个足够高的max-height属性，那么，我们就能通过max-height属性，来对元素进行过渡啦：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>:all .<span class=\"number\">5s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>:<span class=\"number\">200px</span>; <span class=\"comment\">/*可根据实际情况设置高度值*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，就能够实现高度的过渡效果了。</p>\n"},{"title":"解决vue-awesome-swiper loop属性失效的问题","date":"2018-12-25T12:56:19.000Z","_content":"\n最近在项目里的轮播组件开发中，在使用 vue-awesome-swiper 这个组件的时候，遇到了一个问题，在轮播组件加载完成之后，有概率性的会出现 Loop 属性设置失效的问题，也就是轮播图不会无限轮播，原来的代码如下：\n\n```js\n\n<template>\n  <div>\n    <swiper :options=\"bannerOption\" class=\"banner-swiper\">\n      <swiper-slide v-for=\"(item,index) in banners\" :key=\"index\">\n        <a class=\"db\" :href=\"item.url\">\n          <img :src=\"item.resourcePath\">\n        </a>\n\n      </swiper-slide>\n\n      <div class=\"swiper-button-prev\" slot=\"button-prev\"></div>\n      <div class=\"swiper-button-next\" slot=\"button-next\"></div>\n    </swiper>\n  </div>\n</template>\n\n\n<script>\nimport \"swiper/dist/css/swiper.css\";\nimport { swiper, swiperSlide } from \"vue-awesome-swiper\";\nexport default {\n  props:{\n    banners:{\n      type:Array,\n      default:[],\n    }\n  },\n  data() {\n    return {\n      bannerOption: {\n        loop: true,\n        observer: true,\n        observeParents: true,\n        autoplay: {\n          delay: 3000\n        },\n        navigation: {\n          nextEl: \".swiper-button-next\",\n          prevEl: \".swiper-button-prev\"\n        }\n      }\n    };\n  },\n  components: {\n    swiper,\n    swiperSlide\n  }\n};\n</script>\n\n```\n\n后来经过思考，发现，其实组件的渲染是早于图片加载完成的，那么，就会出现设置 loop 的时候，组件内部还没有计算好实际的元素个数，导致 loop 失效，解决方法很简单，就是设法让 swiper 组件在图片数据加载好之后再开始渲染，那么需要在 swiper 这个标签上加上一段：\n\n```js\nv-if=\"banners.length\"\n```\n\n意思也就是，当数据获取来之后，再进行组件的渲染，那么，就可以得到期望的结果了。调整后的代码如下：\n\n```js\n<template>\n  <div>\n    <swiper v-if='banners.length' :options=\"bannerOption\" class=\"banner-swiper\">\n      <swiper-slide v-for=\"(item,index) in banners\" :key=\"index\">\n        <a class=\"db\" :href=\"item.url\">\n          <img :src=\"item.resourcePath\">\n        </a>\n\n      </swiper-slide>\n\n      <div class=\"swiper-button-prev\" slot=\"button-prev\"></div>\n      <div class=\"swiper-button-next\" slot=\"button-next\"></div>\n    </swiper>\n  </div>\n</template>\n\n<script>\nimport \"swiper/dist/css/swiper.css\";\nimport { swiper, swiperSlide } from \"vue-awesome-swiper\";\nexport default {\n  props:{\n    banners:{\n      type:Array,\n      default:[],\n    }\n  },\n  data() {\n    return {\n      bannerOption: {\n        //freeMode: true,\n        loop: true,\n        observer: true,\n        observeParents: true,\n        autoplay: {\n          delay: 3000\n        },\n        navigation: {\n          nextEl: \".swiper-button-next\",\n          prevEl: \".swiper-button-prev\"\n        }\n      }\n    };\n  },\n  components: {\n    swiper,\n    swiperSlide\n  }\n};\n</script>\n```\n\n","source":"_posts/解决vue-awesome-swiper-loop属性失效的问题.md","raw":"---\ntitle: 解决vue-awesome-swiper loop属性失效的问题\ndate: 2018-12-25 20:56:19\ntags:\n  - vue\n  - vue-awesome-swiper\ncategories:\n  - vue  \n  - vue-awesome-swiper\n---\n\n最近在项目里的轮播组件开发中，在使用 vue-awesome-swiper 这个组件的时候，遇到了一个问题，在轮播组件加载完成之后，有概率性的会出现 Loop 属性设置失效的问题，也就是轮播图不会无限轮播，原来的代码如下：\n\n```js\n\n<template>\n  <div>\n    <swiper :options=\"bannerOption\" class=\"banner-swiper\">\n      <swiper-slide v-for=\"(item,index) in banners\" :key=\"index\">\n        <a class=\"db\" :href=\"item.url\">\n          <img :src=\"item.resourcePath\">\n        </a>\n\n      </swiper-slide>\n\n      <div class=\"swiper-button-prev\" slot=\"button-prev\"></div>\n      <div class=\"swiper-button-next\" slot=\"button-next\"></div>\n    </swiper>\n  </div>\n</template>\n\n\n<script>\nimport \"swiper/dist/css/swiper.css\";\nimport { swiper, swiperSlide } from \"vue-awesome-swiper\";\nexport default {\n  props:{\n    banners:{\n      type:Array,\n      default:[],\n    }\n  },\n  data() {\n    return {\n      bannerOption: {\n        loop: true,\n        observer: true,\n        observeParents: true,\n        autoplay: {\n          delay: 3000\n        },\n        navigation: {\n          nextEl: \".swiper-button-next\",\n          prevEl: \".swiper-button-prev\"\n        }\n      }\n    };\n  },\n  components: {\n    swiper,\n    swiperSlide\n  }\n};\n</script>\n\n```\n\n后来经过思考，发现，其实组件的渲染是早于图片加载完成的，那么，就会出现设置 loop 的时候，组件内部还没有计算好实际的元素个数，导致 loop 失效，解决方法很简单，就是设法让 swiper 组件在图片数据加载好之后再开始渲染，那么需要在 swiper 这个标签上加上一段：\n\n```js\nv-if=\"banners.length\"\n```\n\n意思也就是，当数据获取来之后，再进行组件的渲染，那么，就可以得到期望的结果了。调整后的代码如下：\n\n```js\n<template>\n  <div>\n    <swiper v-if='banners.length' :options=\"bannerOption\" class=\"banner-swiper\">\n      <swiper-slide v-for=\"(item,index) in banners\" :key=\"index\">\n        <a class=\"db\" :href=\"item.url\">\n          <img :src=\"item.resourcePath\">\n        </a>\n\n      </swiper-slide>\n\n      <div class=\"swiper-button-prev\" slot=\"button-prev\"></div>\n      <div class=\"swiper-button-next\" slot=\"button-next\"></div>\n    </swiper>\n  </div>\n</template>\n\n<script>\nimport \"swiper/dist/css/swiper.css\";\nimport { swiper, swiperSlide } from \"vue-awesome-swiper\";\nexport default {\n  props:{\n    banners:{\n      type:Array,\n      default:[],\n    }\n  },\n  data() {\n    return {\n      bannerOption: {\n        //freeMode: true,\n        loop: true,\n        observer: true,\n        observeParents: true,\n        autoplay: {\n          delay: 3000\n        },\n        navigation: {\n          nextEl: \".swiper-button-next\",\n          prevEl: \".swiper-button-prev\"\n        }\n      }\n    };\n  },\n  components: {\n    swiper,\n    swiperSlide\n  }\n};\n</script>\n```\n\n","slug":"解决vue-awesome-swiper-loop属性失效的问题","published":1,"updated":"2018-12-25T12:57:07.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn20047msvif3vlczaa","content":"<p>最近在项目里的轮播组件开发中，在使用 vue-awesome-swiper 这个组件的时候，遇到了一个问题，在轮播组件加载完成之后，有概率性的会出现 Loop 属性设置失效的问题，也就是轮播图不会无限轮播，原来的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;swiper :options=<span class=\"string\">&quot;bannerOption&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;banner-swiper&quot;</span>&gt;</span><br><span class=\"line\">      &lt;swiper-slide v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in banners&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;db&quot;</span> :href=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span><br><span class=\"line\">          &lt;img :src=<span class=\"string\">&quot;item.resourcePath&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/swiper-slide&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-prev&quot;</span> slot=<span class=\"string\">&quot;button-prev&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-next&quot;</span> slot=<span class=\"string\">&quot;button-next&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/swiper&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;swiper/dist/css/swiper.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; swiper, swiperSlide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-awesome-swiper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    banners:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:[],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bannerOption: &#123;</span><br><span class=\"line\">        loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observeParents: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        autoplay: &#123;</span><br><span class=\"line\">          delay: <span class=\"number\">3000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        navigation: &#123;</span><br><span class=\"line\">          nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">          prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    swiper,</span><br><span class=\"line\">    swiperSlide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>后来经过思考，发现，其实组件的渲染是早于图片加载完成的，那么，就会出现设置 loop 的时候，组件内部还没有计算好实际的元素个数，导致 loop 失效，解决方法很简单，就是设法让 swiper 组件在图片数据加载好之后再开始渲染，那么需要在 swiper 这个标签上加上一段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;banners.length&quot;</span></span><br></pre></td></tr></table></figure>\n<p>意思也就是，当数据获取来之后，再进行组件的渲染，那么，就可以得到期望的结果了。调整后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;swiper v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;banners.length&#x27;</span> :options=<span class=\"string\">&quot;bannerOption&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;banner-swiper&quot;</span>&gt;</span><br><span class=\"line\">      &lt;swiper-slide v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in banners&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;db&quot;</span> :href=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span><br><span class=\"line\">          &lt;img :src=<span class=\"string\">&quot;item.resourcePath&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/swiper-slide&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-prev&quot;</span> slot=<span class=\"string\">&quot;button-prev&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-next&quot;</span> slot=<span class=\"string\">&quot;button-next&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/swiper&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;swiper/dist/css/swiper.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; swiper, swiperSlide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-awesome-swiper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    banners:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:[],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bannerOption: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//freeMode: true,</span></span><br><span class=\"line\">        loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observeParents: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        autoplay: &#123;</span><br><span class=\"line\">          delay: <span class=\"number\">3000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        navigation: &#123;</span><br><span class=\"line\">          nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">          prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    swiper,</span><br><span class=\"line\">    swiperSlide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在项目里的轮播组件开发中，在使用 vue-awesome-swiper 这个组件的时候，遇到了一个问题，在轮播组件加载完成之后，有概率性的会出现 Loop 属性设置失效的问题，也就是轮播图不会无限轮播，原来的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;swiper :options=<span class=\"string\">&quot;bannerOption&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;banner-swiper&quot;</span>&gt;</span><br><span class=\"line\">      &lt;swiper-slide v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in banners&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;db&quot;</span> :href=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span><br><span class=\"line\">          &lt;img :src=<span class=\"string\">&quot;item.resourcePath&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/swiper-slide&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-prev&quot;</span> slot=<span class=\"string\">&quot;button-prev&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-next&quot;</span> slot=<span class=\"string\">&quot;button-next&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/swiper&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;swiper/dist/css/swiper.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; swiper, swiperSlide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-awesome-swiper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    banners:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:[],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bannerOption: &#123;</span><br><span class=\"line\">        loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observeParents: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        autoplay: &#123;</span><br><span class=\"line\">          delay: <span class=\"number\">3000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        navigation: &#123;</span><br><span class=\"line\">          nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">          prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    swiper,</span><br><span class=\"line\">    swiperSlide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>后来经过思考，发现，其实组件的渲染是早于图片加载完成的，那么，就会出现设置 loop 的时候，组件内部还没有计算好实际的元素个数，导致 loop 失效，解决方法很简单，就是设法让 swiper 组件在图片数据加载好之后再开始渲染，那么需要在 swiper 这个标签上加上一段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;banners.length&quot;</span></span><br></pre></td></tr></table></figure>\n<p>意思也就是，当数据获取来之后，再进行组件的渲染，那么，就可以得到期望的结果了。调整后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;swiper v-<span class=\"keyword\">if</span>=<span class=\"string\">&#x27;banners.length&#x27;</span> :options=<span class=\"string\">&quot;bannerOption&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;banner-swiper&quot;</span>&gt;</span><br><span class=\"line\">      &lt;swiper-slide v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in banners&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;db&quot;</span> :href=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span><br><span class=\"line\">          &lt;img :src=<span class=\"string\">&quot;item.resourcePath&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/swiper-slide&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-prev&quot;</span> slot=<span class=\"string\">&quot;button-prev&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;swiper-button-next&quot;</span> slot=<span class=\"string\">&quot;button-next&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/swiper&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;swiper/dist/css/swiper.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; swiper, swiperSlide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-awesome-swiper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    banners:&#123;</span><br><span class=\"line\">      type:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:[],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bannerOption: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//freeMode: true,</span></span><br><span class=\"line\">        loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        observeParents: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        autoplay: &#123;</span><br><span class=\"line\">          delay: <span class=\"number\">3000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        navigation: &#123;</span><br><span class=\"line\">          nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">          prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    swiper,</span><br><span class=\"line\">    swiperSlide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"让a链接失效的那点事儿","date":"2018-09-05T13:34:24.000Z","_content":"\n\n最近项目中，有这么一个需求，APP里有好几个模块，每个模块都配有顶部的轮播图，每张轮播图后台给的数据都会配上url地址，那么需求是这样的:    \n\n当后台配置的url字段不为空字符串时，便让链接跳转，如果为空，就阻止掉链接的跳转，正常的代码如下：\n\n```html\n  <a href=\"url\">\n    <img src=\"somePicUrl\"/>\n  </a>\n```\n\n正常的思路，就是在渲染的时候，加个判断，如果url===\"\"，则设置href=\"javascript:;\"，如果url不为空，则设置href=\"url\"，也就是正常的跳转路径。\n\n上述的操作，在谷歌浏览器模拟机里，是可以生效的，但是项目运行在安卓的浏览器壳，也就是安卓手机里的时候，href=\"javascript:;\"仍然可以跳转到 javascript:; 这样一个如此怪异的页面上，也就是说，在移动端页面里，运行在hybrid页面中，javascript:;是不能够阻止a链接的跳转的。\n\n除了javascript:; 还有哪些方法能够阻止掉a链接的跳转，并且不出现这样的兼容性问题呢？\n\n* javascript:void(0);\n\nvoid 是JavaScript 的一个运算符，void(0)就是什么都不做的意思，这个方法据说有兼容性问题，但是我目前还没有发现，为确保万全，就没有使用这个方法。\n\n* 将a标签，设置disabled为true属性\n\n在项目中使用的解决方法就是这个，给a标签加上disabled属性，可以使得在a标签上面的所有默认属性和事件，都失效，因为除了跳转页面，无需设置其他的事件绑定，所以，此方法效果最好。\n","source":"_posts/让a链接失效的那点事儿.md","raw":"---\ntitle: 让a链接失效的那点事儿\ndate: 2018-09-05 21:34:24\ntags:\n  - html\ncategories:\n  - a \n  - html\n---\n\n\n最近项目中，有这么一个需求，APP里有好几个模块，每个模块都配有顶部的轮播图，每张轮播图后台给的数据都会配上url地址，那么需求是这样的:    \n\n当后台配置的url字段不为空字符串时，便让链接跳转，如果为空，就阻止掉链接的跳转，正常的代码如下：\n\n```html\n  <a href=\"url\">\n    <img src=\"somePicUrl\"/>\n  </a>\n```\n\n正常的思路，就是在渲染的时候，加个判断，如果url===\"\"，则设置href=\"javascript:;\"，如果url不为空，则设置href=\"url\"，也就是正常的跳转路径。\n\n上述的操作，在谷歌浏览器模拟机里，是可以生效的，但是项目运行在安卓的浏览器壳，也就是安卓手机里的时候，href=\"javascript:;\"仍然可以跳转到 javascript:; 这样一个如此怪异的页面上，也就是说，在移动端页面里，运行在hybrid页面中，javascript:;是不能够阻止a链接的跳转的。\n\n除了javascript:; 还有哪些方法能够阻止掉a链接的跳转，并且不出现这样的兼容性问题呢？\n\n* javascript:void(0);\n\nvoid 是JavaScript 的一个运算符，void(0)就是什么都不做的意思，这个方法据说有兼容性问题，但是我目前还没有发现，为确保万全，就没有使用这个方法。\n\n* 将a标签，设置disabled为true属性\n\n在项目中使用的解决方法就是这个，给a标签加上disabled属性，可以使得在a标签上面的所有默认属性和事件，都失效，因为除了跳转页面，无需设置其他的事件绑定，所以，此方法效果最好。\n","slug":"让a链接失效的那点事儿","published":1,"updated":"2018-09-05T13:35:19.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn3004amsvi1xm6aqgy","content":"<p>最近项目中，有这么一个需求，APP里有好几个模块，每个模块都配有顶部的轮播图，每张轮播图后台给的数据都会配上url地址，那么需求是这样的:    </p>\n<p>当后台配置的url字段不为空字符串时，便让链接跳转，如果为空，就阻止掉链接的跳转，正常的代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;somePicUrl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常的思路，就是在渲染的时候，加个判断，如果url===””，则设置href=”javascript:;”，如果url不为空，则设置href=”url”，也就是正常的跳转路径。</p>\n<p>上述的操作，在谷歌浏览器模拟机里，是可以生效的，但是项目运行在安卓的浏览器壳，也就是安卓手机里的时候，href=”javascript:;”仍然可以跳转到 javascript:; 这样一个如此怪异的页面上，也就是说，在移动端页面里，运行在hybrid页面中，javascript:;是不能够阻止a链接的跳转的。</p>\n<p>除了javascript:; 还有哪些方法能够阻止掉a链接的跳转，并且不出现这样的兼容性问题呢？</p>\n<ul>\n<li>javascript:void(0);</li>\n</ul>\n<p>void 是JavaScript 的一个运算符，void(0)就是什么都不做的意思，这个方法据说有兼容性问题，但是我目前还没有发现，为确保万全，就没有使用这个方法。</p>\n<ul>\n<li>将a标签，设置disabled为true属性</li>\n</ul>\n<p>在项目中使用的解决方法就是这个，给a标签加上disabled属性，可以使得在a标签上面的所有默认属性和事件，都失效，因为除了跳转页面，无需设置其他的事件绑定，所以，此方法效果最好。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目中，有这么一个需求，APP里有好几个模块，每个模块都配有顶部的轮播图，每张轮播图后台给的数据都会配上url地址，那么需求是这样的:    </p>\n<p>当后台配置的url字段不为空字符串时，便让链接跳转，如果为空，就阻止掉链接的跳转，正常的代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;somePicUrl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正常的思路，就是在渲染的时候，加个判断，如果url===””，则设置href=”javascript:;”，如果url不为空，则设置href=”url”，也就是正常的跳转路径。</p>\n<p>上述的操作，在谷歌浏览器模拟机里，是可以生效的，但是项目运行在安卓的浏览器壳，也就是安卓手机里的时候，href=”javascript:;”仍然可以跳转到 javascript:; 这样一个如此怪异的页面上，也就是说，在移动端页面里，运行在hybrid页面中，javascript:;是不能够阻止a链接的跳转的。</p>\n<p>除了javascript:; 还有哪些方法能够阻止掉a链接的跳转，并且不出现这样的兼容性问题呢？</p>\n<ul>\n<li>javascript:void(0);</li>\n</ul>\n<p>void 是JavaScript 的一个运算符，void(0)就是什么都不做的意思，这个方法据说有兼容性问题，但是我目前还没有发现，为确保万全，就没有使用这个方法。</p>\n<ul>\n<li>将a标签，设置disabled为true属性</li>\n</ul>\n<p>在项目中使用的解决方法就是这个，给a标签加上disabled属性，可以使得在a标签上面的所有默认属性和事件，都失效，因为除了跳转页面，无需设置其他的事件绑定，所以，此方法效果最好。</p>\n"},{"title":"记一次百度地图容器父级position定位产生的bug","date":"2020-01-11T11:40:55.000Z","_content":"\n\n\n> 最近在做一个地图选点的功能，业务逻辑是这样的：页面上有按钮，点击弹出弹窗，弹窗里有地图，可以在地图上选点，然后获取经纬度，赋值给页面中的Input框。页面截图如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200111/1.png?raw=true)   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200111/2.png?raw=true)   \n\n### 简介\n\n> 我们来分析下，主要的业务流程：点击定位按钮，初始化地图，然后就是用户选点，确定按钮，更改经纬度的值，这里js逻辑很简单，不做过多阐述。\n\n> 一般这样的页面，我们很轻松可以写出如下的元素结构：\n```html\n<div class=\"pop-wrap\">\n    <div class=\"pop\">\n        <div class=\"map-container\"></div>\n    </div>\n</div>\n```\n> 我们的弹窗布局是典型的完全居中式布局，那么这又是个经典的布局模式。完全居中的方式有很多种：\n\n1. 使用绝对定位布局\n> 使用绝对定位布局，那么就意味着脱离的文档流：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n}\n.pop {\n    height:600px;\n    width:800px;  \n    position:absolute;\n    top:50%;\n    left:50%;\n    \n    //方式1 这里的负值margin，我们需要显示设置宽高，并且为宽高值的一半\n    margin-left:-400px;\n    margin-top:-300px;  \n    \n    \n    //方式2 不需要设置宽高，开启渲染加速\n    transform:translate3d(-50%,-50%,0) \n    \n    //方式3  也需要设置宽高 \n    margin:auto;\n    top:0;\n    left:0;\n    bottom:0;\n    right:0;\n}\n```\n2. flex布局\n\n> 使用flex就比较简单了  属性设在父级就可以了  而且子元素不用设置宽高：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n    display:flex;\n    justify-content:center;\n    align-items:center\n}\n.pop {\n    \n}\n```\n3. table布局\n\n> table布局也可以达到，但是一般不建议使用：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n    display:table;\n}\n.pop {\n    display:table-cell\n}\n```\n\n\n### 出问题的地方\n> 那么实际，我使用的是第一种布局，也就是position absolute + 负margin的，这种方式兼容性要稍微好一些，但是在地图加载之后，测试出的问题，有下面这两个：\n* 窗口弹出之后，可以拖动，但是经常出现无法正常缩放\n* 缩放可以缩放，但是缩放中心点偏移很多\n\n### 解决方式\n\n1. 无法缩放的解决\n\n> 根据以前遇到关于百度地图position相关的问题，缩放不正常这个问题，一般是因为容器定位或者父级定位的问题，关键就在于，容器父级有脱离文档流的定位的时候，如上面的.pop的div，地图的缩放就会出现问题，但这种问题，不是必然出现。\n\n> 仔细询问了产品，项目兼容的范围，是否可以换用flex，得到肯定的答复之后，我决定将.pop的position给正常化，改成flex的方式去完成居中的布局。\n\n2. 缩放偏移的解决\n\n> 经过排查，我发现，只要页面出现滚动条，那么滚轮在地图上操作，就会出现缩放中心点偏移的奇怪现象，那么也很简单，当弹窗弹出的时候，将body overflow hidden掉，关闭弹窗再复原，就可以解决。\n\n\n\n\n","source":"_posts/记一次百度地图容器父级position定位产生的bug.md","raw":"---\ntitle: 记一次百度地图容器父级position定位产生的bug\ndate: 2020-01-11 19:40:55\ntags:\n  - 百度地图\n  - css\ncategories:\n  - 百度地图\n  - css\n---\n\n\n\n> 最近在做一个地图选点的功能，业务逻辑是这样的：页面上有按钮，点击弹出弹窗，弹窗里有地图，可以在地图上选点，然后获取经纬度，赋值给页面中的Input框。页面截图如下：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200111/1.png?raw=true)   \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20200111/2.png?raw=true)   \n\n### 简介\n\n> 我们来分析下，主要的业务流程：点击定位按钮，初始化地图，然后就是用户选点，确定按钮，更改经纬度的值，这里js逻辑很简单，不做过多阐述。\n\n> 一般这样的页面，我们很轻松可以写出如下的元素结构：\n```html\n<div class=\"pop-wrap\">\n    <div class=\"pop\">\n        <div class=\"map-container\"></div>\n    </div>\n</div>\n```\n> 我们的弹窗布局是典型的完全居中式布局，那么这又是个经典的布局模式。完全居中的方式有很多种：\n\n1. 使用绝对定位布局\n> 使用绝对定位布局，那么就意味着脱离的文档流：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n}\n.pop {\n    height:600px;\n    width:800px;  \n    position:absolute;\n    top:50%;\n    left:50%;\n    \n    //方式1 这里的负值margin，我们需要显示设置宽高，并且为宽高值的一半\n    margin-left:-400px;\n    margin-top:-300px;  \n    \n    \n    //方式2 不需要设置宽高，开启渲染加速\n    transform:translate3d(-50%,-50%,0) \n    \n    //方式3  也需要设置宽高 \n    margin:auto;\n    top:0;\n    left:0;\n    bottom:0;\n    right:0;\n}\n```\n2. flex布局\n\n> 使用flex就比较简单了  属性设在父级就可以了  而且子元素不用设置宽高：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n    display:flex;\n    justify-content:center;\n    align-items:center\n}\n.pop {\n    \n}\n```\n3. table布局\n\n> table布局也可以达到，但是一般不建议使用：\n\n```css\n.pop-wrap {\n    position:fixed;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n    display:table;\n}\n.pop {\n    display:table-cell\n}\n```\n\n\n### 出问题的地方\n> 那么实际，我使用的是第一种布局，也就是position absolute + 负margin的，这种方式兼容性要稍微好一些，但是在地图加载之后，测试出的问题，有下面这两个：\n* 窗口弹出之后，可以拖动，但是经常出现无法正常缩放\n* 缩放可以缩放，但是缩放中心点偏移很多\n\n### 解决方式\n\n1. 无法缩放的解决\n\n> 根据以前遇到关于百度地图position相关的问题，缩放不正常这个问题，一般是因为容器定位或者父级定位的问题，关键就在于，容器父级有脱离文档流的定位的时候，如上面的.pop的div，地图的缩放就会出现问题，但这种问题，不是必然出现。\n\n> 仔细询问了产品，项目兼容的范围，是否可以换用flex，得到肯定的答复之后，我决定将.pop的position给正常化，改成flex的方式去完成居中的布局。\n\n2. 缩放偏移的解决\n\n> 经过排查，我发现，只要页面出现滚动条，那么滚轮在地图上操作，就会出现缩放中心点偏移的奇怪现象，那么也很简单，当弹窗弹出的时候，将body overflow hidden掉，关闭弹窗再复原，就可以解决。\n\n\n\n\n","slug":"记一次百度地图容器父级position定位产生的bug","published":1,"updated":"2020-01-11T11:41:59.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn4004emsvibm7y0bzq","content":"<blockquote>\n<p>最近在做一个地图选点的功能，业务逻辑是这样的：页面上有按钮，点击弹出弹窗，弹窗里有地图，可以在地图上选点，然后获取经纬度，赋值给页面中的Input框。页面截图如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200111/1.png?raw=true\">   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200111/2.png?raw=true\">   </p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>我们来分析下，主要的业务流程：点击定位按钮，初始化地图，然后就是用户选点，确定按钮，更改经纬度的值，这里js逻辑很简单，不做过多阐述。</p>\n</blockquote>\n<blockquote>\n<p>一般这样的页面，我们很轻松可以写出如下的元素结构：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;map-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们的弹窗布局是典型的完全居中式布局，那么这又是个经典的布局模式。完全居中的方式有很多种：</p>\n</blockquote>\n<ol>\n<li>使用绝对定位布局<blockquote>\n<p>使用绝对定位布局，那么就意味着脱离的文档流：</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">800px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式1 这里的负值margin，我们需要显示设置宽高，并且为宽高值的一半</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-left</span><span class=\"selector-pseudo\">:-400px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-top</span><span class=\"selector-pseudo\">:-300px</span>;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式2 不需要设置宽高，开启渲染加速</span><br><span class=\"line\">    <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate3d(-50</span>%,<span class=\"selector-tag\">-50</span>%,0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式3  也需要设置宽高 </span><br><span class=\"line\">    <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>flex布局</li>\n</ol>\n<blockquote>\n<p>使用flex就比较简单了  属性设在父级就可以了  而且子元素不用设置宽高：</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>:center</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>table布局</li>\n</ol>\n<blockquote>\n<p>table布局也可以达到，但是一般不建议使用：</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"出问题的地方\"><a href=\"#出问题的地方\" class=\"headerlink\" title=\"出问题的地方\"></a>出问题的地方</h3><blockquote>\n<p>那么实际，我使用的是第一种布局，也就是position absolute + 负margin的，这种方式兼容性要稍微好一些，但是在地图加载之后，测试出的问题，有下面这两个：</p>\n</blockquote>\n<ul>\n<li>窗口弹出之后，可以拖动，但是经常出现无法正常缩放</li>\n<li>缩放可以缩放，但是缩放中心点偏移很多</li>\n</ul>\n<h3 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h3><ol>\n<li>无法缩放的解决</li>\n</ol>\n<blockquote>\n<p>根据以前遇到关于百度地图position相关的问题，缩放不正常这个问题，一般是因为容器定位或者父级定位的问题，关键就在于，容器父级有脱离文档流的定位的时候，如上面的.pop的div，地图的缩放就会出现问题，但这种问题，不是必然出现。</p>\n</blockquote>\n<blockquote>\n<p>仔细询问了产品，项目兼容的范围，是否可以换用flex，得到肯定的答复之后，我决定将.pop的position给正常化，改成flex的方式去完成居中的布局。</p>\n</blockquote>\n<ol start=\"2\">\n<li>缩放偏移的解决</li>\n</ol>\n<blockquote>\n<p>经过排查，我发现，只要页面出现滚动条，那么滚轮在地图上操作，就会出现缩放中心点偏移的奇怪现象，那么也很简单，当弹窗弹出的时候，将body overflow hidden掉，关闭弹窗再复原，就可以解决。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>最近在做一个地图选点的功能，业务逻辑是这样的：页面上有按钮，点击弹出弹窗，弹窗里有地图，可以在地图上选点，然后获取经纬度，赋值给页面中的Input框。页面截图如下：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200111/1.png?raw=true\">   </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20200111/2.png?raw=true\">   </p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>我们来分析下，主要的业务流程：点击定位按钮，初始化地图，然后就是用户选点，确定按钮，更改经纬度的值，这里js逻辑很简单，不做过多阐述。</p>\n</blockquote>\n<blockquote>\n<p>一般这样的页面，我们很轻松可以写出如下的元素结构：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;map-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们的弹窗布局是典型的完全居中式布局，那么这又是个经典的布局模式。完全居中的方式有很多种：</p>\n</blockquote>\n<ol>\n<li>使用绝对定位布局<blockquote>\n<p>使用绝对定位布局，那么就意味着脱离的文档流：</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">800px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式1 这里的负值margin，我们需要显示设置宽高，并且为宽高值的一半</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-left</span><span class=\"selector-pseudo\">:-400px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-top</span><span class=\"selector-pseudo\">:-300px</span>;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式2 不需要设置宽高，开启渲染加速</span><br><span class=\"line\">    <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate3d(-50</span>%,<span class=\"selector-tag\">-50</span>%,0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    //方式3  也需要设置宽高 </span><br><span class=\"line\">    <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">bottom</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">right</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>flex布局</li>\n</ol>\n<blockquote>\n<p>使用flex就比较简单了  属性设在父级就可以了  而且子元素不用设置宽高：</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>:center</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>table布局</li>\n</ol>\n<blockquote>\n<p>table布局也可以达到，但是一般不建议使用：</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"出问题的地方\"><a href=\"#出问题的地方\" class=\"headerlink\" title=\"出问题的地方\"></a>出问题的地方</h3><blockquote>\n<p>那么实际，我使用的是第一种布局，也就是position absolute + 负margin的，这种方式兼容性要稍微好一些，但是在地图加载之后，测试出的问题，有下面这两个：</p>\n</blockquote>\n<ul>\n<li>窗口弹出之后，可以拖动，但是经常出现无法正常缩放</li>\n<li>缩放可以缩放，但是缩放中心点偏移很多</li>\n</ul>\n<h3 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h3><ol>\n<li>无法缩放的解决</li>\n</ol>\n<blockquote>\n<p>根据以前遇到关于百度地图position相关的问题，缩放不正常这个问题，一般是因为容器定位或者父级定位的问题，关键就在于，容器父级有脱离文档流的定位的时候，如上面的.pop的div，地图的缩放就会出现问题，但这种问题，不是必然出现。</p>\n</blockquote>\n<blockquote>\n<p>仔细询问了产品，项目兼容的范围，是否可以换用flex，得到肯定的答复之后，我决定将.pop的position给正常化，改成flex的方式去完成居中的布局。</p>\n</blockquote>\n<ol start=\"2\">\n<li>缩放偏移的解决</li>\n</ol>\n<blockquote>\n<p>经过排查，我发现，只要页面出现滚动条，那么滚轮在地图上操作，就会出现缩放中心点偏移的奇怪现象，那么也很简单，当弹窗弹出的时候，将body overflow hidden掉，关闭弹窗再复原，就可以解决。</p>\n</blockquote>\n"},{"title":"记一次Transform属性导致的z-index失效问题","date":"2018-09-02T14:02:27.000Z","_content":"\n\n\n在最近的项目中，遇到了这样一个问题，页面中，有百度地图的图层，以及一个fixed定位的隐藏层，在页面进来后，点击按钮，显示fixed的隐藏层，但是当地图加载好之后，这个隐藏层就会消失掉。这个问题，真的是太奇怪了。\n\n一开始，我以为是z-index的缘故，因为我确实没有给隐藏层加上z-index属性，所以，可能大概也许应该是z-index没设置的原因么？于是便将z-index值设成了9999最大，后来发现，还是不行，地图层依旧会把隐藏层给覆盖掉。\n\n难道是百度地图的z-index比9999还要高么？？？查看了页面结构，发现，百度地图的z-index是0......，好吧，那会是什么原因导致了隐藏层的z-index失效呢？\n\n其实，导致z-index失效的问题有很多种：\n\n* 父标签position属性为relative\n* 该标签有float属性\n\n当然，所对应的解决方法也很简单：\n\n* position:relative改为position:absolute\n* 去除浮动属性\n\n但是，经过我的仔细检查，发现，这次的z-index失效，并不是上述两个原因导致的，与上述两个原因没有任何的关系。那么通过一顿搜索和查阅，发现，还有一种让z-index失效的可能性，就是CSS3的Transform。\n\n项目中，所引入的百度地图，可能里面确实使用到的css3 transform的属性，所以才导致了z-index不生效吧。那这其中的原理是怎么样的，为什么会产生这种奇怪的问题呢？\n\n这里涉及到一个 stacking context (层叠上下文)的概念。\n\n给元素设置transform属性会创建一个新的stacking context。\n\n看下面的代码：\n\n```html\n<div class=\"test test-1\">\n</div>\n<div class=\"test test-2\">\n</div>\n```\n\n```css\n.test {\n    width: 100px;\n    height: 100px;\n}\n\n.test-1 {\n    -webkit-transform: scale(.9);\n    transform: scale(.9);\n    /*opacity: 0.9*/\n    background: #f20;\n}\n\n.test-2 {\n    margin-top: -50px;\n    background: #000;\n}\n```\n\n上面这个例子中，两个div都没有设置任何position，如果没有给test-1添加transform属性的话，第二个div将会覆盖第一个div。但是如果设置了transform的话呢？由于transform会创建一个新的stacking context。在层级关系上就要比test-2高一级，因此，显示在上面。\n\n那么再看下面的代码：\n```html\n<div class=\"test test-1\">\n</div>\n<div class=\"test test-2\">\n</div>\n```\n\n```css\n.test {\n    width: 100px;\n    height: 100px;\n}\n\n.test-1 {\n    position: relative;\n    background: #f20;\n}\n\n.test-2 {\n    -webkit-transform: scale(.9);\n    transform: scale(.9);\n    margin-top: -50px;\n    background: #000;\n}\n```\n\n这个例子是对上面那个例子作了个简单的修改。我们给test-1添加了一个position: relative，test-2没有任何position属性，只是添加了一个transform的属性。如果不看预览页面的话，可能会以为test-1会显示在test-2上方，其实不然。由于transform会创建新的stacking context，同时test-2在文档中又处于test-1的后面，所以最终的效果是test-2显示在test-1的上方。\n\n通过上面两个例子，我们可以认为，导致这次z-index失效的原因，是因为，百度地图使用了transform，进而导致了产生了新的层叠上下文，由于地图层比隐藏层靠后生成，因此，无论隐藏层设置多大的z-index，地图层都会盖住隐藏层，所以，导致z-index失效，页面就出现了bug，那么如何去解决这样的问题呢？\n\n重点来了，我们知道，设置元素z轴位置的，可不止z-index一种，而且，z-index必须是要求元素有非static定位，才能生效。那么，还有一种方式么？\n\n我们简单思考下，既然是tranform属性，创建出的层叠上下文，导致了z-index失效，那么我们可以用以毒攻毒的方式，使用transform的某个属性，来给隐藏层同样创建出层叠上下文啊，这样，就不会存在层级上面的落差了，其实正确答案是有的，transform里的translate属性，有三种，其中translateZ,就是调节元素相对于z轴层叠顺序的：\n\n```css\nele {\n  transform:translateZ(300px);\n}\n\n```\n\n设置的值越高，其图层显示位置也越优先。\n\n比如当前这个问题，百度地图层调用了transform导致了地图层的层级变高，那么默认的，可以认为是被设置成了translateZ(0)\n\n那么，只要我们在隐藏层元素上，同样设置translateZ属性，但只要值比0大，那么，肯定都是要比地图层高的，那么，隐藏层被地图层给遮掉的问题就不会有啦\n\n感兴趣的同学私底下可以试试，使用translateZ替代z-index来解决因为Transform属性导致z-index失效的问题，是很简洁靠谱的。\n","source":"_posts/记一次Transform属性导致的z-index失效问题.md","raw":"---\ntitle: 记一次Transform属性导致的z-index失效问题\ndate: 2018-09-02 22:02:27\ntags:\n---\n\n\n\n在最近的项目中，遇到了这样一个问题，页面中，有百度地图的图层，以及一个fixed定位的隐藏层，在页面进来后，点击按钮，显示fixed的隐藏层，但是当地图加载好之后，这个隐藏层就会消失掉。这个问题，真的是太奇怪了。\n\n一开始，我以为是z-index的缘故，因为我确实没有给隐藏层加上z-index属性，所以，可能大概也许应该是z-index没设置的原因么？于是便将z-index值设成了9999最大，后来发现，还是不行，地图层依旧会把隐藏层给覆盖掉。\n\n难道是百度地图的z-index比9999还要高么？？？查看了页面结构，发现，百度地图的z-index是0......，好吧，那会是什么原因导致了隐藏层的z-index失效呢？\n\n其实，导致z-index失效的问题有很多种：\n\n* 父标签position属性为relative\n* 该标签有float属性\n\n当然，所对应的解决方法也很简单：\n\n* position:relative改为position:absolute\n* 去除浮动属性\n\n但是，经过我的仔细检查，发现，这次的z-index失效，并不是上述两个原因导致的，与上述两个原因没有任何的关系。那么通过一顿搜索和查阅，发现，还有一种让z-index失效的可能性，就是CSS3的Transform。\n\n项目中，所引入的百度地图，可能里面确实使用到的css3 transform的属性，所以才导致了z-index不生效吧。那这其中的原理是怎么样的，为什么会产生这种奇怪的问题呢？\n\n这里涉及到一个 stacking context (层叠上下文)的概念。\n\n给元素设置transform属性会创建一个新的stacking context。\n\n看下面的代码：\n\n```html\n<div class=\"test test-1\">\n</div>\n<div class=\"test test-2\">\n</div>\n```\n\n```css\n.test {\n    width: 100px;\n    height: 100px;\n}\n\n.test-1 {\n    -webkit-transform: scale(.9);\n    transform: scale(.9);\n    /*opacity: 0.9*/\n    background: #f20;\n}\n\n.test-2 {\n    margin-top: -50px;\n    background: #000;\n}\n```\n\n上面这个例子中，两个div都没有设置任何position，如果没有给test-1添加transform属性的话，第二个div将会覆盖第一个div。但是如果设置了transform的话呢？由于transform会创建一个新的stacking context。在层级关系上就要比test-2高一级，因此，显示在上面。\n\n那么再看下面的代码：\n```html\n<div class=\"test test-1\">\n</div>\n<div class=\"test test-2\">\n</div>\n```\n\n```css\n.test {\n    width: 100px;\n    height: 100px;\n}\n\n.test-1 {\n    position: relative;\n    background: #f20;\n}\n\n.test-2 {\n    -webkit-transform: scale(.9);\n    transform: scale(.9);\n    margin-top: -50px;\n    background: #000;\n}\n```\n\n这个例子是对上面那个例子作了个简单的修改。我们给test-1添加了一个position: relative，test-2没有任何position属性，只是添加了一个transform的属性。如果不看预览页面的话，可能会以为test-1会显示在test-2上方，其实不然。由于transform会创建新的stacking context，同时test-2在文档中又处于test-1的后面，所以最终的效果是test-2显示在test-1的上方。\n\n通过上面两个例子，我们可以认为，导致这次z-index失效的原因，是因为，百度地图使用了transform，进而导致了产生了新的层叠上下文，由于地图层比隐藏层靠后生成，因此，无论隐藏层设置多大的z-index，地图层都会盖住隐藏层，所以，导致z-index失效，页面就出现了bug，那么如何去解决这样的问题呢？\n\n重点来了，我们知道，设置元素z轴位置的，可不止z-index一种，而且，z-index必须是要求元素有非static定位，才能生效。那么，还有一种方式么？\n\n我们简单思考下，既然是tranform属性，创建出的层叠上下文，导致了z-index失效，那么我们可以用以毒攻毒的方式，使用transform的某个属性，来给隐藏层同样创建出层叠上下文啊，这样，就不会存在层级上面的落差了，其实正确答案是有的，transform里的translate属性，有三种，其中translateZ,就是调节元素相对于z轴层叠顺序的：\n\n```css\nele {\n  transform:translateZ(300px);\n}\n\n```\n\n设置的值越高，其图层显示位置也越优先。\n\n比如当前这个问题，百度地图层调用了transform导致了地图层的层级变高，那么默认的，可以认为是被设置成了translateZ(0)\n\n那么，只要我们在隐藏层元素上，同样设置translateZ属性，但只要值比0大，那么，肯定都是要比地图层高的，那么，隐藏层被地图层给遮掉的问题就不会有啦\n\n感兴趣的同学私底下可以试试，使用translateZ替代z-index来解决因为Transform属性导致z-index失效的问题，是很简洁靠谱的。\n","slug":"记一次Transform属性导致的z-index失效问题","published":1,"updated":"2018-09-02T14:05:30.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn6004hmsvi0jpa5it4","content":"<p>在最近的项目中，遇到了这样一个问题，页面中，有百度地图的图层，以及一个fixed定位的隐藏层，在页面进来后，点击按钮，显示fixed的隐藏层，但是当地图加载好之后，这个隐藏层就会消失掉。这个问题，真的是太奇怪了。</p>\n<p>一开始，我以为是z-index的缘故，因为我确实没有给隐藏层加上z-index属性，所以，可能大概也许应该是z-index没设置的原因么？于是便将z-index值设成了9999最大，后来发现，还是不行，地图层依旧会把隐藏层给覆盖掉。</p>\n<p>难道是百度地图的z-index比9999还要高么？？？查看了页面结构，发现，百度地图的z-index是0……，好吧，那会是什么原因导致了隐藏层的z-index失效呢？</p>\n<p>其实，导致z-index失效的问题有很多种：</p>\n<ul>\n<li>父标签position属性为relative</li>\n<li>该标签有float属性</li>\n</ul>\n<p>当然，所对应的解决方法也很简单：</p>\n<ul>\n<li>position:relative改为position:absolute</li>\n<li>去除浮动属性</li>\n</ul>\n<p>但是，经过我的仔细检查，发现，这次的z-index失效，并不是上述两个原因导致的，与上述两个原因没有任何的关系。那么通过一顿搜索和查阅，发现，还有一种让z-index失效的可能性，就是CSS3的Transform。</p>\n<p>项目中，所引入的百度地图，可能里面确实使用到的css3 transform的属性，所以才导致了z-index不生效吧。那这其中的原理是怎么样的，为什么会产生这种奇怪的问题呢？</p>\n<p>这里涉及到一个 stacking context (层叠上下文)的概念。</p>\n<p>给元素设置transform属性会创建一个新的stacking context。</p>\n<p>看下面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*opacity: 0.9*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子中，两个div都没有设置任何position，如果没有给test-1添加transform属性的话，第二个div将会覆盖第一个div。但是如果设置了transform的话呢？由于transform会创建一个新的stacking context。在层级关系上就要比test-2高一级，因此，显示在上面。</p>\n<p>那么再看下面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子是对上面那个例子作了个简单的修改。我们给test-1添加了一个position: relative，test-2没有任何position属性，只是添加了一个transform的属性。如果不看预览页面的话，可能会以为test-1会显示在test-2上方，其实不然。由于transform会创建新的stacking context，同时test-2在文档中又处于test-1的后面，所以最终的效果是test-2显示在test-1的上方。</p>\n<p>通过上面两个例子，我们可以认为，导致这次z-index失效的原因，是因为，百度地图使用了transform，进而导致了产生了新的层叠上下文，由于地图层比隐藏层靠后生成，因此，无论隐藏层设置多大的z-index，地图层都会盖住隐藏层，所以，导致z-index失效，页面就出现了bug，那么如何去解决这样的问题呢？</p>\n<p>重点来了，我们知道，设置元素z轴位置的，可不止z-index一种，而且，z-index必须是要求元素有非static定位，才能生效。那么，还有一种方式么？</p>\n<p>我们简单思考下，既然是tranform属性，创建出的层叠上下文，导致了z-index失效，那么我们可以用以毒攻毒的方式，使用transform的某个属性，来给隐藏层同样创建出层叠上下文啊，这样，就不会存在层级上面的落差了，其实正确答案是有的，transform里的translate属性，有三种，其中translateZ,就是调节元素相对于z轴层叠顺序的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateZ</span>(<span class=\"number\">300px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>设置的值越高，其图层显示位置也越优先。</p>\n<p>比如当前这个问题，百度地图层调用了transform导致了地图层的层级变高，那么默认的，可以认为是被设置成了translateZ(0)</p>\n<p>那么，只要我们在隐藏层元素上，同样设置translateZ属性，但只要值比0大，那么，肯定都是要比地图层高的，那么，隐藏层被地图层给遮掉的问题就不会有啦</p>\n<p>感兴趣的同学私底下可以试试，使用translateZ替代z-index来解决因为Transform属性导致z-index失效的问题，是很简洁靠谱的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在最近的项目中，遇到了这样一个问题，页面中，有百度地图的图层，以及一个fixed定位的隐藏层，在页面进来后，点击按钮，显示fixed的隐藏层，但是当地图加载好之后，这个隐藏层就会消失掉。这个问题，真的是太奇怪了。</p>\n<p>一开始，我以为是z-index的缘故，因为我确实没有给隐藏层加上z-index属性，所以，可能大概也许应该是z-index没设置的原因么？于是便将z-index值设成了9999最大，后来发现，还是不行，地图层依旧会把隐藏层给覆盖掉。</p>\n<p>难道是百度地图的z-index比9999还要高么？？？查看了页面结构，发现，百度地图的z-index是0……，好吧，那会是什么原因导致了隐藏层的z-index失效呢？</p>\n<p>其实，导致z-index失效的问题有很多种：</p>\n<ul>\n<li>父标签position属性为relative</li>\n<li>该标签有float属性</li>\n</ul>\n<p>当然，所对应的解决方法也很简单：</p>\n<ul>\n<li>position:relative改为position:absolute</li>\n<li>去除浮动属性</li>\n</ul>\n<p>但是，经过我的仔细检查，发现，这次的z-index失效，并不是上述两个原因导致的，与上述两个原因没有任何的关系。那么通过一顿搜索和查阅，发现，还有一种让z-index失效的可能性，就是CSS3的Transform。</p>\n<p>项目中，所引入的百度地图，可能里面确实使用到的css3 transform的属性，所以才导致了z-index不生效吧。那这其中的原理是怎么样的，为什么会产生这种奇怪的问题呢？</p>\n<p>这里涉及到一个 stacking context (层叠上下文)的概念。</p>\n<p>给元素设置transform属性会创建一个新的stacking context。</p>\n<p>看下面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*opacity: 0.9*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子中，两个div都没有设置任何position，如果没有给test-1添加transform属性的话，第二个div将会覆盖第一个div。但是如果设置了transform的话呢？由于transform会创建一个新的stacking context。在层级关系上就要比test-2高一级，因此，显示在上面。</p>\n<p>那么再看下面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test test-2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test-2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(.<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子是对上面那个例子作了个简单的修改。我们给test-1添加了一个position: relative，test-2没有任何position属性，只是添加了一个transform的属性。如果不看预览页面的话，可能会以为test-1会显示在test-2上方，其实不然。由于transform会创建新的stacking context，同时test-2在文档中又处于test-1的后面，所以最终的效果是test-2显示在test-1的上方。</p>\n<p>通过上面两个例子，我们可以认为，导致这次z-index失效的原因，是因为，百度地图使用了transform，进而导致了产生了新的层叠上下文，由于地图层比隐藏层靠后生成，因此，无论隐藏层设置多大的z-index，地图层都会盖住隐藏层，所以，导致z-index失效，页面就出现了bug，那么如何去解决这样的问题呢？</p>\n<p>重点来了，我们知道，设置元素z轴位置的，可不止z-index一种，而且，z-index必须是要求元素有非static定位，才能生效。那么，还有一种方式么？</p>\n<p>我们简单思考下，既然是tranform属性，创建出的层叠上下文，导致了z-index失效，那么我们可以用以毒攻毒的方式，使用transform的某个属性，来给隐藏层同样创建出层叠上下文啊，这样，就不会存在层级上面的落差了，其实正确答案是有的，transform里的translate属性，有三种，其中translateZ,就是调节元素相对于z轴层叠顺序的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ele</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateZ</span>(<span class=\"number\">300px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>设置的值越高，其图层显示位置也越优先。</p>\n<p>比如当前这个问题，百度地图层调用了transform导致了地图层的层级变高，那么默认的，可以认为是被设置成了translateZ(0)</p>\n<p>那么，只要我们在隐藏层元素上，同样设置translateZ属性，但只要值比0大，那么，肯定都是要比地图层高的，那么，隐藏层被地图层给遮掉的问题就不会有啦</p>\n<p>感兴趣的同学私底下可以试试，使用translateZ替代z-index来解决因为Transform属性导致z-index失效的问题，是很简洁靠谱的。</p>\n"},{"title":"记一次项目里关于el-scrollbar的使用","date":"2019-11-12T13:40:57.000Z","_content":"\n\n## 记一次项目里关于el-scrollbar组件的使用\n\n### 由来\n\n> 年初开发的泾县的项目，其中包含了触控一体机的四个系统，其实就是使用chrome浏览器进行包裹的外壳，里面就是纯web的页面。这几个系统，这几天在上线，线上发现了这样的一个奇怪的问题，就是项目中，因为优化用户使用体验，对于列表的滚动，统一使用了基于Vue的一个组件，better-scroll。而这个组件，在一体机的环境里，无法滚动，意思就是说，手指操作无法进行列表的滚动。\n\n> 其实better-scroll组件，在移动端使用的较多，但是后面更新的版本，支持了PC端的鼠标操作，因此在PC端，也可以使用这个插件，来代替浏览器本身的滚动以及丑陋的滚动条了。这些功能其实当时开发的时候，使用浏览器，是完全可以操作，没有任何问题的。也是第一次在一体机环境里使用better-scroll这种东西，当时心里面有预案，万一将来上生产了，出问题怎么办，要有planB。\n\n### 目前使用的方式\n\n> 其实项目里的scroll插件，已经经过了一次简单的封装，能够复用：\n\n```\n<template>\n  <div class=\"wrapper\" ref=\"wrapper\">\n    <div class=\"rel wrap-inner\">\n      <slot></slot>\n      <div class=\"tc f30 c999 bottom-tip\">{{bottomTip}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BScroll from \"better-scroll\";\n\nexport default {\n  name: \"scroll\",\n  props: {\n    /**\n     * 1 滚动的时候会派发scroll事件，会截流。\n     * 2 滚动的时候实时派发scroll事件，不会截流。\n     * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n     */\n    probeType: {\n      type: Number,\n      default: 1\n    },\n    /**\n     * 点击列表是否派发click事件\n     */\n    click: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否开启横向滚动\n     */\n    scrollX: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 是否派发滚动事件\n     */\n    listenScroll: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 列表的数据\n     */\n    data: {\n      type: Array,\n      default: null\n    },\n    /**\n     * 是否派发滚动到底部的事件，用于上拉加载\n     */\n    pullup: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否派发顶部下拉的事件，用于下拉刷新\n     */\n    pulldown: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否派发列表滚动开始的事件\n     */\n    beforeScroll: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 当数据更新后，刷新scroll的延时。\n     */\n    refreshDelay: {\n      type: Number,\n      default: 20\n    }\n  },\n  data() {\n    return {\n      topTip: \"下拉刷新\",\n      bottomTip: \"\",\n      noMoreData: false\n    };\n  },\n  mounted() {\n    // 保证在DOM渲染完毕后初始化better-scroll\n    setTimeout(() => {\n      this._initScroll();\n    }, 20);\n  },\n  methods: {\n    _initScroll() {\n      if (!this.$refs.wrapper) {\n        return;\n      }\n      // better-scroll的初始化\n      this.scroll = new BScroll(this.$refs.wrapper, {\n        probeType: this.probeType,\n        click: this.click,\n        scrollX: this.scrollX\n      });\n\n      // 是否派发滚动事件\n      if (this.listenScroll) {\n        this.scroll.on(\"scroll\", pos => {\n          this.$emit(\"scroll\", pos);\n          // 下拉动作\n          if (pos.y > 50) {\n            this.topTip = \"释放立即刷新\";\n          }\n        });\n      }\n\n      // 是否派发滚动到底部事件，用于上拉加载\n      if (this.pullup) {\n        this.scroll.on(\"scrollEnd\", () => {\n          this.topTip = \"下拉刷新\";\n          // 滚动到底部\n          if (this.scroll.y <= this.scroll.maxScrollY + 50) {\n            this.$emit(\"scrollToEnd\");\n          }\n        });\n      }\n\n      // 是否派发顶部下拉事件，用于下拉刷新\n      if (this.pulldown) {\n        this.scroll.on(\"touchEnd\", pos => {\n          // 下拉动作\n          if (pos.y > 50) {\n            this.$emit(\"pulldown\");\n          }\n        });\n      }\n\n      // 是否派发列表滚动开始的事件\n      if (this.beforeScroll) {\n        this.scroll.on(\"beforeScrollStart\", () => {\n          this.$emit(\"beforeScroll\");\n        });\n      }\n    },\n    disable() {\n      // 代理better-scroll的disable方法\n      this.scroll && this.scroll.disable();\n    },\n    enable() {\n      // 代理better-scroll的enable方法\n      this.scroll && this.scroll.enable();\n    },\n    refresh() {\n      // 代理better-scroll的refresh方法\n      this.scroll && this.scroll.refresh();\n    },\n    scrollTo() {\n      // 代理better-scroll的scrollTo方法\n      this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n    },\n    scrollToElement() {\n      // 代理better-scroll的scrollToElement方法\n      this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments);\n    }\n  },\n  watch: {\n    // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\n    data() {\n      setTimeout(() => {\n        this.refresh();\n      }, this.refreshDelay);\n    },\n    noMoreData(val) {\n      if (val) {\n        this.bottomTip = \"没有更多数据了\";\n        this.scroll.closePullUp();\n      } else {\n        this.bottomTip = \"\";\n        this.scroll.openPullUp();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n\n.bottom-tip {\n  height: 80px;\n  line-height: 80px;\n}\n</style>\n\n```\n\n> 我们在使用的时候，就可以直接像下面这样使用：\n\n```\n<scroll  class=\"wrapper\"  :data=\"cardList\" :pulldown=\"false\" @scrollToEnd=\"scrollToEnd\">\n        <div class=\"wrapped\"></div>\n</scroll>\n```\n\n### 寻找替代\n\n> 其实问题很简单，因为一体机内部普通的浏览器滚动，是没问题的，因此思路是只需要将scroll组件抹去，然后，使用浏览器的滚动方式。\n\n> 但是这样又引入了另一个问题，就是关于滚动条的美化，目前项目里滚动条的美化是使用jq插件，nicescroll，但是这种东西，有一个问题，首先vue里使用jq，确实不够简洁，其次，这东西不是每次初始化都能成功，即使是在mounted的nextTick的回调里，因此我们需要找到一个合适的替代的东西。\n\n```js\n//这种方式不是百分之百靠谱，存在缺陷\nmounted(){\n    this.$nextTick(function(){\n      $('#main').niceScroll({\n        cursorcolor: \"#d7d7d7\"\n      });\n    })\n  },\n```\n\n> 当我在百度的时候，无意中发现，竟然还有el-scrollbar这样一种东西，但是貌似我在elementUI文档上面，没见过这个家伙啊，后来仔细了解才知道，这个其实是官方文档未指明的组件，但是确实在select组件的下拉里，确实有这样的一个美化滚动条的操作，下面来看下使用方式：\n\n### 美化滚动\n\n```\n<div class=\"scroll\" >\n            <el-scrollbar ref=\"scroll\">\n                <ul class=\"list f26\">\n                    <li v-for=\"(item,index) in list\" :key=\"index\">\n                        <div class=\"info clearfix\">\n                            <div class=\"fl tc ell\">{{item.trainNum}}</div>\n                            <div class=\"fl tc ell\">{{item.departureStation}}-{{item.arrivalStation}}</div>\n                            <div class=\"fl tc ell\">{{item.trainType}}</div>\n                            <div class=\"fl tc ell\">{{item.drivingTime}}</div>\n                            <div class=\"fl tc ell\">{{item.arrivalTime}}</div>\n                        </div>\n                        <div class=\"line\">\n                            <div class=\"line-left tc fl\">途经站点</div>\n                            <div class=\"line-right\">\n                                <div v-if=\"!item.halfwayStation\" class=\"no-data-sp tc\">--暂无数据--</div>\n                                <div v-else>{{item.halfwayStation | arrowAdd}}</div>\n                            </div>\n                        </div>\n                    </li>\n\n                </ul>\n            </el-scrollbar>\n        </div>\n```\n\n> 上面代码可以看出来，结构很简单，需要一个外包裹层，定高，然后有个组件层e--scrollbar，里面就是滚动的内容。要注意的就是样式的设定：\n\n```\n.scroll {\n    height: 715px;\n    overflow: hidden;\n}\n\n.el-scrollbar {\n    height: 100%;\n}\n\n/deep/.el-scrollbar__wrap {\n    overflow-x: hidden; \n}\n\n```\n> deep属性可以在我们style设置scoped属性的时候，去覆盖外层的样式，这里我们需要设置下.el-scrollbar__wrap的样式，横向滚动为hidden，因为不设置的话，会出现一个横向滚动条。\n\n> 按照上面一顿骚操作，我们可以看出美化的效果了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/1.jpg?raw=true)\n\n### 完善交互\n\n> 既然美化的问题搞定了，那么剩下的，就是如何去完成better-scroll组件的滚动加载了，其实原理是想通的，在没有better-scroll组件之前，我们都是监听浏览器本身的滚动，来进行数据的加载交互，这里我们只需要监听滚动元素的scroll事件就可以了。\n\n> 但是仔细看下上面的结构，我们如何去获取发生滚动事件的这个元素呢？截图我们可以发现，实际上，el-scrollbar的作用，还隔了两层元素，真正的滚动，是触发在wrap这个元素上的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/2.png?raw=true)\n\n> 当时我在想，el-scrollbar这个好获取，通过this.$refs属性就可以：\n\n```\nconsole.log(this.$refs.scroll)\n\n```\n\n> 那如何去获取，wrap这个对象？我们试着打印一下el-scrollbar吧：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/3.png?raw=true)\n\n> 上图我们可以看到，this.$refs.scroll里还有$refs属性，里面有个wrap对象，就是我们需要找的触发滚动的元素！\n\n> 我们可以写出下面这样的监听代码：\n\n```\n\nmounted(){\n      this.$nextTick(function(){\n        let scroll = this.$refs.scroll\n        scroll.$refs.wrap.addEventListener('scroll',function(){\n          \n        })\n      })\n    },\n```\n\n> 那么有了监听代码，下面我们来实现具体的实现逻辑，首先，要判断，何时滚动触底，然后进行数据加载，其次，我们需要进行节流处理，因为滚动事件触发频率太高，需要人为进行节流，我们这里实现的思路就是采用标志位，请求前，关闭开关，请求回来之后打开开关。当数据全部加载完，则不发请求。\n\n> 正常说来，我们做PC端的滚动加载的时候，我们需要三个值，分别是视口高度，页面高度，以及滚动距离，其具体判定条件如下：\n\n```\n  页面高度  <=  视口高度 + 滚动距离\n```\n\n> 上面的公式，是当body滚动的时候，判断页面触底的方式，那么在我们这里，需要进行一下转换，我们需要使用滚动内容高度，代替页面高度，容器高度，代替视口高度,同时呢，我们对照看下掘金等网站的滚动加载操作，都是未至底部便进行数据请求，其实只需要加一个数值就可以：\n\n```\n    内容高度  <=  容器高度 + 滚动距离 + 50  //这里的50只是参考，作为提前加载的阈值\n```\n\n> 具体的逻辑实现如下\n\n```\nlet scroll = this.$refs.scroll\nscroll.$refs.wrap.addEventListener('scroll',function(){\n          if(this.scrollTop + scroll.$el.clientHeight + 50 >= this.scrollHeight){\n            //函数节流操作\n            if(!that.flag){\n              that.flag = true\n              that.currentPageNo++;\n              that.getList()\n            }\n\n          }\n        })\n```\n> scrollHeight实际上就是获取滚动内容的高度，$el实际上获取的就是组件元素的dom节点，我们可以通过clientHeight去获取它的实际高度，这里就是所谓的容器高度，scrollTop就是滚动条距离容器顶部的距离，也就是滚动距离了。接下来就是节流的常规操作，我们要记得在getLIst请求回来的时候，要把开关重置即可，如果没有更多数据了，则直接关掉开关就可以。\n\n### 总结\n\n> 上面说了这么多，也算是有点感慨，其实很多东西，不细心根本没法发现，当初就是不知道elmentUI有这种美化滚动条的东西，所以才用了niceScroll，还引入了jquery，这骚操作其实挺恶心，现在想来，以后在Vue项目里，如果是PC，那el-scrollbar真的是美化滚动条的最好选择，前提是，项目的UI框架使用的是elementUI,否则，还是要另寻他法，不然为了一个滚动条美化，还要去引入一个大的UI框架，是在是不值得。\n\n> 另外其实这个项目要解决的问题，首先是交互的问题，其次才是滚动条的美化，但是滚动条美化，又是必要的需求，可以简单总结出，交互是重要问题，美化是必要问题。\n\n\n\n\n\n","source":"_posts/记一次项目里关于el-scrollbar的使用.md","raw":"---\ntitle: 记一次项目里关于el-scrollbar的使用\ndate: 2019-11-12 21:40:57\ntags:\n  - elementUI\n  - scroll\ncategories:\n  - elementUI\n  - scroll\n---\n\n\n## 记一次项目里关于el-scrollbar组件的使用\n\n### 由来\n\n> 年初开发的泾县的项目，其中包含了触控一体机的四个系统，其实就是使用chrome浏览器进行包裹的外壳，里面就是纯web的页面。这几个系统，这几天在上线，线上发现了这样的一个奇怪的问题，就是项目中，因为优化用户使用体验，对于列表的滚动，统一使用了基于Vue的一个组件，better-scroll。而这个组件，在一体机的环境里，无法滚动，意思就是说，手指操作无法进行列表的滚动。\n\n> 其实better-scroll组件，在移动端使用的较多，但是后面更新的版本，支持了PC端的鼠标操作，因此在PC端，也可以使用这个插件，来代替浏览器本身的滚动以及丑陋的滚动条了。这些功能其实当时开发的时候，使用浏览器，是完全可以操作，没有任何问题的。也是第一次在一体机环境里使用better-scroll这种东西，当时心里面有预案，万一将来上生产了，出问题怎么办，要有planB。\n\n### 目前使用的方式\n\n> 其实项目里的scroll插件，已经经过了一次简单的封装，能够复用：\n\n```\n<template>\n  <div class=\"wrapper\" ref=\"wrapper\">\n    <div class=\"rel wrap-inner\">\n      <slot></slot>\n      <div class=\"tc f30 c999 bottom-tip\">{{bottomTip}}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BScroll from \"better-scroll\";\n\nexport default {\n  name: \"scroll\",\n  props: {\n    /**\n     * 1 滚动的时候会派发scroll事件，会截流。\n     * 2 滚动的时候实时派发scroll事件，不会截流。\n     * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n     */\n    probeType: {\n      type: Number,\n      default: 1\n    },\n    /**\n     * 点击列表是否派发click事件\n     */\n    click: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否开启横向滚动\n     */\n    scrollX: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 是否派发滚动事件\n     */\n    listenScroll: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 列表的数据\n     */\n    data: {\n      type: Array,\n      default: null\n    },\n    /**\n     * 是否派发滚动到底部的事件，用于上拉加载\n     */\n    pullup: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否派发顶部下拉的事件，用于下拉刷新\n     */\n    pulldown: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否派发列表滚动开始的事件\n     */\n    beforeScroll: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 当数据更新后，刷新scroll的延时。\n     */\n    refreshDelay: {\n      type: Number,\n      default: 20\n    }\n  },\n  data() {\n    return {\n      topTip: \"下拉刷新\",\n      bottomTip: \"\",\n      noMoreData: false\n    };\n  },\n  mounted() {\n    // 保证在DOM渲染完毕后初始化better-scroll\n    setTimeout(() => {\n      this._initScroll();\n    }, 20);\n  },\n  methods: {\n    _initScroll() {\n      if (!this.$refs.wrapper) {\n        return;\n      }\n      // better-scroll的初始化\n      this.scroll = new BScroll(this.$refs.wrapper, {\n        probeType: this.probeType,\n        click: this.click,\n        scrollX: this.scrollX\n      });\n\n      // 是否派发滚动事件\n      if (this.listenScroll) {\n        this.scroll.on(\"scroll\", pos => {\n          this.$emit(\"scroll\", pos);\n          // 下拉动作\n          if (pos.y > 50) {\n            this.topTip = \"释放立即刷新\";\n          }\n        });\n      }\n\n      // 是否派发滚动到底部事件，用于上拉加载\n      if (this.pullup) {\n        this.scroll.on(\"scrollEnd\", () => {\n          this.topTip = \"下拉刷新\";\n          // 滚动到底部\n          if (this.scroll.y <= this.scroll.maxScrollY + 50) {\n            this.$emit(\"scrollToEnd\");\n          }\n        });\n      }\n\n      // 是否派发顶部下拉事件，用于下拉刷新\n      if (this.pulldown) {\n        this.scroll.on(\"touchEnd\", pos => {\n          // 下拉动作\n          if (pos.y > 50) {\n            this.$emit(\"pulldown\");\n          }\n        });\n      }\n\n      // 是否派发列表滚动开始的事件\n      if (this.beforeScroll) {\n        this.scroll.on(\"beforeScrollStart\", () => {\n          this.$emit(\"beforeScroll\");\n        });\n      }\n    },\n    disable() {\n      // 代理better-scroll的disable方法\n      this.scroll && this.scroll.disable();\n    },\n    enable() {\n      // 代理better-scroll的enable方法\n      this.scroll && this.scroll.enable();\n    },\n    refresh() {\n      // 代理better-scroll的refresh方法\n      this.scroll && this.scroll.refresh();\n    },\n    scrollTo() {\n      // 代理better-scroll的scrollTo方法\n      this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n    },\n    scrollToElement() {\n      // 代理better-scroll的scrollToElement方法\n      this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments);\n    }\n  },\n  watch: {\n    // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\n    data() {\n      setTimeout(() => {\n        this.refresh();\n      }, this.refreshDelay);\n    },\n    noMoreData(val) {\n      if (val) {\n        this.bottomTip = \"没有更多数据了\";\n        this.scroll.closePullUp();\n      } else {\n        this.bottomTip = \"\";\n        this.scroll.openPullUp();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n\n.bottom-tip {\n  height: 80px;\n  line-height: 80px;\n}\n</style>\n\n```\n\n> 我们在使用的时候，就可以直接像下面这样使用：\n\n```\n<scroll  class=\"wrapper\"  :data=\"cardList\" :pulldown=\"false\" @scrollToEnd=\"scrollToEnd\">\n        <div class=\"wrapped\"></div>\n</scroll>\n```\n\n### 寻找替代\n\n> 其实问题很简单，因为一体机内部普通的浏览器滚动，是没问题的，因此思路是只需要将scroll组件抹去，然后，使用浏览器的滚动方式。\n\n> 但是这样又引入了另一个问题，就是关于滚动条的美化，目前项目里滚动条的美化是使用jq插件，nicescroll，但是这种东西，有一个问题，首先vue里使用jq，确实不够简洁，其次，这东西不是每次初始化都能成功，即使是在mounted的nextTick的回调里，因此我们需要找到一个合适的替代的东西。\n\n```js\n//这种方式不是百分之百靠谱，存在缺陷\nmounted(){\n    this.$nextTick(function(){\n      $('#main').niceScroll({\n        cursorcolor: \"#d7d7d7\"\n      });\n    })\n  },\n```\n\n> 当我在百度的时候，无意中发现，竟然还有el-scrollbar这样一种东西，但是貌似我在elementUI文档上面，没见过这个家伙啊，后来仔细了解才知道，这个其实是官方文档未指明的组件，但是确实在select组件的下拉里，确实有这样的一个美化滚动条的操作，下面来看下使用方式：\n\n### 美化滚动\n\n```\n<div class=\"scroll\" >\n            <el-scrollbar ref=\"scroll\">\n                <ul class=\"list f26\">\n                    <li v-for=\"(item,index) in list\" :key=\"index\">\n                        <div class=\"info clearfix\">\n                            <div class=\"fl tc ell\">{{item.trainNum}}</div>\n                            <div class=\"fl tc ell\">{{item.departureStation}}-{{item.arrivalStation}}</div>\n                            <div class=\"fl tc ell\">{{item.trainType}}</div>\n                            <div class=\"fl tc ell\">{{item.drivingTime}}</div>\n                            <div class=\"fl tc ell\">{{item.arrivalTime}}</div>\n                        </div>\n                        <div class=\"line\">\n                            <div class=\"line-left tc fl\">途经站点</div>\n                            <div class=\"line-right\">\n                                <div v-if=\"!item.halfwayStation\" class=\"no-data-sp tc\">--暂无数据--</div>\n                                <div v-else>{{item.halfwayStation | arrowAdd}}</div>\n                            </div>\n                        </div>\n                    </li>\n\n                </ul>\n            </el-scrollbar>\n        </div>\n```\n\n> 上面代码可以看出来，结构很简单，需要一个外包裹层，定高，然后有个组件层e--scrollbar，里面就是滚动的内容。要注意的就是样式的设定：\n\n```\n.scroll {\n    height: 715px;\n    overflow: hidden;\n}\n\n.el-scrollbar {\n    height: 100%;\n}\n\n/deep/.el-scrollbar__wrap {\n    overflow-x: hidden; \n}\n\n```\n> deep属性可以在我们style设置scoped属性的时候，去覆盖外层的样式，这里我们需要设置下.el-scrollbar__wrap的样式，横向滚动为hidden，因为不设置的话，会出现一个横向滚动条。\n\n> 按照上面一顿骚操作，我们可以看出美化的效果了：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/1.jpg?raw=true)\n\n### 完善交互\n\n> 既然美化的问题搞定了，那么剩下的，就是如何去完成better-scroll组件的滚动加载了，其实原理是想通的，在没有better-scroll组件之前，我们都是监听浏览器本身的滚动，来进行数据的加载交互，这里我们只需要监听滚动元素的scroll事件就可以了。\n\n> 但是仔细看下上面的结构，我们如何去获取发生滚动事件的这个元素呢？截图我们可以发现，实际上，el-scrollbar的作用，还隔了两层元素，真正的滚动，是触发在wrap这个元素上的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/2.png?raw=true)\n\n> 当时我在想，el-scrollbar这个好获取，通过this.$refs属性就可以：\n\n```\nconsole.log(this.$refs.scroll)\n\n```\n\n> 那如何去获取，wrap这个对象？我们试着打印一下el-scrollbar吧：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20191112/3.png?raw=true)\n\n> 上图我们可以看到，this.$refs.scroll里还有$refs属性，里面有个wrap对象，就是我们需要找的触发滚动的元素！\n\n> 我们可以写出下面这样的监听代码：\n\n```\n\nmounted(){\n      this.$nextTick(function(){\n        let scroll = this.$refs.scroll\n        scroll.$refs.wrap.addEventListener('scroll',function(){\n          \n        })\n      })\n    },\n```\n\n> 那么有了监听代码，下面我们来实现具体的实现逻辑，首先，要判断，何时滚动触底，然后进行数据加载，其次，我们需要进行节流处理，因为滚动事件触发频率太高，需要人为进行节流，我们这里实现的思路就是采用标志位，请求前，关闭开关，请求回来之后打开开关。当数据全部加载完，则不发请求。\n\n> 正常说来，我们做PC端的滚动加载的时候，我们需要三个值，分别是视口高度，页面高度，以及滚动距离，其具体判定条件如下：\n\n```\n  页面高度  <=  视口高度 + 滚动距离\n```\n\n> 上面的公式，是当body滚动的时候，判断页面触底的方式，那么在我们这里，需要进行一下转换，我们需要使用滚动内容高度，代替页面高度，容器高度，代替视口高度,同时呢，我们对照看下掘金等网站的滚动加载操作，都是未至底部便进行数据请求，其实只需要加一个数值就可以：\n\n```\n    内容高度  <=  容器高度 + 滚动距离 + 50  //这里的50只是参考，作为提前加载的阈值\n```\n\n> 具体的逻辑实现如下\n\n```\nlet scroll = this.$refs.scroll\nscroll.$refs.wrap.addEventListener('scroll',function(){\n          if(this.scrollTop + scroll.$el.clientHeight + 50 >= this.scrollHeight){\n            //函数节流操作\n            if(!that.flag){\n              that.flag = true\n              that.currentPageNo++;\n              that.getList()\n            }\n\n          }\n        })\n```\n> scrollHeight实际上就是获取滚动内容的高度，$el实际上获取的就是组件元素的dom节点，我们可以通过clientHeight去获取它的实际高度，这里就是所谓的容器高度，scrollTop就是滚动条距离容器顶部的距离，也就是滚动距离了。接下来就是节流的常规操作，我们要记得在getLIst请求回来的时候，要把开关重置即可，如果没有更多数据了，则直接关掉开关就可以。\n\n### 总结\n\n> 上面说了这么多，也算是有点感慨，其实很多东西，不细心根本没法发现，当初就是不知道elmentUI有这种美化滚动条的东西，所以才用了niceScroll，还引入了jquery，这骚操作其实挺恶心，现在想来，以后在Vue项目里，如果是PC，那el-scrollbar真的是美化滚动条的最好选择，前提是，项目的UI框架使用的是elementUI,否则，还是要另寻他法，不然为了一个滚动条美化，还要去引入一个大的UI框架，是在是不值得。\n\n> 另外其实这个项目要解决的问题，首先是交互的问题，其次才是滚动条的美化，但是滚动条美化，又是必要的需求，可以简单总结出，交互是重要问题，美化是必要问题。\n\n\n\n\n\n","slug":"记一次项目里关于el-scrollbar的使用","published":1,"updated":"2019-11-12T13:43:50.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn7004mmsviaqqeby3q","content":"<h2 id=\"记一次项目里关于el-scrollbar组件的使用\"><a href=\"#记一次项目里关于el-scrollbar组件的使用\" class=\"headerlink\" title=\"记一次项目里关于el-scrollbar组件的使用\"></a>记一次项目里关于el-scrollbar组件的使用</h2><h3 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h3><blockquote>\n<p>年初开发的泾县的项目，其中包含了触控一体机的四个系统，其实就是使用chrome浏览器进行包裹的外壳，里面就是纯web的页面。这几个系统，这几天在上线，线上发现了这样的一个奇怪的问题，就是项目中，因为优化用户使用体验，对于列表的滚动，统一使用了基于Vue的一个组件，better-scroll。而这个组件，在一体机的环境里，无法滚动，意思就是说，手指操作无法进行列表的滚动。</p>\n</blockquote>\n<blockquote>\n<p>其实better-scroll组件，在移动端使用的较多，但是后面更新的版本，支持了PC端的鼠标操作，因此在PC端，也可以使用这个插件，来代替浏览器本身的滚动以及丑陋的滚动条了。这些功能其实当时开发的时候，使用浏览器，是完全可以操作，没有任何问题的。也是第一次在一体机环境里使用better-scroll这种东西，当时心里面有预案，万一将来上生产了，出问题怎么办，要有planB。</p>\n</blockquote>\n<h3 id=\"目前使用的方式\"><a href=\"#目前使用的方式\" class=\"headerlink\" title=\"目前使用的方式\"></a>目前使用的方式</h3><blockquote>\n<p>其实项目里的scroll插件，已经经过了一次简单的封装，能够复用：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;rel wrap-inner&quot;&gt;</span><br><span class=\"line\">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;tc f30 c999 bottom-tip&quot;&gt;&#123;&#123;bottomTip&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import BScroll from &quot;better-scroll&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;scroll&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 1 滚动的时候会派发scroll事件，会截流。</span><br><span class=\"line\">     * 2 滚动的时候实时派发scroll事件，不会截流。</span><br><span class=\"line\">     * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    probeType: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 点击列表是否派发click事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    click: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否开启横向滚动</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    scrollX: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发滚动事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    listenScroll: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 列表的数据</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发滚动到底部的事件，用于上拉加载</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    pullup: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发顶部下拉的事件，用于下拉刷新</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    pulldown: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发列表滚动开始的事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    beforeScroll: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 当数据更新后，刷新scroll的延时。</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    refreshDelay: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      topTip: &quot;下拉刷新&quot;,</span><br><span class=\"line\">      bottomTip: &quot;&quot;,</span><br><span class=\"line\">      noMoreData: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 保证在DOM渲染完毕后初始化better-scroll</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      this._initScroll();</span><br><span class=\"line\">    &#125;, 20);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _initScroll() &#123;</span><br><span class=\"line\">      if (!this.$refs.wrapper) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#x2F;&#x2F; better-scroll的初始化</span><br><span class=\"line\">      this.scroll &#x3D; new BScroll(this.$refs.wrapper, &#123;</span><br><span class=\"line\">        probeType: this.probeType,</span><br><span class=\"line\">        click: this.click,</span><br><span class=\"line\">        scrollX: this.scrollX</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发滚动事件</span><br><span class=\"line\">      if (this.listenScroll) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;scroll&quot;, pos &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.$emit(&quot;scroll&quot;, pos);</span><br><span class=\"line\">          &#x2F;&#x2F; 下拉动作</span><br><span class=\"line\">          if (pos.y &gt; 50) &#123;</span><br><span class=\"line\">            this.topTip &#x3D; &quot;释放立即刷新&quot;;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发滚动到底部事件，用于上拉加载</span><br><span class=\"line\">      if (this.pullup) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;scrollEnd&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.topTip &#x3D; &quot;下拉刷新&quot;;</span><br><span class=\"line\">          &#x2F;&#x2F; 滚动到底部</span><br><span class=\"line\">          if (this.scroll.y &lt;&#x3D; this.scroll.maxScrollY + 50) &#123;</span><br><span class=\"line\">            this.$emit(&quot;scrollToEnd&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发顶部下拉事件，用于下拉刷新</span><br><span class=\"line\">      if (this.pulldown) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;touchEnd&quot;, pos &#x3D;&gt; &#123;</span><br><span class=\"line\">          &#x2F;&#x2F; 下拉动作</span><br><span class=\"line\">          if (pos.y &gt; 50) &#123;</span><br><span class=\"line\">            this.$emit(&quot;pulldown&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发列表滚动开始的事件</span><br><span class=\"line\">      if (this.beforeScroll) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;beforeScrollStart&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.$emit(&quot;beforeScroll&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    disable() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的disable方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.disable();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enable() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的enable方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.enable();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    refresh() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的refresh方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.refresh();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scrollTo() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的scrollTo方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.scrollTo.apply(this.scroll, arguments);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scrollToElement() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的scrollToElement方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.scrollToElement.apply(this.scroll, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        this.refresh();</span><br><span class=\"line\">      &#125;, this.refreshDelay);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    noMoreData(val) &#123;</span><br><span class=\"line\">      if (val) &#123;</span><br><span class=\"line\">        this.bottomTip &#x3D; &quot;没有更多数据了&quot;;</span><br><span class=\"line\">        this.scroll.closePullUp();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.bottomTip &#x3D; &quot;&quot;;</span><br><span class=\"line\">        this.scroll.openPullUp();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.bottom-tip &#123;</span><br><span class=\"line\">  height: 80px;</span><br><span class=\"line\">  line-height: 80px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在使用的时候，就可以直接像下面这样使用：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll  class&#x3D;&quot;wrapper&quot;  :data&#x3D;&quot;cardList&quot; :pulldown&#x3D;&quot;false&quot; @scrollToEnd&#x3D;&quot;scrollToEnd&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;wrapped&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;scroll&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"寻找替代\"><a href=\"#寻找替代\" class=\"headerlink\" title=\"寻找替代\"></a>寻找替代</h3><blockquote>\n<p>其实问题很简单，因为一体机内部普通的浏览器滚动，是没问题的，因此思路是只需要将scroll组件抹去，然后，使用浏览器的滚动方式。</p>\n</blockquote>\n<blockquote>\n<p>但是这样又引入了另一个问题，就是关于滚动条的美化，目前项目里滚动条的美化是使用jq插件，nicescroll，但是这种东西，有一个问题，首先vue里使用jq，确实不够简洁，其次，这东西不是每次初始化都能成功，即使是在mounted的nextTick的回调里，因此我们需要找到一个合适的替代的东西。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这种方式不是百分之百靠谱，存在缺陷</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#main&#x27;</span>).niceScroll(&#123;</span><br><span class=\"line\">        cursorcolor: <span class=\"string\">&quot;#d7d7d7&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当我在百度的时候，无意中发现，竟然还有el-scrollbar这样一种东西，但是貌似我在elementUI文档上面，没见过这个家伙啊，后来仔细了解才知道，这个其实是官方文档未指明的组件，但是确实在select组件的下拉里，确实有这样的一个美化滚动条的操作，下面来看下使用方式：</p>\n</blockquote>\n<h3 id=\"美化滚动\"><a href=\"#美化滚动\" class=\"headerlink\" title=\"美化滚动\"></a>美化滚动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;scroll&quot; &gt;</span><br><span class=\"line\">            &lt;el-scrollbar ref&#x3D;&quot;scroll&quot;&gt;</span><br><span class=\"line\">                &lt;ul class&#x3D;&quot;list f26&quot;&gt;</span><br><span class=\"line\">                    &lt;li v-for&#x3D;&quot;(item,index) in list&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class=\"line\">                        &lt;div class&#x3D;&quot;info clearfix&quot;&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.trainNum&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.departureStation&#125;&#125;-&#123;&#123;item.arrivalStation&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.trainType&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.drivingTime&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.arrivalTime&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;div class&#x3D;&quot;line&quot;&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;line-left tc fl&quot;&gt;途经站点&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;line-right&quot;&gt;</span><br><span class=\"line\">                                &lt;div v-if&#x3D;&quot;!item.halfwayStation&quot; class&#x3D;&quot;no-data-sp tc&quot;&gt;--暂无数据--&lt;&#x2F;div&gt;</span><br><span class=\"line\">                                &lt;div v-else&gt;&#123;&#123;item.halfwayStation | arrowAdd&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;&#x2F;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;&#x2F;ul&gt;</span><br><span class=\"line\">            &lt;&#x2F;el-scrollbar&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码可以看出来，结构很简单，需要一个外包裹层，定高，然后有个组件层e–scrollbar，里面就是滚动的内容。要注意的就是样式的设定：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.scroll &#123;</span><br><span class=\"line\">    height: 715px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.el-scrollbar &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;deep&#x2F;.el-scrollbar__wrap &#123;</span><br><span class=\"line\">    overflow-x: hidden; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>deep属性可以在我们style设置scoped属性的时候，去覆盖外层的样式，这里我们需要设置下.el-scrollbar__wrap的样式，横向滚动为hidden，因为不设置的话，会出现一个横向滚动条。</p>\n</blockquote>\n<blockquote>\n<p>按照上面一顿骚操作，我们可以看出美化的效果了：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/1.jpg?raw=true\"></p>\n<h3 id=\"完善交互\"><a href=\"#完善交互\" class=\"headerlink\" title=\"完善交互\"></a>完善交互</h3><blockquote>\n<p>既然美化的问题搞定了，那么剩下的，就是如何去完成better-scroll组件的滚动加载了，其实原理是想通的，在没有better-scroll组件之前，我们都是监听浏览器本身的滚动，来进行数据的加载交互，这里我们只需要监听滚动元素的scroll事件就可以了。</p>\n</blockquote>\n<blockquote>\n<p>但是仔细看下上面的结构，我们如何去获取发生滚动事件的这个元素呢？截图我们可以发现，实际上，el-scrollbar的作用，还隔了两层元素，真正的滚动，是触发在wrap这个元素上的：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/2.png?raw=true\"></p>\n<blockquote>\n<p>当时我在想，el-scrollbar这个好获取，通过this.$refs属性就可以：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(this.$refs.scroll)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那如何去获取，wrap这个对象？我们试着打印一下el-scrollbar吧：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/3.png?raw=true\"></p>\n<blockquote>\n<p>上图我们可以看到，this.$refs.scroll里还有$refs属性，里面有个wrap对象，就是我们需要找的触发滚动的元素！</p>\n</blockquote>\n<blockquote>\n<p>我们可以写出下面这样的监听代码：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">      this.$nextTick(function()&#123;</span><br><span class=\"line\">        let scroll &#x3D; this.$refs.scroll</span><br><span class=\"line\">        scroll.$refs.wrap.addEventListener(&#39;scroll&#39;,function()&#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么有了监听代码，下面我们来实现具体的实现逻辑，首先，要判断，何时滚动触底，然后进行数据加载，其次，我们需要进行节流处理，因为滚动事件触发频率太高，需要人为进行节流，我们这里实现的思路就是采用标志位，请求前，关闭开关，请求回来之后打开开关。当数据全部加载完，则不发请求。</p>\n</blockquote>\n<blockquote>\n<p>正常说来，我们做PC端的滚动加载的时候，我们需要三个值，分别是视口高度，页面高度，以及滚动距离，其具体判定条件如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面高度  &lt;&#x3D;  视口高度 + 滚动距离</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的公式，是当body滚动的时候，判断页面触底的方式，那么在我们这里，需要进行一下转换，我们需要使用滚动内容高度，代替页面高度，容器高度，代替视口高度,同时呢，我们对照看下掘金等网站的滚动加载操作，都是未至底部便进行数据请求，其实只需要加一个数值就可以：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容高度  &lt;&#x3D;  容器高度 + 滚动距离 + 50  &#x2F;&#x2F;这里的50只是参考，作为提前加载的阈值</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体的逻辑实现如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let scroll &#x3D; this.$refs.scroll</span><br><span class=\"line\">scroll.$refs.wrap.addEventListener(&#39;scroll&#39;,function()&#123;</span><br><span class=\"line\">          if(this.scrollTop + scroll.$el.clientHeight + 50 &gt;&#x3D; this.scrollHeight)&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;函数节流操作</span><br><span class=\"line\">            if(!that.flag)&#123;</span><br><span class=\"line\">              that.flag &#x3D; true</span><br><span class=\"line\">              that.currentPageNo++;</span><br><span class=\"line\">              that.getList()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>scrollHeight实际上就是获取滚动内容的高度，$el实际上获取的就是组件元素的dom节点，我们可以通过clientHeight去获取它的实际高度，这里就是所谓的容器高度，scrollTop就是滚动条距离容器顶部的距离，也就是滚动距离了。接下来就是节流的常规操作，我们要记得在getLIst请求回来的时候，要把开关重置即可，如果没有更多数据了，则直接关掉开关就可以。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>上面说了这么多，也算是有点感慨，其实很多东西，不细心根本没法发现，当初就是不知道elmentUI有这种美化滚动条的东西，所以才用了niceScroll，还引入了jquery，这骚操作其实挺恶心，现在想来，以后在Vue项目里，如果是PC，那el-scrollbar真的是美化滚动条的最好选择，前提是，项目的UI框架使用的是elementUI,否则，还是要另寻他法，不然为了一个滚动条美化，还要去引入一个大的UI框架，是在是不值得。</p>\n</blockquote>\n<blockquote>\n<p>另外其实这个项目要解决的问题，首先是交互的问题，其次才是滚动条的美化，但是滚动条美化，又是必要的需求，可以简单总结出，交互是重要问题，美化是必要问题。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记一次项目里关于el-scrollbar组件的使用\"><a href=\"#记一次项目里关于el-scrollbar组件的使用\" class=\"headerlink\" title=\"记一次项目里关于el-scrollbar组件的使用\"></a>记一次项目里关于el-scrollbar组件的使用</h2><h3 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h3><blockquote>\n<p>年初开发的泾县的项目，其中包含了触控一体机的四个系统，其实就是使用chrome浏览器进行包裹的外壳，里面就是纯web的页面。这几个系统，这几天在上线，线上发现了这样的一个奇怪的问题，就是项目中，因为优化用户使用体验，对于列表的滚动，统一使用了基于Vue的一个组件，better-scroll。而这个组件，在一体机的环境里，无法滚动，意思就是说，手指操作无法进行列表的滚动。</p>\n</blockquote>\n<blockquote>\n<p>其实better-scroll组件，在移动端使用的较多，但是后面更新的版本，支持了PC端的鼠标操作，因此在PC端，也可以使用这个插件，来代替浏览器本身的滚动以及丑陋的滚动条了。这些功能其实当时开发的时候，使用浏览器，是完全可以操作，没有任何问题的。也是第一次在一体机环境里使用better-scroll这种东西，当时心里面有预案，万一将来上生产了，出问题怎么办，要有planB。</p>\n</blockquote>\n<h3 id=\"目前使用的方式\"><a href=\"#目前使用的方式\" class=\"headerlink\" title=\"目前使用的方式\"></a>目前使用的方式</h3><blockquote>\n<p>其实项目里的scroll插件，已经经过了一次简单的封装，能够复用：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;rel wrap-inner&quot;&gt;</span><br><span class=\"line\">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;tc f30 c999 bottom-tip&quot;&gt;&#123;&#123;bottomTip&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import BScroll from &quot;better-scroll&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;scroll&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 1 滚动的时候会派发scroll事件，会截流。</span><br><span class=\"line\">     * 2 滚动的时候实时派发scroll事件，不会截流。</span><br><span class=\"line\">     * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    probeType: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 点击列表是否派发click事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    click: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否开启横向滚动</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    scrollX: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发滚动事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    listenScroll: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 列表的数据</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发滚动到底部的事件，用于上拉加载</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    pullup: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发顶部下拉的事件，用于下拉刷新</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    pulldown: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 是否派发列表滚动开始的事件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    beforeScroll: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 当数据更新后，刷新scroll的延时。</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    refreshDelay: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      topTip: &quot;下拉刷新&quot;,</span><br><span class=\"line\">      bottomTip: &quot;&quot;,</span><br><span class=\"line\">      noMoreData: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 保证在DOM渲染完毕后初始化better-scroll</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      this._initScroll();</span><br><span class=\"line\">    &#125;, 20);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _initScroll() &#123;</span><br><span class=\"line\">      if (!this.$refs.wrapper) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#x2F;&#x2F; better-scroll的初始化</span><br><span class=\"line\">      this.scroll &#x3D; new BScroll(this.$refs.wrapper, &#123;</span><br><span class=\"line\">        probeType: this.probeType,</span><br><span class=\"line\">        click: this.click,</span><br><span class=\"line\">        scrollX: this.scrollX</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发滚动事件</span><br><span class=\"line\">      if (this.listenScroll) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;scroll&quot;, pos &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.$emit(&quot;scroll&quot;, pos);</span><br><span class=\"line\">          &#x2F;&#x2F; 下拉动作</span><br><span class=\"line\">          if (pos.y &gt; 50) &#123;</span><br><span class=\"line\">            this.topTip &#x3D; &quot;释放立即刷新&quot;;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发滚动到底部事件，用于上拉加载</span><br><span class=\"line\">      if (this.pullup) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;scrollEnd&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.topTip &#x3D; &quot;下拉刷新&quot;;</span><br><span class=\"line\">          &#x2F;&#x2F; 滚动到底部</span><br><span class=\"line\">          if (this.scroll.y &lt;&#x3D; this.scroll.maxScrollY + 50) &#123;</span><br><span class=\"line\">            this.$emit(&quot;scrollToEnd&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发顶部下拉事件，用于下拉刷新</span><br><span class=\"line\">      if (this.pulldown) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;touchEnd&quot;, pos &#x3D;&gt; &#123;</span><br><span class=\"line\">          &#x2F;&#x2F; 下拉动作</span><br><span class=\"line\">          if (pos.y &gt; 50) &#123;</span><br><span class=\"line\">            this.$emit(&quot;pulldown&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 是否派发列表滚动开始的事件</span><br><span class=\"line\">      if (this.beforeScroll) &#123;</span><br><span class=\"line\">        this.scroll.on(&quot;beforeScrollStart&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">          this.$emit(&quot;beforeScroll&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    disable() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的disable方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.disable();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enable() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的enable方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.enable();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    refresh() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的refresh方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.refresh();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scrollTo() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的scrollTo方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.scrollTo.apply(this.scroll, arguments);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scrollToElement() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 代理better-scroll的scrollToElement方法</span><br><span class=\"line\">      this.scroll &amp;&amp; this.scroll.scrollToElement.apply(this.scroll, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        this.refresh();</span><br><span class=\"line\">      &#125;, this.refreshDelay);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    noMoreData(val) &#123;</span><br><span class=\"line\">      if (val) &#123;</span><br><span class=\"line\">        this.bottomTip &#x3D; &quot;没有更多数据了&quot;;</span><br><span class=\"line\">        this.scroll.closePullUp();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.bottomTip &#x3D; &quot;&quot;;</span><br><span class=\"line\">        this.scroll.openPullUp();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.bottom-tip &#123;</span><br><span class=\"line\">  height: 80px;</span><br><span class=\"line\">  line-height: 80px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们在使用的时候，就可以直接像下面这样使用：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll  class&#x3D;&quot;wrapper&quot;  :data&#x3D;&quot;cardList&quot; :pulldown&#x3D;&quot;false&quot; @scrollToEnd&#x3D;&quot;scrollToEnd&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;wrapped&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;scroll&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"寻找替代\"><a href=\"#寻找替代\" class=\"headerlink\" title=\"寻找替代\"></a>寻找替代</h3><blockquote>\n<p>其实问题很简单，因为一体机内部普通的浏览器滚动，是没问题的，因此思路是只需要将scroll组件抹去，然后，使用浏览器的滚动方式。</p>\n</blockquote>\n<blockquote>\n<p>但是这样又引入了另一个问题，就是关于滚动条的美化，目前项目里滚动条的美化是使用jq插件，nicescroll，但是这种东西，有一个问题，首先vue里使用jq，确实不够简洁，其次，这东西不是每次初始化都能成功，即使是在mounted的nextTick的回调里，因此我们需要找到一个合适的替代的东西。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这种方式不是百分之百靠谱，存在缺陷</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#main&#x27;</span>).niceScroll(&#123;</span><br><span class=\"line\">        cursorcolor: <span class=\"string\">&quot;#d7d7d7&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当我在百度的时候，无意中发现，竟然还有el-scrollbar这样一种东西，但是貌似我在elementUI文档上面，没见过这个家伙啊，后来仔细了解才知道，这个其实是官方文档未指明的组件，但是确实在select组件的下拉里，确实有这样的一个美化滚动条的操作，下面来看下使用方式：</p>\n</blockquote>\n<h3 id=\"美化滚动\"><a href=\"#美化滚动\" class=\"headerlink\" title=\"美化滚动\"></a>美化滚动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;scroll&quot; &gt;</span><br><span class=\"line\">            &lt;el-scrollbar ref&#x3D;&quot;scroll&quot;&gt;</span><br><span class=\"line\">                &lt;ul class&#x3D;&quot;list f26&quot;&gt;</span><br><span class=\"line\">                    &lt;li v-for&#x3D;&quot;(item,index) in list&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class=\"line\">                        &lt;div class&#x3D;&quot;info clearfix&quot;&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.trainNum&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.departureStation&#125;&#125;-&#123;&#123;item.arrivalStation&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.trainType&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.drivingTime&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;fl tc ell&quot;&gt;&#123;&#123;item.arrivalTime&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;div class&#x3D;&quot;line&quot;&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;line-left tc fl&quot;&gt;途经站点&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;div class&#x3D;&quot;line-right&quot;&gt;</span><br><span class=\"line\">                                &lt;div v-if&#x3D;&quot;!item.halfwayStation&quot; class&#x3D;&quot;no-data-sp tc&quot;&gt;--暂无数据--&lt;&#x2F;div&gt;</span><br><span class=\"line\">                                &lt;div v-else&gt;&#123;&#123;item.halfwayStation | arrowAdd&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                            &lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;&#x2F;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;&#x2F;ul&gt;</span><br><span class=\"line\">            &lt;&#x2F;el-scrollbar&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码可以看出来，结构很简单，需要一个外包裹层，定高，然后有个组件层e–scrollbar，里面就是滚动的内容。要注意的就是样式的设定：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.scroll &#123;</span><br><span class=\"line\">    height: 715px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.el-scrollbar &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;deep&#x2F;.el-scrollbar__wrap &#123;</span><br><span class=\"line\">    overflow-x: hidden; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>deep属性可以在我们style设置scoped属性的时候，去覆盖外层的样式，这里我们需要设置下.el-scrollbar__wrap的样式，横向滚动为hidden，因为不设置的话，会出现一个横向滚动条。</p>\n</blockquote>\n<blockquote>\n<p>按照上面一顿骚操作，我们可以看出美化的效果了：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/1.jpg?raw=true\"></p>\n<h3 id=\"完善交互\"><a href=\"#完善交互\" class=\"headerlink\" title=\"完善交互\"></a>完善交互</h3><blockquote>\n<p>既然美化的问题搞定了，那么剩下的，就是如何去完成better-scroll组件的滚动加载了，其实原理是想通的，在没有better-scroll组件之前，我们都是监听浏览器本身的滚动，来进行数据的加载交互，这里我们只需要监听滚动元素的scroll事件就可以了。</p>\n</blockquote>\n<blockquote>\n<p>但是仔细看下上面的结构，我们如何去获取发生滚动事件的这个元素呢？截图我们可以发现，实际上，el-scrollbar的作用，还隔了两层元素，真正的滚动，是触发在wrap这个元素上的：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/2.png?raw=true\"></p>\n<blockquote>\n<p>当时我在想，el-scrollbar这个好获取，通过this.$refs属性就可以：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(this.$refs.scroll)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那如何去获取，wrap这个对象？我们试着打印一下el-scrollbar吧：</p>\n</blockquote>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20191112/3.png?raw=true\"></p>\n<blockquote>\n<p>上图我们可以看到，this.$refs.scroll里还有$refs属性，里面有个wrap对象，就是我们需要找的触发滚动的元素！</p>\n</blockquote>\n<blockquote>\n<p>我们可以写出下面这样的监听代码：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">      this.$nextTick(function()&#123;</span><br><span class=\"line\">        let scroll &#x3D; this.$refs.scroll</span><br><span class=\"line\">        scroll.$refs.wrap.addEventListener(&#39;scroll&#39;,function()&#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么有了监听代码，下面我们来实现具体的实现逻辑，首先，要判断，何时滚动触底，然后进行数据加载，其次，我们需要进行节流处理，因为滚动事件触发频率太高，需要人为进行节流，我们这里实现的思路就是采用标志位，请求前，关闭开关，请求回来之后打开开关。当数据全部加载完，则不发请求。</p>\n</blockquote>\n<blockquote>\n<p>正常说来，我们做PC端的滚动加载的时候，我们需要三个值，分别是视口高度，页面高度，以及滚动距离，其具体判定条件如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面高度  &lt;&#x3D;  视口高度 + 滚动距离</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的公式，是当body滚动的时候，判断页面触底的方式，那么在我们这里，需要进行一下转换，我们需要使用滚动内容高度，代替页面高度，容器高度，代替视口高度,同时呢，我们对照看下掘金等网站的滚动加载操作，都是未至底部便进行数据请求，其实只需要加一个数值就可以：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容高度  &lt;&#x3D;  容器高度 + 滚动距离 + 50  &#x2F;&#x2F;这里的50只是参考，作为提前加载的阈值</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体的逻辑实现如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let scroll &#x3D; this.$refs.scroll</span><br><span class=\"line\">scroll.$refs.wrap.addEventListener(&#39;scroll&#39;,function()&#123;</span><br><span class=\"line\">          if(this.scrollTop + scroll.$el.clientHeight + 50 &gt;&#x3D; this.scrollHeight)&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;函数节流操作</span><br><span class=\"line\">            if(!that.flag)&#123;</span><br><span class=\"line\">              that.flag &#x3D; true</span><br><span class=\"line\">              that.currentPageNo++;</span><br><span class=\"line\">              that.getList()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>scrollHeight实际上就是获取滚动内容的高度，$el实际上获取的就是组件元素的dom节点，我们可以通过clientHeight去获取它的实际高度，这里就是所谓的容器高度，scrollTop就是滚动条距离容器顶部的距离，也就是滚动距离了。接下来就是节流的常规操作，我们要记得在getLIst请求回来的时候，要把开关重置即可，如果没有更多数据了，则直接关掉开关就可以。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>上面说了这么多，也算是有点感慨，其实很多东西，不细心根本没法发现，当初就是不知道elmentUI有这种美化滚动条的东西，所以才用了niceScroll，还引入了jquery，这骚操作其实挺恶心，现在想来，以后在Vue项目里，如果是PC，那el-scrollbar真的是美化滚动条的最好选择，前提是，项目的UI框架使用的是elementUI,否则，还是要另寻他法，不然为了一个滚动条美化，还要去引入一个大的UI框架，是在是不值得。</p>\n</blockquote>\n<blockquote>\n<p>另外其实这个项目要解决的问题，首先是交互的问题，其次才是滚动条的美化，但是滚动条美化，又是必要的需求，可以简单总结出，交互是重要问题，美化是必要问题。</p>\n</blockquote>\n"},{"title":"记录better-scroll滚动错位的一个问题","date":"2018-09-01T14:02:33.000Z","_content":"\n今天在项目中，使用better-scroll遇到了一个很奇怪的问题，列表滚动加载，一直拉不到容器最底部，经过调试分析，发现，应该是内容实际高度超过了容器动态计算的高度值，所以导致插件认为已经滚动到底部，但其实实际内容还有很多，被容器阻挡在下面，无法滚动上来。   \n\n常规来说，滚动列表的元素一般要求是定高的，这是对比了其他正常的列表页面得到的结论，由于每个li的高度不一样，导致容器计算高度产生了偏差。经过页面样式检查之后发现，li的高度属性被设置了max-height，max-height这个属性，其实是半动态的，这就导致了li的高度是动态变化的，继而导致滚动容器动态计算高度产生了偏差。   \n\n通过将max-height修改成height固定高度之后，这样的问题便不见了。\n\n这里再复习一下，使better-scroll生效的必须项设置：\n\n* 容器必须定高\n* 容器外层元素必须只能有一个子元素\n* 容器必须设置overflow:hidden属性\n\n\n","source":"_posts/记录better-scroll滚动错位的一个问题.md","raw":"---\ntitle: 记录better-scroll滚动错位的一个问题\ndate: 2018-09-01 22:02:33\ntags:\n  - better-scroll\n  - js\ncategories:\n  - js\n---\n\n今天在项目中，使用better-scroll遇到了一个很奇怪的问题，列表滚动加载，一直拉不到容器最底部，经过调试分析，发现，应该是内容实际高度超过了容器动态计算的高度值，所以导致插件认为已经滚动到底部，但其实实际内容还有很多，被容器阻挡在下面，无法滚动上来。   \n\n常规来说，滚动列表的元素一般要求是定高的，这是对比了其他正常的列表页面得到的结论，由于每个li的高度不一样，导致容器计算高度产生了偏差。经过页面样式检查之后发现，li的高度属性被设置了max-height，max-height这个属性，其实是半动态的，这就导致了li的高度是动态变化的，继而导致滚动容器动态计算高度产生了偏差。   \n\n通过将max-height修改成height固定高度之后，这样的问题便不见了。\n\n这里再复习一下，使better-scroll生效的必须项设置：\n\n* 容器必须定高\n* 容器外层元素必须只能有一个子元素\n* 容器必须设置overflow:hidden属性\n\n\n","slug":"记录better-scroll滚动错位的一个问题","published":1,"updated":"2018-09-01T14:19:55.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn8004pmsvidn9wbele","content":"<p>今天在项目中，使用better-scroll遇到了一个很奇怪的问题，列表滚动加载，一直拉不到容器最底部，经过调试分析，发现，应该是内容实际高度超过了容器动态计算的高度值，所以导致插件认为已经滚动到底部，但其实实际内容还有很多，被容器阻挡在下面，无法滚动上来。   </p>\n<p>常规来说，滚动列表的元素一般要求是定高的，这是对比了其他正常的列表页面得到的结论，由于每个li的高度不一样，导致容器计算高度产生了偏差。经过页面样式检查之后发现，li的高度属性被设置了max-height，max-height这个属性，其实是半动态的，这就导致了li的高度是动态变化的，继而导致滚动容器动态计算高度产生了偏差。   </p>\n<p>通过将max-height修改成height固定高度之后，这样的问题便不见了。</p>\n<p>这里再复习一下，使better-scroll生效的必须项设置：</p>\n<ul>\n<li>容器必须定高</li>\n<li>容器外层元素必须只能有一个子元素</li>\n<li>容器必须设置overflow:hidden属性</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在项目中，使用better-scroll遇到了一个很奇怪的问题，列表滚动加载，一直拉不到容器最底部，经过调试分析，发现，应该是内容实际高度超过了容器动态计算的高度值，所以导致插件认为已经滚动到底部，但其实实际内容还有很多，被容器阻挡在下面，无法滚动上来。   </p>\n<p>常规来说，滚动列表的元素一般要求是定高的，这是对比了其他正常的列表页面得到的结论，由于每个li的高度不一样，导致容器计算高度产生了偏差。经过页面样式检查之后发现，li的高度属性被设置了max-height，max-height这个属性，其实是半动态的，这就导致了li的高度是动态变化的，继而导致滚动容器动态计算高度产生了偏差。   </p>\n<p>通过将max-height修改成height固定高度之后，这样的问题便不见了。</p>\n<p>这里再复习一下，使better-scroll生效的必须项设置：</p>\n<ul>\n<li>容器必须定高</li>\n<li>容器外层元素必须只能有一个子元素</li>\n<li>容器必须设置overflow:hidden属性</li>\n</ul>\n"},{"title":"记录一个页面width导致的bug","date":"2018-11-13T13:23:16.000Z","_content":"\n\n今天一早来公司，就收到了一个临时需要修改的问题，是这样的，黄山新闻网的维护工作是我们公司接下的，于是后续的修改以及小的修改工作都是我们的工作，今天这个问题是什么呢，需求方是这样描述的：   \n\n新闻网站在PC端上面，浏览是好好的，但是缩小浏览器视口和在手机模式下查看，会出现下图的问题：\n\nPC端：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/2.png?raw=true)\n\n\n手机模式：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/7.png?raw=true)\n\n从上图可以看到，头部和脚部，并没有根据实际页面宽度而自然伸展，而是被突然截断了，基本可以判断，是横向滚动条导致的，由于头部和脚部没有设置宽度，因此，宽度是auto的。看下图，我们将PC端横向滚动条滚到最开始的位置：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/1.png?raw=true)  \n\n可以发现，上图滚动条滚到初始位置，也就是页面最初始的状态，那么头部和脚部的宽度是刚刚好适应窗口宽度的，从页面结构，可以看出来，页面的头部，内容，脚部区域都是同级的，并且是100%自适应窗口宽度的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/5.png?raw=true)   \n\n但是，肯定有什么元素，固定宽度超出了100%的窗口宽度，经过排查，果然有，如下图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/3.png?raw=true)  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/6.png?raw=true)\n\n在内容元素的子元素里，有个定宽的属性设置：\n\n```css\n{\n  width:1216px;\n}\n\n```\n\n嗯，问题就是出在这里，我想大家应该都明白了，为什么pc端是好的，但是缩小窗口和手机端是有问题的，正是因为，pc端最小的窗口最大化，也是1300px以上的，刚好可以包住这个定宽的1216px的元素，因此，页面没有撑出，那么头部和脚部也都是正常的展现效果。  \n\n但是，缩小窗口，当窗口大小小于1216px或者在手机上浏览的时候，出现了横向滚动条，页面被撑开了，但是头部和脚部元素没有定宽，那就会按照窗口宽度初始化样式，但是，滚动条撑出来的部分，就会出现这样的问题，好像被截断了一样。\n\n因此，我们应该怎样去解决呢，其实思路是这样的，现在因为有元素定宽1216px导致页面样式出现了问题，但是对于这种维护的项目，直接更改元素样式是不行的，会造成各种各样的问题，所以只能做增法，也就是增加一些属性，让它变得正常。\n\n那么问题的根源就是，由于页面同级元素都是默认的窗口宽度，但是其中有一个子元素是定宽的，且窗口宽度变化时，可能超过窗口宽度，出现横向滚动条，会导致这些原本按窗口宽度布局的元素，样式在滚动条撑出的部分，会出现断层，因此，我们需要统一在这些同级元素的父元素上面，也就是body上面，加个属性，min-width，这个属性大家都知道，也就是设置元素的最小宽度，当实际宽度小于最小宽度的时候，一律按照最小宽度去展示，当实际宽度超过最小宽度的时候，那么就按照实际宽度去展示。\n\n说白了，设置这个最小宽度，就是为了让滚动条变得正常化，所谓的正常化就是，滚动条的出现原来是由内部元素撑出而出现的，而现在我们让滚动条由body撑出而出现，那么body内部的这些头部，脚部等元素，宽度就能变得可预期了，那么这个min-width的值是多少呢，是的，一定是大于出现问题的边界值，1216px：\n\n```css\n{\n  min-width:1320px；\n}\n```\n\n修改后的效果如下图：  \n\nPC端：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/4.png?raw=true)\n\n手机端：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/8.png?raw=true)\n\n","source":"_posts/记录一个页面width导致的bug.md","raw":"---\ntitle: 记录一个页面width导致的bug\ndate: 2018-11-13 21:23:16\ntags:\n  - css\ncategories:\n  - css\n---\n\n\n今天一早来公司，就收到了一个临时需要修改的问题，是这样的，黄山新闻网的维护工作是我们公司接下的，于是后续的修改以及小的修改工作都是我们的工作，今天这个问题是什么呢，需求方是这样描述的：   \n\n新闻网站在PC端上面，浏览是好好的，但是缩小浏览器视口和在手机模式下查看，会出现下图的问题：\n\nPC端：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/2.png?raw=true)\n\n\n手机模式：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/7.png?raw=true)\n\n从上图可以看到，头部和脚部，并没有根据实际页面宽度而自然伸展，而是被突然截断了，基本可以判断，是横向滚动条导致的，由于头部和脚部没有设置宽度，因此，宽度是auto的。看下图，我们将PC端横向滚动条滚到最开始的位置：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/1.png?raw=true)  \n\n可以发现，上图滚动条滚到初始位置，也就是页面最初始的状态，那么头部和脚部的宽度是刚刚好适应窗口宽度的，从页面结构，可以看出来，页面的头部，内容，脚部区域都是同级的，并且是100%自适应窗口宽度的：\n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/5.png?raw=true)   \n\n但是，肯定有什么元素，固定宽度超出了100%的窗口宽度，经过排查，果然有，如下图：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/3.png?raw=true)  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/6.png?raw=true)\n\n在内容元素的子元素里，有个定宽的属性设置：\n\n```css\n{\n  width:1216px;\n}\n\n```\n\n嗯，问题就是出在这里，我想大家应该都明白了，为什么pc端是好的，但是缩小窗口和手机端是有问题的，正是因为，pc端最小的窗口最大化，也是1300px以上的，刚好可以包住这个定宽的1216px的元素，因此，页面没有撑出，那么头部和脚部也都是正常的展现效果。  \n\n但是，缩小窗口，当窗口大小小于1216px或者在手机上浏览的时候，出现了横向滚动条，页面被撑开了，但是头部和脚部元素没有定宽，那就会按照窗口宽度初始化样式，但是，滚动条撑出来的部分，就会出现这样的问题，好像被截断了一样。\n\n因此，我们应该怎样去解决呢，其实思路是这样的，现在因为有元素定宽1216px导致页面样式出现了问题，但是对于这种维护的项目，直接更改元素样式是不行的，会造成各种各样的问题，所以只能做增法，也就是增加一些属性，让它变得正常。\n\n那么问题的根源就是，由于页面同级元素都是默认的窗口宽度，但是其中有一个子元素是定宽的，且窗口宽度变化时，可能超过窗口宽度，出现横向滚动条，会导致这些原本按窗口宽度布局的元素，样式在滚动条撑出的部分，会出现断层，因此，我们需要统一在这些同级元素的父元素上面，也就是body上面，加个属性，min-width，这个属性大家都知道，也就是设置元素的最小宽度，当实际宽度小于最小宽度的时候，一律按照最小宽度去展示，当实际宽度超过最小宽度的时候，那么就按照实际宽度去展示。\n\n说白了，设置这个最小宽度，就是为了让滚动条变得正常化，所谓的正常化就是，滚动条的出现原来是由内部元素撑出而出现的，而现在我们让滚动条由body撑出而出现，那么body内部的这些头部，脚部等元素，宽度就能变得可预期了，那么这个min-width的值是多少呢，是的，一定是大于出现问题的边界值，1216px：\n\n```css\n{\n  min-width:1320px；\n}\n```\n\n修改后的效果如下图：  \n\nPC端：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/4.png?raw=true)\n\n手机端：\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181113/8.png?raw=true)\n\n","slug":"记录一个页面width导致的bug","published":1,"updated":"2018-11-13T13:24:24.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxn9004umsviguvd2wei","content":"<p>今天一早来公司，就收到了一个临时需要修改的问题，是这样的，黄山新闻网的维护工作是我们公司接下的，于是后续的修改以及小的修改工作都是我们的工作，今天这个问题是什么呢，需求方是这样描述的：   </p>\n<p>新闻网站在PC端上面，浏览是好好的，但是缩小浏览器视口和在手机模式下查看，会出现下图的问题：</p>\n<p>PC端：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/2.png?raw=true\"></p>\n<p>手机模式：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/7.png?raw=true\"></p>\n<p>从上图可以看到，头部和脚部，并没有根据实际页面宽度而自然伸展，而是被突然截断了，基本可以判断，是横向滚动条导致的，由于头部和脚部没有设置宽度，因此，宽度是auto的。看下图，我们将PC端横向滚动条滚到最开始的位置：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/1.png?raw=true\">  </p>\n<p>可以发现，上图滚动条滚到初始位置，也就是页面最初始的状态，那么头部和脚部的宽度是刚刚好适应窗口宽度的，从页面结构，可以看出来，页面的头部，内容，脚部区域都是同级的，并且是100%自适应窗口宽度的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/5.png?raw=true\">   </p>\n<p>但是，肯定有什么元素，固定宽度超出了100%的窗口宽度，经过排查，果然有，如下图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/3.png?raw=true\">  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/6.png?raw=true\"></p>\n<p>在内容元素的子元素里，有个定宽的属性设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">1216px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>嗯，问题就是出在这里，我想大家应该都明白了，为什么pc端是好的，但是缩小窗口和手机端是有问题的，正是因为，pc端最小的窗口最大化，也是1300px以上的，刚好可以包住这个定宽的1216px的元素，因此，页面没有撑出，那么头部和脚部也都是正常的展现效果。  </p>\n<p>但是，缩小窗口，当窗口大小小于1216px或者在手机上浏览的时候，出现了横向滚动条，页面被撑开了，但是头部和脚部元素没有定宽，那就会按照窗口宽度初始化样式，但是，滚动条撑出来的部分，就会出现这样的问题，好像被截断了一样。</p>\n<p>因此，我们应该怎样去解决呢，其实思路是这样的，现在因为有元素定宽1216px导致页面样式出现了问题，但是对于这种维护的项目，直接更改元素样式是不行的，会造成各种各样的问题，所以只能做增法，也就是增加一些属性，让它变得正常。</p>\n<p>那么问题的根源就是，由于页面同级元素都是默认的窗口宽度，但是其中有一个子元素是定宽的，且窗口宽度变化时，可能超过窗口宽度，出现横向滚动条，会导致这些原本按窗口宽度布局的元素，样式在滚动条撑出的部分，会出现断层，因此，我们需要统一在这些同级元素的父元素上面，也就是body上面，加个属性，min-width，这个属性大家都知道，也就是设置元素的最小宽度，当实际宽度小于最小宽度的时候，一律按照最小宽度去展示，当实际宽度超过最小宽度的时候，那么就按照实际宽度去展示。</p>\n<p>说白了，设置这个最小宽度，就是为了让滚动条变得正常化，所谓的正常化就是，滚动条的出现原来是由内部元素撑出而出现的，而现在我们让滚动条由body撑出而出现，那么body内部的这些头部，脚部等元素，宽度就能变得可预期了，那么这个min-width的值是多少呢，是的，一定是大于出现问题的边界值，1216px：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>:<span class=\"number\">1320px</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后的效果如下图：  </p>\n<p>PC端：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/4.png?raw=true\"></p>\n<p>手机端：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/8.png?raw=true\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天一早来公司，就收到了一个临时需要修改的问题，是这样的，黄山新闻网的维护工作是我们公司接下的，于是后续的修改以及小的修改工作都是我们的工作，今天这个问题是什么呢，需求方是这样描述的：   </p>\n<p>新闻网站在PC端上面，浏览是好好的，但是缩小浏览器视口和在手机模式下查看，会出现下图的问题：</p>\n<p>PC端：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/2.png?raw=true\"></p>\n<p>手机模式：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/7.png?raw=true\"></p>\n<p>从上图可以看到，头部和脚部，并没有根据实际页面宽度而自然伸展，而是被突然截断了，基本可以判断，是横向滚动条导致的，由于头部和脚部没有设置宽度，因此，宽度是auto的。看下图，我们将PC端横向滚动条滚到最开始的位置：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/1.png?raw=true\">  </p>\n<p>可以发现，上图滚动条滚到初始位置，也就是页面最初始的状态，那么头部和脚部的宽度是刚刚好适应窗口宽度的，从页面结构，可以看出来，页面的头部，内容，脚部区域都是同级的，并且是100%自适应窗口宽度的：</p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/5.png?raw=true\">   </p>\n<p>但是，肯定有什么元素，固定宽度超出了100%的窗口宽度，经过排查，果然有，如下图：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/3.png?raw=true\">  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/6.png?raw=true\"></p>\n<p>在内容元素的子元素里，有个定宽的属性设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">1216px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>嗯，问题就是出在这里，我想大家应该都明白了，为什么pc端是好的，但是缩小窗口和手机端是有问题的，正是因为，pc端最小的窗口最大化，也是1300px以上的，刚好可以包住这个定宽的1216px的元素，因此，页面没有撑出，那么头部和脚部也都是正常的展现效果。  </p>\n<p>但是，缩小窗口，当窗口大小小于1216px或者在手机上浏览的时候，出现了横向滚动条，页面被撑开了，但是头部和脚部元素没有定宽，那就会按照窗口宽度初始化样式，但是，滚动条撑出来的部分，就会出现这样的问题，好像被截断了一样。</p>\n<p>因此，我们应该怎样去解决呢，其实思路是这样的，现在因为有元素定宽1216px导致页面样式出现了问题，但是对于这种维护的项目，直接更改元素样式是不行的，会造成各种各样的问题，所以只能做增法，也就是增加一些属性，让它变得正常。</p>\n<p>那么问题的根源就是，由于页面同级元素都是默认的窗口宽度，但是其中有一个子元素是定宽的，且窗口宽度变化时，可能超过窗口宽度，出现横向滚动条，会导致这些原本按窗口宽度布局的元素，样式在滚动条撑出的部分，会出现断层，因此，我们需要统一在这些同级元素的父元素上面，也就是body上面，加个属性，min-width，这个属性大家都知道，也就是设置元素的最小宽度，当实际宽度小于最小宽度的时候，一律按照最小宽度去展示，当实际宽度超过最小宽度的时候，那么就按照实际宽度去展示。</p>\n<p>说白了，设置这个最小宽度，就是为了让滚动条变得正常化，所谓的正常化就是，滚动条的出现原来是由内部元素撑出而出现的，而现在我们让滚动条由body撑出而出现，那么body内部的这些头部，脚部等元素，宽度就能变得可预期了，那么这个min-width的值是多少呢，是的，一定是大于出现问题的边界值，1216px：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>:<span class=\"number\">1320px</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后的效果如下图：  </p>\n<p>PC端：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/4.png?raw=true\"></p>\n<p>手机端：<br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181113/8.png?raw=true\"></p>\n"},{"title":"铜陵城市超脑前端技术梳理","date":"2019-09-20T13:04:04.000Z","_content":"\n# 铜陵城市超脑前端技术栈梳理\n\n> 今天的分享培训，分为三个部分，一个是对于项目中，前端采用的技术栈，进行一个简单的梳理。另外一个，就是如何去运行，如何去构建我们的前端项目，我会对其中的步骤进行讲解。最后，会给项目中的一些代码给出建议。\n\n\n## 一、技术栈梳理\n\n> 背景 前后端分离，敏捷，并行开发，责任和分工清晰。\n\n> vue全家桶，什么是vue全家桶，从前端项目构建，到开发，到部署上线，使用的都是基于vue生态链中的工具和类库。\n\n> 本项目使用的是vue + vue-cli + vue-router + axios + vuex + ant-design-vue，后面会依次给大家介绍这些东西都能干些什么，或者说，与以前的开发模式相比，都替代了什么\n\n### 1、VUE\n\n> vue是一种用于构建用户界面的mvvm框架，它的核心专注于视图层，实际开发中，便于与第三方库进行功能整合。所谓的mvvm与mvc类似，后面的vm称为视图模型，其实就是mvc中的controller变化而来。为什么使用vue来进行项目的开发呢，它的优点如下：\n\n#### 组件化\n> 组件是Vue强大的功能之一，组件可以扩展 HTML 元素，封装可重用的代码。在以前的开发模式中，可能前端页面需要用到多个地方的相似代码，我们都要依次进行复制粘贴和改动。但是组件化以后，我们只需要进行多次的引用就可以。比方说大屏里使用到的swiper组件，头部底部，视频播放组件，图片查看组件等，这些都是组件化的实践，代码分层解耦清晰，不仅利于前期开发，更利于后期的管理和维护。\n\n#### virtual dom\n> 体现vue的强大和性能优势的另一特点，就是虚拟dom，一般来说，dom操作比较昂贵，dom对象里包含的属性太多，导致每一次的改动，都是对浏览器性能的较大消耗。这里牵扯到浏览器的重绘和回流概念，这里不做引申。一句话概括，频繁的dom操作，会降低页面的性能，与数据量大小成正比，并且指数增长。\n\n> 因此，虚拟dom这个解决方案就出来了，什么是虚拟dom，实际上就是，使用js对象，模拟dom对象的重要属性和主要结构，dom对象的结构，节点之间的关系，其实就是数据结构里的树.因此就是js对象树，模拟dom对象树。将每一次dom数据的变化，进行有序的队列控制，在下一次的dom更新前，对新旧节点进行对比，生成差异，再进行统一的更新渲染，至于渲染时间的控制，这里牵扯到浏览器的事件触发原理，不做引申。可能这种阐述，比较难以理解，这些不重要，简单一句话概括，Virtual dom提升了页面性能，优化了浏览器的渲染，属于最大程度上的最佳实践。\n\n#### 响应式\n> 真正解放我们，不用手动做view和model之间的变化响应的，便是这个响应式系统。\n\n> “响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。视图渲染中使用了数据，数据改变后，视图也会自动更新。\n\n> 我们可以回想下，在jq时代，我们如何去实现视图与数据之间的交互呢？无非是面向过程的那一套东西，取元素，设置属性值，取元素，获取属性值，等等。而Vue的响应式系统，实际底层也是做dom节点的操作，但是更高效。Vue将这部分操作，封装在内部的实现中，我们只需要简单操作，就能实现视图和数据之间的交互。\n\n> 在每个页面组件中，数据可以是提前定义好的页面既有字段，也可以是后端接口给出的数据对象。\n\n> 响应式背后的原理，其实就是运用了设计模式中的观察者模式，通过对data属性的监视，触发能够更新视图数据的watcher，并且进行dom的渲染。\n\n> 响应式的好处，就是解耦视图和模型，我们不用去关注他们之间具体如何的联动和变化，我们只需要进行数据层面的操控，而由响应式系统，替我们完成视图层面的变化。\n\n### 2、vue-cli\n\n> vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板\n\n> 它暴露了一个可以自定义webpack配置的接口，我们可以在它的基础上，灵活配置我们项目需要的webpack配置，比如模块引入，样式预处理，热更新，开发模式的代理，等等。\n\n### 3、vue-router\n> vue-router实际上就是前端路由控制系统，其原理是通过html5的history API或者hash模式，实现单页应用内部功能模块的页面切换，即不刷新，便能改变地址，并且改变页面展示模块。\n\n> 前端打包输出的文件，其实就只有一个index.html，整个系统都是单页，因此页面之间的切换，包括返回，效率和性能都会很高，其实就是路由系统在控制，根据地址的字段映射，展示对应的页面组件，实际上，都是在一个页面上发生的。\n\n### 4、axios\n\n> axios是一个基于promise的http库，它适用于浏览器和node.js中,在vue全家桶中，作为ajax请求的代替，简单说，就是发送http请求的，它支持请求和响应的拦截，这个特性我们可以进行登录拦截，报错收集等统一的处理，还能够对数据进行统一的改造，使的前端代码逻辑变得清晰简单。\n\n> 一般来说，在我们实际项目的请求中，为了安全性，统一使用的post，而Post请求，后端默认的处理，应该就是表单提交formdata的格式，即content-type就是application/x-www-form-urlencoded，但是axios默认的application/json，因此如果直接传递，不做处理，服务器会报500的错，所以我们正常需要使用qs这个库，来对json形式的数据，进行序列化，也就是类似a=b&b=c的格式，才能正常完成请求交互。\n\n### 5、vuex\n> vuex是vue项目的状态管理工具，所谓状态管理，其实就是对于一些全局的数据，状态，进行统一的获取，更改，异步等操作。处于一种可预测的变化中。比如，用户登录状态，更新一处，多处联动信息的变化。方便全局数据的管理。\n\n> 另外我看项目中，使用到了vuex-persistedstate这样的一个插件，其实这个插件是用来对Vuex在内存中的数据，进行持久化的，项目中通过将Vuex中的数据，存入sessionStorage，来进行持久化，防止页面在刷新的时候，数据丢失的问题。sessionStorage的持久化比较折中，其生命周期只存在于这一次打开的浏览器中，关闭浏览器，则会清除。\n\n### 6、ant-design-vue\n\n> ant-design-vue是基于vue开发的一个UI框架。\n\n> 一般来说，中后台的系统，其UI样式和功能交互，几乎趋于统一，所以，这个利于使用UI框架来进行快速的页面构建，很多页面组件，如下拉框，表格，弹窗等，UI框架都提供了简便的引用方式，而且扩展性强。\n\n> 而对于项目中大屏的前端页面，用于前端定制话的东西比较多，很多样式和交互，UI框架并不能提供，因此大多会使用手动编写，而对于常用的功能组件，可以进行选择引入，比如，pagination这个组件，用来进行列表的分页。\n\n\n## 二、项目启动（开发模式和生产模式）\n\n> 这部分主要给后端介绍下，项目的前端项目如何跑起来，如何构建生产环境的包。\n\n### 1、node.js安装 npm \n\n> 目前前端项目构建，都是基于Node环境的，所以前提需要安装Node版本，版本是适当的高一点，比较牢靠，[这里](https://nodejs.org/zh-cn/)是Node下载的链接地址。\n\n> npm 是前端项目的包管理工具，是开发和构建所用到的一切工具和类库的管理工具。现在Node安装会自动安装npm，环境变量也会自动配好，因此，我们只需要安装nodejs就可以了。\n\n### 2、初始化项目\n> npm 是通过命令行操作的，所有操作，基于命令行。这里初始化，就不介绍，一个项目从无到有的生成，这里涉及vue-cli的相关知识，通常情况下，后端人员拉取前端项目源码的时候，项目已经初始化了。\n\n> 这里我要说的是，项目拉取之后，该怎么操作。首先，项目拉取下来之后，在package.json文件所在的目录下，打开命令行，输入npm install 也就是安装下项目依赖的所有包文件。\n\n> 等安装成功之后，输入npm run serve这是本地开发模式启动的命令，端口默认是8080。\n\n### 3、package.json简单介绍\n\n> package.json其实就是项目中，展示模块以及配置信息的文件，一般我们通过修改它来完成一些自定义的东西，主要介绍三个属性，是与我们开发密切相关的。\n\n> scripts 就是配置项目运行或是打包等操作的属性。\n\n```\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\",\n    \"test:unit\": \"vue-cli-service test:unit\"\n  },\n```\n\n> dependencies 项目依赖包，也就是，不论是开发模式，还是生产模式，项目中必须依赖的包，都会在这里集成，我们通过npm install XX --save-dev来安装的包，就是集成到这个属性的配置中去的。\n\n```\n\"dependencies\": {\n    \"ant-design-vue\": \"^1.3.5\",\n    \"axios\": \"^0.18.0\",\n    \"echarts\": \"^4.2.1\",\n    \"jquery\": \"^2.2.1\",\n    \"mockjs\": \"^1.0.1-beta3\",\n    \"moment\": \"^2.24.0\",\n    \"qs\": \"^6.6.0\",\n    \"v-viewer\": \"^1.4.0\",\n    \"vue\": \"^2.5.22\",\n    \"vue-router\": \"^3.0.1\",\n    \"vuex\": \"^3.0.1\",\n    \"vuex-persistedstate\": \"^2.5.4\"\n  },\n```\n\n> devDependencies 顾名思义，这个属性就是开发环境专属的依赖包，比如，我们需要对代码中用到的样式预处理文件，通过对应的预处理器，去进行转化编译，形成生产环境可用的样式文件，那么，这个预处理工具，就适合集成到这个属性中去。\n\n```\n\"devDependencies\": {\n    \"@babel/polyfill\": \"^7.2.5\",\n    \"@vue/cli-plugin-babel\": \"^3.4.0\",\n    \"@vue/cli-plugin-eslint\": \"^3.4.0\",\n    \"@vue/cli-plugin-unit-mocha\": \"^3.4.0\",\n    \"@vue/cli-service\": \"^3.4.0\",\n    \"@vue/eslint-config-standard\": \"^4.0.0\",\n    \"@vue/test-utils\": \"^1.0.0-beta.20\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"chai\": \"^4.1.2\",\n    \"eslint\": \"^5.8.0\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"less\": \"^3.0.4\",\n    \"less-loader\": \"^4.1.0\",\n    \"lint-staged\": \"^8.1.0\",\n    \"vue-image-swipe\": \"^1.0.5\",\n    \"vue-template-compiler\": \"^2.5.21\"\n  },\n```\n\n### 4、开发模式相关配置\n\n> 开发环境的启动 是通过npm run serve来进行的，我们可以在package.json的scripts中的serve配置里，后面加上--open，这样，我们每次启动开发环境成功后，会自动打开浏览器。默认8080端口。\n\n> 另外需要注意的点是，后期在和后端接口进行交互的时候，实际上，直接调用，就属于跨域了，开发环境可以在vue.config.js(如果没有，则自己新建)文件中，进行相关配置：\n\n```\nproxy: {\n      '/tl-cyberbrain-govern': {\n        target: 'http://59.203.208.71:8088',\n        changeOrigin: true,\n        logLevel: 'debug'\n      }\n    }\n```\n> 比如上面代码，是项目中的一个代理配置，/tl-cyberbrain-govern 就是要代理的地址前缀，target就是代理的目标，比方说，我们要想访问http://59.203.208.71:8088/tl-cyberbrain-govern/api，那么做出如上配置之后，我们只需要访问/api，就能够绕过跨域问题，拿到数据了。\n\n\n### 5、生产模式相关配置\n\n> 我们通过npm run build命令，来对开发好的前端代码，进行编译和打包，代码输出到项目目录的dist文件夹中，之后，由后端进行部署。\n\n> 其中有注意的地方，就是，如果前端项目所处的线上位置，相对于服务器根目录，前面有嵌套路径，那么，这个路径需要给前端，在vue.config.js里的publicPath中配置，否则静态资源会获取不到：\n\n```\npublicPath: process.env.NODE_ENV === \"production\" ? \"/path\" : \"/\"\n```\n\n> process.env.NODE_ENV是Node中，展示当前环境的变量，如果是生产环境，那么，所有静态资源的引用路径，在打包之后，前面都会加上设置的对应的路径，与线上环境一致。\n\n\n\n## 三、项目中的一些建议\n> 这部分，我来简单讲下，对于项目中的一些做法和建议\n\n### 接口调用应该和页面代码进行解耦\n\n> 项目中的数据请求，每一个都是直接写在页面中的，按照经验来说，之前我有遇到过这样一种情况，后端接口服务变化，比如地址变了，端口变了，甚至接口字段，请求方式，传参方式都会变动，那如果直接写在页面中，后期维护和更改，会比较麻烦，得一处一处的去修改。\n\n> 建议是，单独将每个模块的接口部分，单独拎出来，用一个api文件夹包括，这样，我们在对应的模块，只需引入对应的api文件。api文件夹里，其实就是各种请求的接口。这样统一，能方便后期接口的管理。\n\n### vuex状态管理应该进行模块解耦\n\n> 目前项目中，使用到vuex状态管理的，不太多，不知道后期项目，会不会越来越庞大，如果越来越庞大了，现在这种，所有模块都糅杂到一个store中的方式，也不太合适，vuex支持按模块的引入，针对后期模块多的情况，可以按模块划分，这样分层更清晰。\n\n> 另外，建议对mutation单独做一层type的映射，降低耦合性，打个比方：\n\n```js\n//mutation-types.js\nexport const SET_USER_INFO = 'setUserInfo'\n\n```\n\n```js\n//mutations.js\nimport * as types from './mutation-types'\n\nexport default {\n    [types.SET_USER_INFO](state, userInfo) {\n        state.userInfo = userInfo;\n    },\n}\n\n```\n\n> 这样如果setUserInfo这个Mutation需要做变化了的话，我们只需要修改mutation-type就可以了，不用去每个用到该Mutation的地方去依次修改名称。进一步提高可维护性。\n\n### 适度进行一些变量的优化\n\n> 目前项目里在页面中访问vuex store里面的state的时候，是使用this.$store.state.xx来进行获取，而且每个地方用到了，都得重新写一遍，建议后期可以优化一下，避免掉过长的读取链，比如，Vuex框架中提供了一些API来简化我们的数据操作，比如获取state，就用mapState,获取getter，就用mapGetters等等。\n\n\n\n\n","source":"_posts/铜陵城市超脑前端技术梳理.md","raw":"---\ntitle: 铜陵城市超脑前端技术梳理\ndate: 2019-09-20 21:04:04\ntags:\n  - Vue\n  - 前端技术栈\ncategories:\n  - Vue\n  - 前端技术栈\n---\n\n# 铜陵城市超脑前端技术栈梳理\n\n> 今天的分享培训，分为三个部分，一个是对于项目中，前端采用的技术栈，进行一个简单的梳理。另外一个，就是如何去运行，如何去构建我们的前端项目，我会对其中的步骤进行讲解。最后，会给项目中的一些代码给出建议。\n\n\n## 一、技术栈梳理\n\n> 背景 前后端分离，敏捷，并行开发，责任和分工清晰。\n\n> vue全家桶，什么是vue全家桶，从前端项目构建，到开发，到部署上线，使用的都是基于vue生态链中的工具和类库。\n\n> 本项目使用的是vue + vue-cli + vue-router + axios + vuex + ant-design-vue，后面会依次给大家介绍这些东西都能干些什么，或者说，与以前的开发模式相比，都替代了什么\n\n### 1、VUE\n\n> vue是一种用于构建用户界面的mvvm框架，它的核心专注于视图层，实际开发中，便于与第三方库进行功能整合。所谓的mvvm与mvc类似，后面的vm称为视图模型，其实就是mvc中的controller变化而来。为什么使用vue来进行项目的开发呢，它的优点如下：\n\n#### 组件化\n> 组件是Vue强大的功能之一，组件可以扩展 HTML 元素，封装可重用的代码。在以前的开发模式中，可能前端页面需要用到多个地方的相似代码，我们都要依次进行复制粘贴和改动。但是组件化以后，我们只需要进行多次的引用就可以。比方说大屏里使用到的swiper组件，头部底部，视频播放组件，图片查看组件等，这些都是组件化的实践，代码分层解耦清晰，不仅利于前期开发，更利于后期的管理和维护。\n\n#### virtual dom\n> 体现vue的强大和性能优势的另一特点，就是虚拟dom，一般来说，dom操作比较昂贵，dom对象里包含的属性太多，导致每一次的改动，都是对浏览器性能的较大消耗。这里牵扯到浏览器的重绘和回流概念，这里不做引申。一句话概括，频繁的dom操作，会降低页面的性能，与数据量大小成正比，并且指数增长。\n\n> 因此，虚拟dom这个解决方案就出来了，什么是虚拟dom，实际上就是，使用js对象，模拟dom对象的重要属性和主要结构，dom对象的结构，节点之间的关系，其实就是数据结构里的树.因此就是js对象树，模拟dom对象树。将每一次dom数据的变化，进行有序的队列控制，在下一次的dom更新前，对新旧节点进行对比，生成差异，再进行统一的更新渲染，至于渲染时间的控制，这里牵扯到浏览器的事件触发原理，不做引申。可能这种阐述，比较难以理解，这些不重要，简单一句话概括，Virtual dom提升了页面性能，优化了浏览器的渲染，属于最大程度上的最佳实践。\n\n#### 响应式\n> 真正解放我们，不用手动做view和model之间的变化响应的，便是这个响应式系统。\n\n> “响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。视图渲染中使用了数据，数据改变后，视图也会自动更新。\n\n> 我们可以回想下，在jq时代，我们如何去实现视图与数据之间的交互呢？无非是面向过程的那一套东西，取元素，设置属性值，取元素，获取属性值，等等。而Vue的响应式系统，实际底层也是做dom节点的操作，但是更高效。Vue将这部分操作，封装在内部的实现中，我们只需要简单操作，就能实现视图和数据之间的交互。\n\n> 在每个页面组件中，数据可以是提前定义好的页面既有字段，也可以是后端接口给出的数据对象。\n\n> 响应式背后的原理，其实就是运用了设计模式中的观察者模式，通过对data属性的监视，触发能够更新视图数据的watcher，并且进行dom的渲染。\n\n> 响应式的好处，就是解耦视图和模型，我们不用去关注他们之间具体如何的联动和变化，我们只需要进行数据层面的操控，而由响应式系统，替我们完成视图层面的变化。\n\n### 2、vue-cli\n\n> vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板\n\n> 它暴露了一个可以自定义webpack配置的接口，我们可以在它的基础上，灵活配置我们项目需要的webpack配置，比如模块引入，样式预处理，热更新，开发模式的代理，等等。\n\n### 3、vue-router\n> vue-router实际上就是前端路由控制系统，其原理是通过html5的history API或者hash模式，实现单页应用内部功能模块的页面切换，即不刷新，便能改变地址，并且改变页面展示模块。\n\n> 前端打包输出的文件，其实就只有一个index.html，整个系统都是单页，因此页面之间的切换，包括返回，效率和性能都会很高，其实就是路由系统在控制，根据地址的字段映射，展示对应的页面组件，实际上，都是在一个页面上发生的。\n\n### 4、axios\n\n> axios是一个基于promise的http库，它适用于浏览器和node.js中,在vue全家桶中，作为ajax请求的代替，简单说，就是发送http请求的，它支持请求和响应的拦截，这个特性我们可以进行登录拦截，报错收集等统一的处理，还能够对数据进行统一的改造，使的前端代码逻辑变得清晰简单。\n\n> 一般来说，在我们实际项目的请求中，为了安全性，统一使用的post，而Post请求，后端默认的处理，应该就是表单提交formdata的格式，即content-type就是application/x-www-form-urlencoded，但是axios默认的application/json，因此如果直接传递，不做处理，服务器会报500的错，所以我们正常需要使用qs这个库，来对json形式的数据，进行序列化，也就是类似a=b&b=c的格式，才能正常完成请求交互。\n\n### 5、vuex\n> vuex是vue项目的状态管理工具，所谓状态管理，其实就是对于一些全局的数据，状态，进行统一的获取，更改，异步等操作。处于一种可预测的变化中。比如，用户登录状态，更新一处，多处联动信息的变化。方便全局数据的管理。\n\n> 另外我看项目中，使用到了vuex-persistedstate这样的一个插件，其实这个插件是用来对Vuex在内存中的数据，进行持久化的，项目中通过将Vuex中的数据，存入sessionStorage，来进行持久化，防止页面在刷新的时候，数据丢失的问题。sessionStorage的持久化比较折中，其生命周期只存在于这一次打开的浏览器中，关闭浏览器，则会清除。\n\n### 6、ant-design-vue\n\n> ant-design-vue是基于vue开发的一个UI框架。\n\n> 一般来说，中后台的系统，其UI样式和功能交互，几乎趋于统一，所以，这个利于使用UI框架来进行快速的页面构建，很多页面组件，如下拉框，表格，弹窗等，UI框架都提供了简便的引用方式，而且扩展性强。\n\n> 而对于项目中大屏的前端页面，用于前端定制话的东西比较多，很多样式和交互，UI框架并不能提供，因此大多会使用手动编写，而对于常用的功能组件，可以进行选择引入，比如，pagination这个组件，用来进行列表的分页。\n\n\n## 二、项目启动（开发模式和生产模式）\n\n> 这部分主要给后端介绍下，项目的前端项目如何跑起来，如何构建生产环境的包。\n\n### 1、node.js安装 npm \n\n> 目前前端项目构建，都是基于Node环境的，所以前提需要安装Node版本，版本是适当的高一点，比较牢靠，[这里](https://nodejs.org/zh-cn/)是Node下载的链接地址。\n\n> npm 是前端项目的包管理工具，是开发和构建所用到的一切工具和类库的管理工具。现在Node安装会自动安装npm，环境变量也会自动配好，因此，我们只需要安装nodejs就可以了。\n\n### 2、初始化项目\n> npm 是通过命令行操作的，所有操作，基于命令行。这里初始化，就不介绍，一个项目从无到有的生成，这里涉及vue-cli的相关知识，通常情况下，后端人员拉取前端项目源码的时候，项目已经初始化了。\n\n> 这里我要说的是，项目拉取之后，该怎么操作。首先，项目拉取下来之后，在package.json文件所在的目录下，打开命令行，输入npm install 也就是安装下项目依赖的所有包文件。\n\n> 等安装成功之后，输入npm run serve这是本地开发模式启动的命令，端口默认是8080。\n\n### 3、package.json简单介绍\n\n> package.json其实就是项目中，展示模块以及配置信息的文件，一般我们通过修改它来完成一些自定义的东西，主要介绍三个属性，是与我们开发密切相关的。\n\n> scripts 就是配置项目运行或是打包等操作的属性。\n\n```\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\",\n    \"test:unit\": \"vue-cli-service test:unit\"\n  },\n```\n\n> dependencies 项目依赖包，也就是，不论是开发模式，还是生产模式，项目中必须依赖的包，都会在这里集成，我们通过npm install XX --save-dev来安装的包，就是集成到这个属性的配置中去的。\n\n```\n\"dependencies\": {\n    \"ant-design-vue\": \"^1.3.5\",\n    \"axios\": \"^0.18.0\",\n    \"echarts\": \"^4.2.1\",\n    \"jquery\": \"^2.2.1\",\n    \"mockjs\": \"^1.0.1-beta3\",\n    \"moment\": \"^2.24.0\",\n    \"qs\": \"^6.6.0\",\n    \"v-viewer\": \"^1.4.0\",\n    \"vue\": \"^2.5.22\",\n    \"vue-router\": \"^3.0.1\",\n    \"vuex\": \"^3.0.1\",\n    \"vuex-persistedstate\": \"^2.5.4\"\n  },\n```\n\n> devDependencies 顾名思义，这个属性就是开发环境专属的依赖包，比如，我们需要对代码中用到的样式预处理文件，通过对应的预处理器，去进行转化编译，形成生产环境可用的样式文件，那么，这个预处理工具，就适合集成到这个属性中去。\n\n```\n\"devDependencies\": {\n    \"@babel/polyfill\": \"^7.2.5\",\n    \"@vue/cli-plugin-babel\": \"^3.4.0\",\n    \"@vue/cli-plugin-eslint\": \"^3.4.0\",\n    \"@vue/cli-plugin-unit-mocha\": \"^3.4.0\",\n    \"@vue/cli-service\": \"^3.4.0\",\n    \"@vue/eslint-config-standard\": \"^4.0.0\",\n    \"@vue/test-utils\": \"^1.0.0-beta.20\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"chai\": \"^4.1.2\",\n    \"eslint\": \"^5.8.0\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"less\": \"^3.0.4\",\n    \"less-loader\": \"^4.1.0\",\n    \"lint-staged\": \"^8.1.0\",\n    \"vue-image-swipe\": \"^1.0.5\",\n    \"vue-template-compiler\": \"^2.5.21\"\n  },\n```\n\n### 4、开发模式相关配置\n\n> 开发环境的启动 是通过npm run serve来进行的，我们可以在package.json的scripts中的serve配置里，后面加上--open，这样，我们每次启动开发环境成功后，会自动打开浏览器。默认8080端口。\n\n> 另外需要注意的点是，后期在和后端接口进行交互的时候，实际上，直接调用，就属于跨域了，开发环境可以在vue.config.js(如果没有，则自己新建)文件中，进行相关配置：\n\n```\nproxy: {\n      '/tl-cyberbrain-govern': {\n        target: 'http://59.203.208.71:8088',\n        changeOrigin: true,\n        logLevel: 'debug'\n      }\n    }\n```\n> 比如上面代码，是项目中的一个代理配置，/tl-cyberbrain-govern 就是要代理的地址前缀，target就是代理的目标，比方说，我们要想访问http://59.203.208.71:8088/tl-cyberbrain-govern/api，那么做出如上配置之后，我们只需要访问/api，就能够绕过跨域问题，拿到数据了。\n\n\n### 5、生产模式相关配置\n\n> 我们通过npm run build命令，来对开发好的前端代码，进行编译和打包，代码输出到项目目录的dist文件夹中，之后，由后端进行部署。\n\n> 其中有注意的地方，就是，如果前端项目所处的线上位置，相对于服务器根目录，前面有嵌套路径，那么，这个路径需要给前端，在vue.config.js里的publicPath中配置，否则静态资源会获取不到：\n\n```\npublicPath: process.env.NODE_ENV === \"production\" ? \"/path\" : \"/\"\n```\n\n> process.env.NODE_ENV是Node中，展示当前环境的变量，如果是生产环境，那么，所有静态资源的引用路径，在打包之后，前面都会加上设置的对应的路径，与线上环境一致。\n\n\n\n## 三、项目中的一些建议\n> 这部分，我来简单讲下，对于项目中的一些做法和建议\n\n### 接口调用应该和页面代码进行解耦\n\n> 项目中的数据请求，每一个都是直接写在页面中的，按照经验来说，之前我有遇到过这样一种情况，后端接口服务变化，比如地址变了，端口变了，甚至接口字段，请求方式，传参方式都会变动，那如果直接写在页面中，后期维护和更改，会比较麻烦，得一处一处的去修改。\n\n> 建议是，单独将每个模块的接口部分，单独拎出来，用一个api文件夹包括，这样，我们在对应的模块，只需引入对应的api文件。api文件夹里，其实就是各种请求的接口。这样统一，能方便后期接口的管理。\n\n### vuex状态管理应该进行模块解耦\n\n> 目前项目中，使用到vuex状态管理的，不太多，不知道后期项目，会不会越来越庞大，如果越来越庞大了，现在这种，所有模块都糅杂到一个store中的方式，也不太合适，vuex支持按模块的引入，针对后期模块多的情况，可以按模块划分，这样分层更清晰。\n\n> 另外，建议对mutation单独做一层type的映射，降低耦合性，打个比方：\n\n```js\n//mutation-types.js\nexport const SET_USER_INFO = 'setUserInfo'\n\n```\n\n```js\n//mutations.js\nimport * as types from './mutation-types'\n\nexport default {\n    [types.SET_USER_INFO](state, userInfo) {\n        state.userInfo = userInfo;\n    },\n}\n\n```\n\n> 这样如果setUserInfo这个Mutation需要做变化了的话，我们只需要修改mutation-type就可以了，不用去每个用到该Mutation的地方去依次修改名称。进一步提高可维护性。\n\n### 适度进行一些变量的优化\n\n> 目前项目里在页面中访问vuex store里面的state的时候，是使用this.$store.state.xx来进行获取，而且每个地方用到了，都得重新写一遍，建议后期可以优化一下，避免掉过长的读取链，比如，Vuex框架中提供了一些API来简化我们的数据操作，比如获取state，就用mapState,获取getter，就用mapGetters等等。\n\n\n\n\n","slug":"铜陵城市超脑前端技术梳理","published":1,"updated":"2019-09-20T13:18:00.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxna004xmsvi3pgrbdmf","content":"<h1 id=\"铜陵城市超脑前端技术栈梳理\"><a href=\"#铜陵城市超脑前端技术栈梳理\" class=\"headerlink\" title=\"铜陵城市超脑前端技术栈梳理\"></a>铜陵城市超脑前端技术栈梳理</h1><blockquote>\n<p>今天的分享培训，分为三个部分，一个是对于项目中，前端采用的技术栈，进行一个简单的梳理。另外一个，就是如何去运行，如何去构建我们的前端项目，我会对其中的步骤进行讲解。最后，会给项目中的一些代码给出建议。</p>\n</blockquote>\n<h2 id=\"一、技术栈梳理\"><a href=\"#一、技术栈梳理\" class=\"headerlink\" title=\"一、技术栈梳理\"></a>一、技术栈梳理</h2><blockquote>\n<p>背景 前后端分离，敏捷，并行开发，责任和分工清晰。</p>\n</blockquote>\n<blockquote>\n<p>vue全家桶，什么是vue全家桶，从前端项目构建，到开发，到部署上线，使用的都是基于vue生态链中的工具和类库。</p>\n</blockquote>\n<blockquote>\n<p>本项目使用的是vue + vue-cli + vue-router + axios + vuex + ant-design-vue，后面会依次给大家介绍这些东西都能干些什么，或者说，与以前的开发模式相比，都替代了什么</p>\n</blockquote>\n<h3 id=\"1、VUE\"><a href=\"#1、VUE\" class=\"headerlink\" title=\"1、VUE\"></a>1、VUE</h3><blockquote>\n<p>vue是一种用于构建用户界面的mvvm框架，它的核心专注于视图层，实际开发中，便于与第三方库进行功能整合。所谓的mvvm与mvc类似，后面的vm称为视图模型，其实就是mvc中的controller变化而来。为什么使用vue来进行项目的开发呢，它的优点如下：</p>\n</blockquote>\n<h4 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h4><blockquote>\n<p>组件是Vue强大的功能之一，组件可以扩展 HTML 元素，封装可重用的代码。在以前的开发模式中，可能前端页面需要用到多个地方的相似代码，我们都要依次进行复制粘贴和改动。但是组件化以后，我们只需要进行多次的引用就可以。比方说大屏里使用到的swiper组件，头部底部，视频播放组件，图片查看组件等，这些都是组件化的实践，代码分层解耦清晰，不仅利于前期开发，更利于后期的管理和维护。</p>\n</blockquote>\n<h4 id=\"virtual-dom\"><a href=\"#virtual-dom\" class=\"headerlink\" title=\"virtual dom\"></a>virtual dom</h4><blockquote>\n<p>体现vue的强大和性能优势的另一特点，就是虚拟dom，一般来说，dom操作比较昂贵，dom对象里包含的属性太多，导致每一次的改动，都是对浏览器性能的较大消耗。这里牵扯到浏览器的重绘和回流概念，这里不做引申。一句话概括，频繁的dom操作，会降低页面的性能，与数据量大小成正比，并且指数增长。</p>\n</blockquote>\n<blockquote>\n<p>因此，虚拟dom这个解决方案就出来了，什么是虚拟dom，实际上就是，使用js对象，模拟dom对象的重要属性和主要结构，dom对象的结构，节点之间的关系，其实就是数据结构里的树.因此就是js对象树，模拟dom对象树。将每一次dom数据的变化，进行有序的队列控制，在下一次的dom更新前，对新旧节点进行对比，生成差异，再进行统一的更新渲染，至于渲染时间的控制，这里牵扯到浏览器的事件触发原理，不做引申。可能这种阐述，比较难以理解，这些不重要，简单一句话概括，Virtual dom提升了页面性能，优化了浏览器的渲染，属于最大程度上的最佳实践。</p>\n</blockquote>\n<h4 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h4><blockquote>\n<p>真正解放我们，不用手动做view和model之间的变化响应的，便是这个响应式系统。</p>\n</blockquote>\n<blockquote>\n<p>“响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。视图渲染中使用了数据，数据改变后，视图也会自动更新。</p>\n</blockquote>\n<blockquote>\n<p>我们可以回想下，在jq时代，我们如何去实现视图与数据之间的交互呢？无非是面向过程的那一套东西，取元素，设置属性值，取元素，获取属性值，等等。而Vue的响应式系统，实际底层也是做dom节点的操作，但是更高效。Vue将这部分操作，封装在内部的实现中，我们只需要简单操作，就能实现视图和数据之间的交互。</p>\n</blockquote>\n<blockquote>\n<p>在每个页面组件中，数据可以是提前定义好的页面既有字段，也可以是后端接口给出的数据对象。</p>\n</blockquote>\n<blockquote>\n<p>响应式背后的原理，其实就是运用了设计模式中的观察者模式，通过对data属性的监视，触发能够更新视图数据的watcher，并且进行dom的渲染。</p>\n</blockquote>\n<blockquote>\n<p>响应式的好处，就是解耦视图和模型，我们不用去关注他们之间具体如何的联动和变化，我们只需要进行数据层面的操控，而由响应式系统，替我们完成视图层面的变化。</p>\n</blockquote>\n<h3 id=\"2、vue-cli\"><a href=\"#2、vue-cli\" class=\"headerlink\" title=\"2、vue-cli\"></a>2、vue-cli</h3><blockquote>\n<p>vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板</p>\n</blockquote>\n<blockquote>\n<p>它暴露了一个可以自定义webpack配置的接口，我们可以在它的基础上，灵活配置我们项目需要的webpack配置，比如模块引入，样式预处理，热更新，开发模式的代理，等等。</p>\n</blockquote>\n<h3 id=\"3、vue-router\"><a href=\"#3、vue-router\" class=\"headerlink\" title=\"3、vue-router\"></a>3、vue-router</h3><blockquote>\n<p>vue-router实际上就是前端路由控制系统，其原理是通过html5的history API或者hash模式，实现单页应用内部功能模块的页面切换，即不刷新，便能改变地址，并且改变页面展示模块。</p>\n</blockquote>\n<blockquote>\n<p>前端打包输出的文件，其实就只有一个index.html，整个系统都是单页，因此页面之间的切换，包括返回，效率和性能都会很高，其实就是路由系统在控制，根据地址的字段映射，展示对应的页面组件，实际上，都是在一个页面上发生的。</p>\n</blockquote>\n<h3 id=\"4、axios\"><a href=\"#4、axios\" class=\"headerlink\" title=\"4、axios\"></a>4、axios</h3><blockquote>\n<p>axios是一个基于promise的http库，它适用于浏览器和node.js中,在vue全家桶中，作为ajax请求的代替，简单说，就是发送http请求的，它支持请求和响应的拦截，这个特性我们可以进行登录拦截，报错收集等统一的处理，还能够对数据进行统一的改造，使的前端代码逻辑变得清晰简单。</p>\n</blockquote>\n<blockquote>\n<p>一般来说，在我们实际项目的请求中，为了安全性，统一使用的post，而Post请求，后端默认的处理，应该就是表单提交formdata的格式，即content-type就是application/x-www-form-urlencoded，但是axios默认的application/json，因此如果直接传递，不做处理，服务器会报500的错，所以我们正常需要使用qs这个库，来对json形式的数据，进行序列化，也就是类似a=b&amp;b=c的格式，才能正常完成请求交互。</p>\n</blockquote>\n<h3 id=\"5、vuex\"><a href=\"#5、vuex\" class=\"headerlink\" title=\"5、vuex\"></a>5、vuex</h3><blockquote>\n<p>vuex是vue项目的状态管理工具，所谓状态管理，其实就是对于一些全局的数据，状态，进行统一的获取，更改，异步等操作。处于一种可预测的变化中。比如，用户登录状态，更新一处，多处联动信息的变化。方便全局数据的管理。</p>\n</blockquote>\n<blockquote>\n<p>另外我看项目中，使用到了vuex-persistedstate这样的一个插件，其实这个插件是用来对Vuex在内存中的数据，进行持久化的，项目中通过将Vuex中的数据，存入sessionStorage，来进行持久化，防止页面在刷新的时候，数据丢失的问题。sessionStorage的持久化比较折中，其生命周期只存在于这一次打开的浏览器中，关闭浏览器，则会清除。</p>\n</blockquote>\n<h3 id=\"6、ant-design-vue\"><a href=\"#6、ant-design-vue\" class=\"headerlink\" title=\"6、ant-design-vue\"></a>6、ant-design-vue</h3><blockquote>\n<p>ant-design-vue是基于vue开发的一个UI框架。</p>\n</blockquote>\n<blockquote>\n<p>一般来说，中后台的系统，其UI样式和功能交互，几乎趋于统一，所以，这个利于使用UI框架来进行快速的页面构建，很多页面组件，如下拉框，表格，弹窗等，UI框架都提供了简便的引用方式，而且扩展性强。</p>\n</blockquote>\n<blockquote>\n<p>而对于项目中大屏的前端页面，用于前端定制话的东西比较多，很多样式和交互，UI框架并不能提供，因此大多会使用手动编写，而对于常用的功能组件，可以进行选择引入，比如，pagination这个组件，用来进行列表的分页。</p>\n</blockquote>\n<h2 id=\"二、项目启动（开发模式和生产模式）\"><a href=\"#二、项目启动（开发模式和生产模式）\" class=\"headerlink\" title=\"二、项目启动（开发模式和生产模式）\"></a>二、项目启动（开发模式和生产模式）</h2><blockquote>\n<p>这部分主要给后端介绍下，项目的前端项目如何跑起来，如何构建生产环境的包。</p>\n</blockquote>\n<h3 id=\"1、node-js安装-npm\"><a href=\"#1、node-js安装-npm\" class=\"headerlink\" title=\"1、node.js安装 npm\"></a>1、node.js安装 npm</h3><blockquote>\n<p>目前前端项目构建，都是基于Node环境的，所以前提需要安装Node版本，版本是适当的高一点，比较牢靠，<a href=\"https://nodejs.org/zh-cn/\">这里</a>是Node下载的链接地址。</p>\n</blockquote>\n<blockquote>\n<p>npm 是前端项目的包管理工具，是开发和构建所用到的一切工具和类库的管理工具。现在Node安装会自动安装npm，环境变量也会自动配好，因此，我们只需要安装nodejs就可以了。</p>\n</blockquote>\n<h3 id=\"2、初始化项目\"><a href=\"#2、初始化项目\" class=\"headerlink\" title=\"2、初始化项目\"></a>2、初始化项目</h3><blockquote>\n<p>npm 是通过命令行操作的，所有操作，基于命令行。这里初始化，就不介绍，一个项目从无到有的生成，这里涉及vue-cli的相关知识，通常情况下，后端人员拉取前端项目源码的时候，项目已经初始化了。</p>\n</blockquote>\n<blockquote>\n<p>这里我要说的是，项目拉取之后，该怎么操作。首先，项目拉取下来之后，在package.json文件所在的目录下，打开命令行，输入npm install 也就是安装下项目依赖的所有包文件。</p>\n</blockquote>\n<blockquote>\n<p>等安装成功之后，输入npm run serve这是本地开发模式启动的命令，端口默认是8080。</p>\n</blockquote>\n<h3 id=\"3、package-json简单介绍\"><a href=\"#3、package-json简单介绍\" class=\"headerlink\" title=\"3、package.json简单介绍\"></a>3、package.json简单介绍</h3><blockquote>\n<p>package.json其实就是项目中，展示模块以及配置信息的文件，一般我们通过修改它来完成一些自定义的东西，主要介绍三个属性，是与我们开发密切相关的。</p>\n</blockquote>\n<blockquote>\n<p>scripts 就是配置项目运行或是打包等操作的属性。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,</span><br><span class=\"line\">    &quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dependencies 项目依赖包，也就是，不论是开发模式，还是生产模式，项目中必须依赖的包，都会在这里集成，我们通过npm install XX –save-dev来安装的包，就是集成到这个属性的配置中去的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;ant-design-vue&quot;: &quot;^1.3.5&quot;,</span><br><span class=\"line\">    &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">    &quot;echarts&quot;: &quot;^4.2.1&quot;,</span><br><span class=\"line\">    &quot;jquery&quot;: &quot;^2.2.1&quot;,</span><br><span class=\"line\">    &quot;mockjs&quot;: &quot;^1.0.1-beta3&quot;,</span><br><span class=\"line\">    &quot;moment&quot;: &quot;^2.24.0&quot;,</span><br><span class=\"line\">    &quot;qs&quot;: &quot;^6.6.0&quot;,</span><br><span class=\"line\">    &quot;v-viewer&quot;: &quot;^1.4.0&quot;,</span><br><span class=\"line\">    &quot;vue&quot;: &quot;^2.5.22&quot;,</span><br><span class=\"line\">    &quot;vue-router&quot;: &quot;^3.0.1&quot;,</span><br><span class=\"line\">    &quot;vuex&quot;: &quot;^3.0.1&quot;,</span><br><span class=\"line\">    &quot;vuex-persistedstate&quot;: &quot;^2.5.4&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>devDependencies 顾名思义，这个属性就是开发环境专属的依赖包，比如，我们需要对代码中用到的样式预处理文件，通过对应的预处理器，去进行转化编译，形成生产环境可用的样式文件，那么，这个预处理工具，就适合集成到这个属性中去。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@babel&#x2F;polyfill&quot;: &quot;^7.2.5&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-babel&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-eslint&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-unit-mocha&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-service&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;eslint-config-standard&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;test-utils&quot;: &quot;^1.0.0-beta.20&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;^10.0.1&quot;,</span><br><span class=\"line\">    &quot;chai&quot;: &quot;^4.1.2&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;^5.8.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">    &quot;less&quot;: &quot;^3.0.4&quot;,</span><br><span class=\"line\">    &quot;less-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^8.1.0&quot;,</span><br><span class=\"line\">    &quot;vue-image-swipe&quot;: &quot;^1.0.5&quot;,</span><br><span class=\"line\">    &quot;vue-template-compiler&quot;: &quot;^2.5.21&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、开发模式相关配置\"><a href=\"#4、开发模式相关配置\" class=\"headerlink\" title=\"4、开发模式相关配置\"></a>4、开发模式相关配置</h3><blockquote>\n<p>开发环境的启动 是通过npm run serve来进行的，我们可以在package.json的scripts中的serve配置里，后面加上–open，这样，我们每次启动开发环境成功后，会自动打开浏览器。默认8080端口。</p>\n</blockquote>\n<blockquote>\n<p>另外需要注意的点是，后期在和后端接口进行交互的时候，实际上，直接调用，就属于跨域了，开发环境可以在vue.config.js(如果没有，则自己新建)文件中，进行相关配置：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">      &#39;&#x2F;tl-cyberbrain-govern&#39;: &#123;</span><br><span class=\"line\">        target: &#39;http:&#x2F;&#x2F;59.203.208.71:8088&#39;,</span><br><span class=\"line\">        changeOrigin: true,</span><br><span class=\"line\">        logLevel: &#39;debug&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如上面代码，是项目中的一个代理配置，/tl-cyberbrain-govern 就是要代理的地址前缀，target就是代理的目标，比方说，我们要想访问<a href=\"http://59.203.208.71:8088/tl-cyberbrain-govern/api%EF%BC%8C%E9%82%A3%E4%B9%88%E5%81%9A%E5%87%BA%E5%A6%82%E4%B8%8A%E9%85%8D%E7%BD%AE%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE/api%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%A4%9F%E7%BB%95%E8%BF%87%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%8C%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE%E4%BA%86%E3%80%82\">http://59.203.208.71:8088/tl-cyberbrain-govern/api，那么做出如上配置之后，我们只需要访问/api，就能够绕过跨域问题，拿到数据了。</a></p>\n</blockquote>\n<h3 id=\"5、生产模式相关配置\"><a href=\"#5、生产模式相关配置\" class=\"headerlink\" title=\"5、生产模式相关配置\"></a>5、生产模式相关配置</h3><blockquote>\n<p>我们通过npm run build命令，来对开发好的前端代码，进行编译和打包，代码输出到项目目录的dist文件夹中，之后，由后端进行部署。</p>\n</blockquote>\n<blockquote>\n<p>其中有注意的地方，就是，如果前端项目所处的线上位置，相对于服务器根目录，前面有嵌套路径，那么，这个路径需要给前端，在vue.config.js里的publicPath中配置，否则静态资源会获取不到：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &quot;production&quot; ? &quot;&#x2F;path&quot; : &quot;&#x2F;&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>process.env.NODE_ENV是Node中，展示当前环境的变量，如果是生产环境，那么，所有静态资源的引用路径，在打包之后，前面都会加上设置的对应的路径，与线上环境一致。</p>\n</blockquote>\n<h2 id=\"三、项目中的一些建议\"><a href=\"#三、项目中的一些建议\" class=\"headerlink\" title=\"三、项目中的一些建议\"></a>三、项目中的一些建议</h2><blockquote>\n<p>这部分，我来简单讲下，对于项目中的一些做法和建议</p>\n</blockquote>\n<h3 id=\"接口调用应该和页面代码进行解耦\"><a href=\"#接口调用应该和页面代码进行解耦\" class=\"headerlink\" title=\"接口调用应该和页面代码进行解耦\"></a>接口调用应该和页面代码进行解耦</h3><blockquote>\n<p>项目中的数据请求，每一个都是直接写在页面中的，按照经验来说，之前我有遇到过这样一种情况，后端接口服务变化，比如地址变了，端口变了，甚至接口字段，请求方式，传参方式都会变动，那如果直接写在页面中，后期维护和更改，会比较麻烦，得一处一处的去修改。</p>\n</blockquote>\n<blockquote>\n<p>建议是，单独将每个模块的接口部分，单独拎出来，用一个api文件夹包括，这样，我们在对应的模块，只需引入对应的api文件。api文件夹里，其实就是各种请求的接口。这样统一，能方便后期接口的管理。</p>\n</blockquote>\n<h3 id=\"vuex状态管理应该进行模块解耦\"><a href=\"#vuex状态管理应该进行模块解耦\" class=\"headerlink\" title=\"vuex状态管理应该进行模块解耦\"></a>vuex状态管理应该进行模块解耦</h3><blockquote>\n<p>目前项目中，使用到vuex状态管理的，不太多，不知道后期项目，会不会越来越庞大，如果越来越庞大了，现在这种，所有模块都糅杂到一个store中的方式，也不太合适，vuex支持按模块的引入，针对后期模块多的情况，可以按模块划分，这样分层更清晰。</p>\n</blockquote>\n<blockquote>\n<p>另外，建议对mutation单独做一层type的映射，降低耦合性，打个比方：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SET_USER_INFO = <span class=\"string\">&#x27;setUserInfo&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mutations.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mutation-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    [types.SET_USER_INFO](state, userInfo) &#123;</span><br><span class=\"line\">        state.userInfo = userInfo;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样如果setUserInfo这个Mutation需要做变化了的话，我们只需要修改mutation-type就可以了，不用去每个用到该Mutation的地方去依次修改名称。进一步提高可维护性。</p>\n</blockquote>\n<h3 id=\"适度进行一些变量的优化\"><a href=\"#适度进行一些变量的优化\" class=\"headerlink\" title=\"适度进行一些变量的优化\"></a>适度进行一些变量的优化</h3><blockquote>\n<p>目前项目里在页面中访问vuex store里面的state的时候，是使用this.$store.state.xx来进行获取，而且每个地方用到了，都得重新写一遍，建议后期可以优化一下，避免掉过长的读取链，比如，Vuex框架中提供了一些API来简化我们的数据操作，比如获取state，就用mapState,获取getter，就用mapGetters等等。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"铜陵城市超脑前端技术栈梳理\"><a href=\"#铜陵城市超脑前端技术栈梳理\" class=\"headerlink\" title=\"铜陵城市超脑前端技术栈梳理\"></a>铜陵城市超脑前端技术栈梳理</h1><blockquote>\n<p>今天的分享培训，分为三个部分，一个是对于项目中，前端采用的技术栈，进行一个简单的梳理。另外一个，就是如何去运行，如何去构建我们的前端项目，我会对其中的步骤进行讲解。最后，会给项目中的一些代码给出建议。</p>\n</blockquote>\n<h2 id=\"一、技术栈梳理\"><a href=\"#一、技术栈梳理\" class=\"headerlink\" title=\"一、技术栈梳理\"></a>一、技术栈梳理</h2><blockquote>\n<p>背景 前后端分离，敏捷，并行开发，责任和分工清晰。</p>\n</blockquote>\n<blockquote>\n<p>vue全家桶，什么是vue全家桶，从前端项目构建，到开发，到部署上线，使用的都是基于vue生态链中的工具和类库。</p>\n</blockquote>\n<blockquote>\n<p>本项目使用的是vue + vue-cli + vue-router + axios + vuex + ant-design-vue，后面会依次给大家介绍这些东西都能干些什么，或者说，与以前的开发模式相比，都替代了什么</p>\n</blockquote>\n<h3 id=\"1、VUE\"><a href=\"#1、VUE\" class=\"headerlink\" title=\"1、VUE\"></a>1、VUE</h3><blockquote>\n<p>vue是一种用于构建用户界面的mvvm框架，它的核心专注于视图层，实际开发中，便于与第三方库进行功能整合。所谓的mvvm与mvc类似，后面的vm称为视图模型，其实就是mvc中的controller变化而来。为什么使用vue来进行项目的开发呢，它的优点如下：</p>\n</blockquote>\n<h4 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h4><blockquote>\n<p>组件是Vue强大的功能之一，组件可以扩展 HTML 元素，封装可重用的代码。在以前的开发模式中，可能前端页面需要用到多个地方的相似代码，我们都要依次进行复制粘贴和改动。但是组件化以后，我们只需要进行多次的引用就可以。比方说大屏里使用到的swiper组件，头部底部，视频播放组件，图片查看组件等，这些都是组件化的实践，代码分层解耦清晰，不仅利于前期开发，更利于后期的管理和维护。</p>\n</blockquote>\n<h4 id=\"virtual-dom\"><a href=\"#virtual-dom\" class=\"headerlink\" title=\"virtual dom\"></a>virtual dom</h4><blockquote>\n<p>体现vue的强大和性能优势的另一特点，就是虚拟dom，一般来说，dom操作比较昂贵，dom对象里包含的属性太多，导致每一次的改动，都是对浏览器性能的较大消耗。这里牵扯到浏览器的重绘和回流概念，这里不做引申。一句话概括，频繁的dom操作，会降低页面的性能，与数据量大小成正比，并且指数增长。</p>\n</blockquote>\n<blockquote>\n<p>因此，虚拟dom这个解决方案就出来了，什么是虚拟dom，实际上就是，使用js对象，模拟dom对象的重要属性和主要结构，dom对象的结构，节点之间的关系，其实就是数据结构里的树.因此就是js对象树，模拟dom对象树。将每一次dom数据的变化，进行有序的队列控制，在下一次的dom更新前，对新旧节点进行对比，生成差异，再进行统一的更新渲染，至于渲染时间的控制，这里牵扯到浏览器的事件触发原理，不做引申。可能这种阐述，比较难以理解，这些不重要，简单一句话概括，Virtual dom提升了页面性能，优化了浏览器的渲染，属于最大程度上的最佳实践。</p>\n</blockquote>\n<h4 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h4><blockquote>\n<p>真正解放我们，不用手动做view和model之间的变化响应的，便是这个响应式系统。</p>\n</blockquote>\n<blockquote>\n<p>“响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。视图渲染中使用了数据，数据改变后，视图也会自动更新。</p>\n</blockquote>\n<blockquote>\n<p>我们可以回想下，在jq时代，我们如何去实现视图与数据之间的交互呢？无非是面向过程的那一套东西，取元素，设置属性值，取元素，获取属性值，等等。而Vue的响应式系统，实际底层也是做dom节点的操作，但是更高效。Vue将这部分操作，封装在内部的实现中，我们只需要简单操作，就能实现视图和数据之间的交互。</p>\n</blockquote>\n<blockquote>\n<p>在每个页面组件中，数据可以是提前定义好的页面既有字段，也可以是后端接口给出的数据对象。</p>\n</blockquote>\n<blockquote>\n<p>响应式背后的原理，其实就是运用了设计模式中的观察者模式，通过对data属性的监视，触发能够更新视图数据的watcher，并且进行dom的渲染。</p>\n</blockquote>\n<blockquote>\n<p>响应式的好处，就是解耦视图和模型，我们不用去关注他们之间具体如何的联动和变化，我们只需要进行数据层面的操控，而由响应式系统，替我们完成视图层面的变化。</p>\n</blockquote>\n<h3 id=\"2、vue-cli\"><a href=\"#2、vue-cli\" class=\"headerlink\" title=\"2、vue-cli\"></a>2、vue-cli</h3><blockquote>\n<p>vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板</p>\n</blockquote>\n<blockquote>\n<p>它暴露了一个可以自定义webpack配置的接口，我们可以在它的基础上，灵活配置我们项目需要的webpack配置，比如模块引入，样式预处理，热更新，开发模式的代理，等等。</p>\n</blockquote>\n<h3 id=\"3、vue-router\"><a href=\"#3、vue-router\" class=\"headerlink\" title=\"3、vue-router\"></a>3、vue-router</h3><blockquote>\n<p>vue-router实际上就是前端路由控制系统，其原理是通过html5的history API或者hash模式，实现单页应用内部功能模块的页面切换，即不刷新，便能改变地址，并且改变页面展示模块。</p>\n</blockquote>\n<blockquote>\n<p>前端打包输出的文件，其实就只有一个index.html，整个系统都是单页，因此页面之间的切换，包括返回，效率和性能都会很高，其实就是路由系统在控制，根据地址的字段映射，展示对应的页面组件，实际上，都是在一个页面上发生的。</p>\n</blockquote>\n<h3 id=\"4、axios\"><a href=\"#4、axios\" class=\"headerlink\" title=\"4、axios\"></a>4、axios</h3><blockquote>\n<p>axios是一个基于promise的http库，它适用于浏览器和node.js中,在vue全家桶中，作为ajax请求的代替，简单说，就是发送http请求的，它支持请求和响应的拦截，这个特性我们可以进行登录拦截，报错收集等统一的处理，还能够对数据进行统一的改造，使的前端代码逻辑变得清晰简单。</p>\n</blockquote>\n<blockquote>\n<p>一般来说，在我们实际项目的请求中，为了安全性，统一使用的post，而Post请求，后端默认的处理，应该就是表单提交formdata的格式，即content-type就是application/x-www-form-urlencoded，但是axios默认的application/json，因此如果直接传递，不做处理，服务器会报500的错，所以我们正常需要使用qs这个库，来对json形式的数据，进行序列化，也就是类似a=b&amp;b=c的格式，才能正常完成请求交互。</p>\n</blockquote>\n<h3 id=\"5、vuex\"><a href=\"#5、vuex\" class=\"headerlink\" title=\"5、vuex\"></a>5、vuex</h3><blockquote>\n<p>vuex是vue项目的状态管理工具，所谓状态管理，其实就是对于一些全局的数据，状态，进行统一的获取，更改，异步等操作。处于一种可预测的变化中。比如，用户登录状态，更新一处，多处联动信息的变化。方便全局数据的管理。</p>\n</blockquote>\n<blockquote>\n<p>另外我看项目中，使用到了vuex-persistedstate这样的一个插件，其实这个插件是用来对Vuex在内存中的数据，进行持久化的，项目中通过将Vuex中的数据，存入sessionStorage，来进行持久化，防止页面在刷新的时候，数据丢失的问题。sessionStorage的持久化比较折中，其生命周期只存在于这一次打开的浏览器中，关闭浏览器，则会清除。</p>\n</blockquote>\n<h3 id=\"6、ant-design-vue\"><a href=\"#6、ant-design-vue\" class=\"headerlink\" title=\"6、ant-design-vue\"></a>6、ant-design-vue</h3><blockquote>\n<p>ant-design-vue是基于vue开发的一个UI框架。</p>\n</blockquote>\n<blockquote>\n<p>一般来说，中后台的系统，其UI样式和功能交互，几乎趋于统一，所以，这个利于使用UI框架来进行快速的页面构建，很多页面组件，如下拉框，表格，弹窗等，UI框架都提供了简便的引用方式，而且扩展性强。</p>\n</blockquote>\n<blockquote>\n<p>而对于项目中大屏的前端页面，用于前端定制话的东西比较多，很多样式和交互，UI框架并不能提供，因此大多会使用手动编写，而对于常用的功能组件，可以进行选择引入，比如，pagination这个组件，用来进行列表的分页。</p>\n</blockquote>\n<h2 id=\"二、项目启动（开发模式和生产模式）\"><a href=\"#二、项目启动（开发模式和生产模式）\" class=\"headerlink\" title=\"二、项目启动（开发模式和生产模式）\"></a>二、项目启动（开发模式和生产模式）</h2><blockquote>\n<p>这部分主要给后端介绍下，项目的前端项目如何跑起来，如何构建生产环境的包。</p>\n</blockquote>\n<h3 id=\"1、node-js安装-npm\"><a href=\"#1、node-js安装-npm\" class=\"headerlink\" title=\"1、node.js安装 npm\"></a>1、node.js安装 npm</h3><blockquote>\n<p>目前前端项目构建，都是基于Node环境的，所以前提需要安装Node版本，版本是适当的高一点，比较牢靠，<a href=\"https://nodejs.org/zh-cn/\">这里</a>是Node下载的链接地址。</p>\n</blockquote>\n<blockquote>\n<p>npm 是前端项目的包管理工具，是开发和构建所用到的一切工具和类库的管理工具。现在Node安装会自动安装npm，环境变量也会自动配好，因此，我们只需要安装nodejs就可以了。</p>\n</blockquote>\n<h3 id=\"2、初始化项目\"><a href=\"#2、初始化项目\" class=\"headerlink\" title=\"2、初始化项目\"></a>2、初始化项目</h3><blockquote>\n<p>npm 是通过命令行操作的，所有操作，基于命令行。这里初始化，就不介绍，一个项目从无到有的生成，这里涉及vue-cli的相关知识，通常情况下，后端人员拉取前端项目源码的时候，项目已经初始化了。</p>\n</blockquote>\n<blockquote>\n<p>这里我要说的是，项目拉取之后，该怎么操作。首先，项目拉取下来之后，在package.json文件所在的目录下，打开命令行，输入npm install 也就是安装下项目依赖的所有包文件。</p>\n</blockquote>\n<blockquote>\n<p>等安装成功之后，输入npm run serve这是本地开发模式启动的命令，端口默认是8080。</p>\n</blockquote>\n<h3 id=\"3、package-json简单介绍\"><a href=\"#3、package-json简单介绍\" class=\"headerlink\" title=\"3、package.json简单介绍\"></a>3、package.json简单介绍</h3><blockquote>\n<p>package.json其实就是项目中，展示模块以及配置信息的文件，一般我们通过修改它来完成一些自定义的东西，主要介绍三个属性，是与我们开发密切相关的。</p>\n</blockquote>\n<blockquote>\n<p>scripts 就是配置项目运行或是打包等操作的属性。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,</span><br><span class=\"line\">    &quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dependencies 项目依赖包，也就是，不论是开发模式，还是生产模式，项目中必须依赖的包，都会在这里集成，我们通过npm install XX –save-dev来安装的包，就是集成到这个属性的配置中去的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;ant-design-vue&quot;: &quot;^1.3.5&quot;,</span><br><span class=\"line\">    &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">    &quot;echarts&quot;: &quot;^4.2.1&quot;,</span><br><span class=\"line\">    &quot;jquery&quot;: &quot;^2.2.1&quot;,</span><br><span class=\"line\">    &quot;mockjs&quot;: &quot;^1.0.1-beta3&quot;,</span><br><span class=\"line\">    &quot;moment&quot;: &quot;^2.24.0&quot;,</span><br><span class=\"line\">    &quot;qs&quot;: &quot;^6.6.0&quot;,</span><br><span class=\"line\">    &quot;v-viewer&quot;: &quot;^1.4.0&quot;,</span><br><span class=\"line\">    &quot;vue&quot;: &quot;^2.5.22&quot;,</span><br><span class=\"line\">    &quot;vue-router&quot;: &quot;^3.0.1&quot;,</span><br><span class=\"line\">    &quot;vuex&quot;: &quot;^3.0.1&quot;,</span><br><span class=\"line\">    &quot;vuex-persistedstate&quot;: &quot;^2.5.4&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>devDependencies 顾名思义，这个属性就是开发环境专属的依赖包，比如，我们需要对代码中用到的样式预处理文件，通过对应的预处理器，去进行转化编译，形成生产环境可用的样式文件，那么，这个预处理工具，就适合集成到这个属性中去。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@babel&#x2F;polyfill&quot;: &quot;^7.2.5&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-babel&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-eslint&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-plugin-unit-mocha&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;cli-service&quot;: &quot;^3.4.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;eslint-config-standard&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;@vue&#x2F;test-utils&quot;: &quot;^1.0.0-beta.20&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;^10.0.1&quot;,</span><br><span class=\"line\">    &quot;chai&quot;: &quot;^4.1.2&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;^5.8.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">    &quot;less&quot;: &quot;^3.0.4&quot;,</span><br><span class=\"line\">    &quot;less-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class=\"line\">    &quot;lint-staged&quot;: &quot;^8.1.0&quot;,</span><br><span class=\"line\">    &quot;vue-image-swipe&quot;: &quot;^1.0.5&quot;,</span><br><span class=\"line\">    &quot;vue-template-compiler&quot;: &quot;^2.5.21&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、开发模式相关配置\"><a href=\"#4、开发模式相关配置\" class=\"headerlink\" title=\"4、开发模式相关配置\"></a>4、开发模式相关配置</h3><blockquote>\n<p>开发环境的启动 是通过npm run serve来进行的，我们可以在package.json的scripts中的serve配置里，后面加上–open，这样，我们每次启动开发环境成功后，会自动打开浏览器。默认8080端口。</p>\n</blockquote>\n<blockquote>\n<p>另外需要注意的点是，后期在和后端接口进行交互的时候，实际上，直接调用，就属于跨域了，开发环境可以在vue.config.js(如果没有，则自己新建)文件中，进行相关配置：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">      &#39;&#x2F;tl-cyberbrain-govern&#39;: &#123;</span><br><span class=\"line\">        target: &#39;http:&#x2F;&#x2F;59.203.208.71:8088&#39;,</span><br><span class=\"line\">        changeOrigin: true,</span><br><span class=\"line\">        logLevel: &#39;debug&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如上面代码，是项目中的一个代理配置，/tl-cyberbrain-govern 就是要代理的地址前缀，target就是代理的目标，比方说，我们要想访问<a href=\"http://59.203.208.71:8088/tl-cyberbrain-govern/api%EF%BC%8C%E9%82%A3%E4%B9%88%E5%81%9A%E5%87%BA%E5%A6%82%E4%B8%8A%E9%85%8D%E7%BD%AE%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE/api%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%A4%9F%E7%BB%95%E8%BF%87%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%8C%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE%E4%BA%86%E3%80%82\">http://59.203.208.71:8088/tl-cyberbrain-govern/api，那么做出如上配置之后，我们只需要访问/api，就能够绕过跨域问题，拿到数据了。</a></p>\n</blockquote>\n<h3 id=\"5、生产模式相关配置\"><a href=\"#5、生产模式相关配置\" class=\"headerlink\" title=\"5、生产模式相关配置\"></a>5、生产模式相关配置</h3><blockquote>\n<p>我们通过npm run build命令，来对开发好的前端代码，进行编译和打包，代码输出到项目目录的dist文件夹中，之后，由后端进行部署。</p>\n</blockquote>\n<blockquote>\n<p>其中有注意的地方，就是，如果前端项目所处的线上位置，相对于服务器根目录，前面有嵌套路径，那么，这个路径需要给前端，在vue.config.js里的publicPath中配置，否则静态资源会获取不到：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &quot;production&quot; ? &quot;&#x2F;path&quot; : &quot;&#x2F;&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>process.env.NODE_ENV是Node中，展示当前环境的变量，如果是生产环境，那么，所有静态资源的引用路径，在打包之后，前面都会加上设置的对应的路径，与线上环境一致。</p>\n</blockquote>\n<h2 id=\"三、项目中的一些建议\"><a href=\"#三、项目中的一些建议\" class=\"headerlink\" title=\"三、项目中的一些建议\"></a>三、项目中的一些建议</h2><blockquote>\n<p>这部分，我来简单讲下，对于项目中的一些做法和建议</p>\n</blockquote>\n<h3 id=\"接口调用应该和页面代码进行解耦\"><a href=\"#接口调用应该和页面代码进行解耦\" class=\"headerlink\" title=\"接口调用应该和页面代码进行解耦\"></a>接口调用应该和页面代码进行解耦</h3><blockquote>\n<p>项目中的数据请求，每一个都是直接写在页面中的，按照经验来说，之前我有遇到过这样一种情况，后端接口服务变化，比如地址变了，端口变了，甚至接口字段，请求方式，传参方式都会变动，那如果直接写在页面中，后期维护和更改，会比较麻烦，得一处一处的去修改。</p>\n</blockquote>\n<blockquote>\n<p>建议是，单独将每个模块的接口部分，单独拎出来，用一个api文件夹包括，这样，我们在对应的模块，只需引入对应的api文件。api文件夹里，其实就是各种请求的接口。这样统一，能方便后期接口的管理。</p>\n</blockquote>\n<h3 id=\"vuex状态管理应该进行模块解耦\"><a href=\"#vuex状态管理应该进行模块解耦\" class=\"headerlink\" title=\"vuex状态管理应该进行模块解耦\"></a>vuex状态管理应该进行模块解耦</h3><blockquote>\n<p>目前项目中，使用到vuex状态管理的，不太多，不知道后期项目，会不会越来越庞大，如果越来越庞大了，现在这种，所有模块都糅杂到一个store中的方式，也不太合适，vuex支持按模块的引入，针对后期模块多的情况，可以按模块划分，这样分层更清晰。</p>\n</blockquote>\n<blockquote>\n<p>另外，建议对mutation单独做一层type的映射，降低耦合性，打个比方：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SET_USER_INFO = <span class=\"string\">&#x27;setUserInfo&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mutations.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mutation-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    [types.SET_USER_INFO](state, userInfo) &#123;</span><br><span class=\"line\">        state.userInfo = userInfo;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样如果setUserInfo这个Mutation需要做变化了的话，我们只需要修改mutation-type就可以了，不用去每个用到该Mutation的地方去依次修改名称。进一步提高可维护性。</p>\n</blockquote>\n<h3 id=\"适度进行一些变量的优化\"><a href=\"#适度进行一些变量的优化\" class=\"headerlink\" title=\"适度进行一些变量的优化\"></a>适度进行一些变量的优化</h3><blockquote>\n<p>目前项目里在页面中访问vuex store里面的state的时候，是使用this.$store.state.xx来进行获取，而且每个地方用到了，都得重新写一遍，建议后期可以优化一下，避免掉过长的读取链，比如，Vuex框架中提供了一些API来简化我们的数据操作，比如获取state，就用mapState,获取getter，就用mapGetters等等。</p>\n</blockquote>\n"},{"title":"音频文件在vue中动态src绑定的问题","date":"2018-10-24T14:06:19.000Z","_content":"\n\n就在今天晚上，刚刚，两个多月前开发的黄山学院智慧旅游助手app项目，在临上线交付的前2天，里边语音导览出现了一个比较严重的问题，而且是在特定机型下才出现，且听我说。\n\n问题大概描述是这样的，首先进入语音导览页面，底图是百度地图，地图上面展示各种景点的图标，如下图所示，带有喇叭图标的，就是带音频的，不带喇叭的，就是简单文字展示的：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181022/1.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181022/2.png?raw=true)\n\n需求是点击图标或者底下的横栏扩音器按钮，是可以播放当前景点音频的。但实际发现的问题，在android5.1系统（需求要求的最低版本是5.1）下，刚进来，第一次点击图标，无语音播放，再点第二次，才播放当前景点的语音，但是，当我切换一个图标点击的时候，播放的，还是之前点击的景点图标的语音，点第二次，才能播放当前景点的语音。总之问题的现象就是，实际音频的加载和播放，总是比交互要慢半拍。\n\n核心代码如下，先看html：\n```html\n<audio controls id=\"voicemp\" class=\"dn\">\n    <source :src=\"voiceUrl\" type=\"audio/mpeg\">\n</audio>\n```\n\n```js\n  var app = new Vue({\n    el:'#app',\n    data:{\n      voiceUrl:'',\n    }\n  })\n\n  //异步获取到音频文件之后...\n  asyncFun(function(url){\n    app.voiceUrl=url\n    //然后就是调用播放方法，\n    \n    //切换时清空地址、\n    app.voiceUrl=''\n\n  })\n```\n\n上面方法调用，可以看出来，音频加载是异步动态绑定的，也就是说，等数据加载好之后，音频才能动态绑定上去，众所周知，异步的事件，总是会不太靠谱，很多时候，因为各种环境因素影响，会导致结果的多样化呈现，初步估计，是由于音频加载需要时间，但是可能vue内部的虚拟dom实现，挂载的速度要快于音频加载完成的时间，因此，当点击事件生效了，音频仍然没有加载完成，就可能导致播放失败，继而导致后续的播放队列产生紊乱。\n\n简单理清楚之后，解决办法很简单，不要使用vue的:src绑定，而是使用h5audio标签原有的属性src，写法有两种，一种是给audio加上ref属性，通过refs获取dom元素，再去动态设置src属性，另外一个就是采用js元素的获取dom元素的方法：\n\n```html\n<audio controls id=\"voicemp\" class=\"dn\">\n    <source src=\"\" type=\"audio/mpeg\">\n</audio>\n```\n\n```js\n  var app = new Vue({\n    el:'#app',\n    data:{\n      voiceUrl:'',\n    }\n  })\n\n  //异步获取到音频文件之后...\n  asyncFun(function(url){\n    //app.voiceUrl=url\n    document.getElementById(\"voicemp\").src=url;\n    //然后就是调用播放方法，\n    \n    //切换时清空地址、\n    //app.voiceUrl=''\n    document.getElementById(\"voicemp\").src=''\n\n  })\n```\n通过这样的方式去设置src，避免了vue生命周期对于音频文件的干扰。\n\nps：其实自己写过的一个音乐app的demo，audio标签很好的和:src使用，其实用的是vuex的状态管理方式，其实，音频文件并不算异步的，因为url早就是父组件中通过异步获取然后存入state中，因此，在子组件里使用:src去绑定一个值，其实相当去同步的方式去获取，就不会出现这样的一种异步导致数据混乱的状态了，详细请看：[这里](https://github.com/bettermu/vue-music-app/blob/master/src/components/player/player.vue)\n\n一般平时很少会遇到这样稀奇古怪的错，而且是在特定的机型下面，这个例子，在网页端和android6以上以及ios系统，都是完全正常的，就只有5.X的版本才会有。大概遇到了，真的只能一点一点去摸索，才能发现。踩过坑了，以后也就会多注意下。\n\n\n\n","source":"_posts/音频文件在vue中动态src绑定的问题.md","raw":"---\ntitle: 音频文件在vue中动态src绑定的问题\ndate: 2018-10-24 22:06:19\ntags:\n  - vue \n  - h5 audio\ncategories:\n  - vue \n  - h5 audio\n---\n\n\n就在今天晚上，刚刚，两个多月前开发的黄山学院智慧旅游助手app项目，在临上线交付的前2天，里边语音导览出现了一个比较严重的问题，而且是在特定机型下才出现，且听我说。\n\n问题大概描述是这样的，首先进入语音导览页面，底图是百度地图，地图上面展示各种景点的图标，如下图所示，带有喇叭图标的，就是带音频的，不带喇叭的，就是简单文字展示的：  \n\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181022/1.png?raw=true)\n![](https://github.com/bettermu/blog-picture-store/blob/master/20181022/2.png?raw=true)\n\n需求是点击图标或者底下的横栏扩音器按钮，是可以播放当前景点音频的。但实际发现的问题，在android5.1系统（需求要求的最低版本是5.1）下，刚进来，第一次点击图标，无语音播放，再点第二次，才播放当前景点的语音，但是，当我切换一个图标点击的时候，播放的，还是之前点击的景点图标的语音，点第二次，才能播放当前景点的语音。总之问题的现象就是，实际音频的加载和播放，总是比交互要慢半拍。\n\n核心代码如下，先看html：\n```html\n<audio controls id=\"voicemp\" class=\"dn\">\n    <source :src=\"voiceUrl\" type=\"audio/mpeg\">\n</audio>\n```\n\n```js\n  var app = new Vue({\n    el:'#app',\n    data:{\n      voiceUrl:'',\n    }\n  })\n\n  //异步获取到音频文件之后...\n  asyncFun(function(url){\n    app.voiceUrl=url\n    //然后就是调用播放方法，\n    \n    //切换时清空地址、\n    app.voiceUrl=''\n\n  })\n```\n\n上面方法调用，可以看出来，音频加载是异步动态绑定的，也就是说，等数据加载好之后，音频才能动态绑定上去，众所周知，异步的事件，总是会不太靠谱，很多时候，因为各种环境因素影响，会导致结果的多样化呈现，初步估计，是由于音频加载需要时间，但是可能vue内部的虚拟dom实现，挂载的速度要快于音频加载完成的时间，因此，当点击事件生效了，音频仍然没有加载完成，就可能导致播放失败，继而导致后续的播放队列产生紊乱。\n\n简单理清楚之后，解决办法很简单，不要使用vue的:src绑定，而是使用h5audio标签原有的属性src，写法有两种，一种是给audio加上ref属性，通过refs获取dom元素，再去动态设置src属性，另外一个就是采用js元素的获取dom元素的方法：\n\n```html\n<audio controls id=\"voicemp\" class=\"dn\">\n    <source src=\"\" type=\"audio/mpeg\">\n</audio>\n```\n\n```js\n  var app = new Vue({\n    el:'#app',\n    data:{\n      voiceUrl:'',\n    }\n  })\n\n  //异步获取到音频文件之后...\n  asyncFun(function(url){\n    //app.voiceUrl=url\n    document.getElementById(\"voicemp\").src=url;\n    //然后就是调用播放方法，\n    \n    //切换时清空地址、\n    //app.voiceUrl=''\n    document.getElementById(\"voicemp\").src=''\n\n  })\n```\n通过这样的方式去设置src，避免了vue生命周期对于音频文件的干扰。\n\nps：其实自己写过的一个音乐app的demo，audio标签很好的和:src使用，其实用的是vuex的状态管理方式，其实，音频文件并不算异步的，因为url早就是父组件中通过异步获取然后存入state中，因此，在子组件里使用:src去绑定一个值，其实相当去同步的方式去获取，就不会出现这样的一种异步导致数据混乱的状态了，详细请看：[这里](https://github.com/bettermu/vue-music-app/blob/master/src/components/player/player.vue)\n\n一般平时很少会遇到这样稀奇古怪的错，而且是在特定的机型下面，这个例子，在网页端和android6以上以及ios系统，都是完全正常的，就只有5.X的版本才会有。大概遇到了，真的只能一点一点去摸索，才能发现。踩过坑了，以后也就会多注意下。\n\n\n\n","slug":"音频文件在vue中动态src绑定的问题","published":1,"updated":"2018-10-24T14:10:08.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjp1wxnb0051msvicom42ydb","content":"<p>就在今天晚上，刚刚，两个多月前开发的黄山学院智慧旅游助手app项目，在临上线交付的前2天，里边语音导览出现了一个比较严重的问题，而且是在特定机型下才出现，且听我说。</p>\n<p>问题大概描述是这样的，首先进入语音导览页面，底图是百度地图，地图上面展示各种景点的图标，如下图所示，带有喇叭图标的，就是带音频的，不带喇叭的，就是简单文字展示的：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181022/1.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181022/2.png?raw=true\"></p>\n<p>需求是点击图标或者底下的横栏扩音器按钮，是可以播放当前景点音频的。但实际发现的问题，在android5.1系统（需求要求的最低版本是5.1）下，刚进来，第一次点击图标，无语音播放，再点第二次，才播放当前景点的语音，但是，当我切换一个图标点击的时候，播放的，还是之前点击的景点图标的语音，点第二次，才能播放当前景点的语音。总之问题的现象就是，实际音频的加载和播放，总是比交互要慢半拍。</p>\n<p>核心代码如下，先看html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;voicemp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;voiceUrl&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    voiceUrl:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异步获取到音频文件之后...</span></span><br><span class=\"line\">asyncFun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  app.voiceUrl=url</span><br><span class=\"line\">  <span class=\"comment\">//然后就是调用播放方法，</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//切换时清空地址、</span></span><br><span class=\"line\">  app.voiceUrl=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面方法调用，可以看出来，音频加载是异步动态绑定的，也就是说，等数据加载好之后，音频才能动态绑定上去，众所周知，异步的事件，总是会不太靠谱，很多时候，因为各种环境因素影响，会导致结果的多样化呈现，初步估计，是由于音频加载需要时间，但是可能vue内部的虚拟dom实现，挂载的速度要快于音频加载完成的时间，因此，当点击事件生效了，音频仍然没有加载完成，就可能导致播放失败，继而导致后续的播放队列产生紊乱。</p>\n<p>简单理清楚之后，解决办法很简单，不要使用vue的:src绑定，而是使用h5audio标签原有的属性src，写法有两种，一种是给audio加上ref属性，通过refs获取dom元素，再去动态设置src属性，另外一个就是采用js元素的获取dom元素的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;voicemp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    voiceUrl:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异步获取到音频文件之后...</span></span><br><span class=\"line\">asyncFun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//app.voiceUrl=url</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;voicemp&quot;</span>).src=url;</span><br><span class=\"line\">  <span class=\"comment\">//然后就是调用播放方法，</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//切换时清空地址、</span></span><br><span class=\"line\">  <span class=\"comment\">//app.voiceUrl=&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;voicemp&quot;</span>).src=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过这样的方式去设置src，避免了vue生命周期对于音频文件的干扰。</p>\n<p>ps：其实自己写过的一个音乐app的demo，audio标签很好的和:src使用，其实用的是vuex的状态管理方式，其实，音频文件并不算异步的，因为url早就是父组件中通过异步获取然后存入state中，因此，在子组件里使用:src去绑定一个值，其实相当去同步的方式去获取，就不会出现这样的一种异步导致数据混乱的状态了，详细请看：<a href=\"https://github.com/bettermu/vue-music-app/blob/master/src/components/player/player.vue\">这里</a></p>\n<p>一般平时很少会遇到这样稀奇古怪的错，而且是在特定的机型下面，这个例子，在网页端和android6以上以及ios系统，都是完全正常的，就只有5.X的版本才会有。大概遇到了，真的只能一点一点去摸索，才能发现。踩过坑了，以后也就会多注意下。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>就在今天晚上，刚刚，两个多月前开发的黄山学院智慧旅游助手app项目，在临上线交付的前2天，里边语音导览出现了一个比较严重的问题，而且是在特定机型下才出现，且听我说。</p>\n<p>问题大概描述是这样的，首先进入语音导览页面，底图是百度地图，地图上面展示各种景点的图标，如下图所示，带有喇叭图标的，就是带音频的，不带喇叭的，就是简单文字展示的：  </p>\n<p><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181022/1.png?raw=true\"><br><img src=\"https://github.com/bettermu/blog-picture-store/blob/master/20181022/2.png?raw=true\"></p>\n<p>需求是点击图标或者底下的横栏扩音器按钮，是可以播放当前景点音频的。但实际发现的问题，在android5.1系统（需求要求的最低版本是5.1）下，刚进来，第一次点击图标，无语音播放，再点第二次，才播放当前景点的语音，但是，当我切换一个图标点击的时候，播放的，还是之前点击的景点图标的语音，点第二次，才能播放当前景点的语音。总之问题的现象就是，实际音频的加载和播放，总是比交互要慢半拍。</p>\n<p>核心代码如下，先看html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;voicemp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;voiceUrl&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    voiceUrl:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异步获取到音频文件之后...</span></span><br><span class=\"line\">asyncFun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  app.voiceUrl=url</span><br><span class=\"line\">  <span class=\"comment\">//然后就是调用播放方法，</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//切换时清空地址、</span></span><br><span class=\"line\">  app.voiceUrl=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面方法调用，可以看出来，音频加载是异步动态绑定的，也就是说，等数据加载好之后，音频才能动态绑定上去，众所周知，异步的事件，总是会不太靠谱，很多时候，因为各种环境因素影响，会导致结果的多样化呈现，初步估计，是由于音频加载需要时间，但是可能vue内部的虚拟dom实现，挂载的速度要快于音频加载完成的时间，因此，当点击事件生效了，音频仍然没有加载完成，就可能导致播放失败，继而导致后续的播放队列产生紊乱。</p>\n<p>简单理清楚之后，解决办法很简单，不要使用vue的:src绑定，而是使用h5audio标签原有的属性src，写法有两种，一种是给audio加上ref属性，通过refs获取dom元素，再去动态设置src属性，另外一个就是采用js元素的获取dom元素的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;voicemp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    voiceUrl:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异步获取到音频文件之后...</span></span><br><span class=\"line\">asyncFun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//app.voiceUrl=url</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;voicemp&quot;</span>).src=url;</span><br><span class=\"line\">  <span class=\"comment\">//然后就是调用播放方法，</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//切换时清空地址、</span></span><br><span class=\"line\">  <span class=\"comment\">//app.voiceUrl=&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;voicemp&quot;</span>).src=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过这样的方式去设置src，避免了vue生命周期对于音频文件的干扰。</p>\n<p>ps：其实自己写过的一个音乐app的demo，audio标签很好的和:src使用，其实用的是vuex的状态管理方式，其实，音频文件并不算异步的，因为url早就是父组件中通过异步获取然后存入state中，因此，在子组件里使用:src去绑定一个值，其实相当去同步的方式去获取，就不会出现这样的一种异步导致数据混乱的状态了，详细请看：<a href=\"https://github.com/bettermu/vue-music-app/blob/master/src/components/player/player.vue\">这里</a></p>\n<p>一般平时很少会遇到这样稀奇古怪的错，而且是在特定的机型下面，这个例子，在网页端和android6以上以及ios系统，都是完全正常的，就只有5.X的版本才会有。大概遇到了，真的只能一点一点去摸索，才能发现。踩过坑了，以后也就会多注意下。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckjp1wxl10001msvicms9hgxu","category_id":"ckjp1wxl70004msvi90ooe7fm","_id":"ckjp1wxlf000gmsvi3144383f"},{"post_id":"ckjp1wxl60003msvi7sdhgumt","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxlk000nmsvic7gp6jsa"},{"post_id":"ckjp1wxl90007msvihniy8med","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxlm000smsvi0gxj4d4m"},{"post_id":"ckjp1wxla0009msvigdmvh36o","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxlp000zmsvi4per3aph"},{"post_id":"ckjp1wxlb000amsvi9hoi7npg","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxls0013msvi5lbt9qwu"},{"post_id":"ckjp1wxld000emsvi7ds1hdyv","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxlw001amsvi4lh54nwr"},{"post_id":"ckjp1wxlr0012msvi5k2ba17a","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxlx001emsvi2vjo514r"},{"post_id":"ckjp1wxle000fmsvib55lfn69","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxlz001imsvi8o7gfg0t"},{"post_id":"ckjp1wxlu0018msvi4e7velbz","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxm0001mmsvi10e1dzvv"},{"post_id":"ckjp1wxli000lmsvid2xu8lgl","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxm6001vmsvic02r1x2i"},{"post_id":"ckjp1wxm7001wmsvi36m535nk","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxmc0025msvibcph1d08"},{"post_id":"ckjp1wxlm000rmsvi7khv6qyj","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxmd0028msvi4re97ks0"},{"post_id":"ckjp1wxm8001ymsvi6aj7bdo1","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmf002dmsvihsfe9laa"},{"post_id":"ckjp1wxmd0027msvi7ldth5rh","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmj002jmsvi63uh61ij"},{"post_id":"ckjp1wxlq0010msvi69oi5t7p","category_id":"ckjp1wxmd0029msvi4x2zavta","_id":"ckjp1wxmk002mmsvi6rwa8y37"},{"post_id":"ckjp1wxls0015msvieyksay1z","category_id":"ckjp1wxmi002fmsvi7byg1c5w","_id":"ckjp1wxmm002smsviemqfh94x"},{"post_id":"ckjp1wxlw001cmsvi5b24angs","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxmp002zmsvi8794c0e4"},{"post_id":"ckjp1wxlw001cmsvi5b24angs","category_id":"ckjp1wxmk002nmsvia05985z5","_id":"ckjp1wxmq0033msvi2l4ybq28"},{"post_id":"ckjp1wxmn002vmsvi0kuedod3","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmr0035msvihmfqeb4x"},{"post_id":"ckjp1wxlh000jmsvi3tfpd8u4","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxms0039msvi0ri12v1x"},{"post_id":"ckjp1wxlh000jmsvi3tfpd8u4","category_id":"ckjp1wxmm002umsvi25c75ma0","_id":"ckjp1wxmt003bmsvi5yh7fpdc"},{"post_id":"ckjp1wxmp0031msvi4ou1hsqw","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmu003gmsvi239lcwp4"},{"post_id":"ckjp1wxmr0034msvi180zagrh","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmv003jmsvi10amfltp"},{"post_id":"ckjp1wxly001gmsvihzbphsto","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxmw003omsvi6bnv890m"},{"post_id":"ckjp1wxly001gmsvihzbphsto","category_id":"ckjp1wxmq0032msvievsiajd7","_id":"ckjp1wxmx003rmsvi1um0fvnu"},{"post_id":"ckjp1wxms003amsvi0h9t2v6v","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxmy003vmsvi3o5ta9oj"},{"post_id":"ckjp1wxlz001kmsvi94rn16yy","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxn0003zmsvi0gcx6hkm"},{"post_id":"ckjp1wxlz001kmsvi94rn16yy","category_id":"ckjp1wxms0038msvi9k0ldf81","_id":"ckjp1wxn10042msvi5qyd5yfe"},{"post_id":"ckjp1wxmt003cmsvi1sjiaojj","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxn20045msvibq8c31pn"},{"post_id":"ckjp1wxm0001omsvi643gacss","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxn30048msvibcuaec94"},{"post_id":"ckjp1wxm0001omsvi643gacss","category_id":"ckjp1wxmu003emsviev6e48g5","_id":"ckjp1wxn4004dmsvi6em81fpb"},{"post_id":"ckjp1wxmv003kmsvi58lr7l5l","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxn5004gmsvidxp380so"},{"post_id":"ckjp1wxmw003pmsvi4c289qlb","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxn7004lmsviasxocawt"},{"post_id":"ckjp1wxm4001rmsviardcbs8v","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxn8004omsvi4u4c75nz"},{"post_id":"ckjp1wxm4001rmsviardcbs8v","category_id":"ckjp1wxms0038msvi9k0ldf81","_id":"ckjp1wxn9004smsvi39m43iu5"},{"post_id":"ckjp1wxmx003smsvif1m4hrwn","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxna004wmsvi9mitdqhw"},{"post_id":"ckjp1wxmz003xmsviaxi96q0f","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxnb0050msvicyoj5za3"},{"post_id":"ckjp1wxll000pmsvi11hla26d","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxnd0054msvi4l5q8ysf"},{"post_id":"ckjp1wxll000pmsvi11hla26d","category_id":"ckjp1wxmm002umsvi25c75ma0","_id":"ckjp1wxnd0056msvibcrb4ykp"},{"post_id":"ckjp1wxn00040msvi81qoeqym","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxne005amsvi533qfq2t"},{"post_id":"ckjp1wxm5001tmsvihpdg1hqr","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxne005cmsvi6pid67rj"},{"post_id":"ckjp1wxm5001tmsvihpdg1hqr","category_id":"ckjp1wxn10041msvi0cidhmav","_id":"ckjp1wxnf005gmsvi4n0xfcrf"},{"post_id":"ckjp1wxn20047msvif3vlczaa","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxnf005imsvielrd5gbo"},{"post_id":"ckjp1wxn20047msvif3vlczaa","category_id":"ckjp1wxmk002nmsvia05985z5","_id":"ckjp1wxng005mmsvie3a518ha"},{"post_id":"ckjp1wxn8004pmsvidn9wbele","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxng005omsvi9plu2lun"},{"post_id":"ckjp1wxn9004umsviguvd2wei","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxng005rmsvi1ukcdxgh"},{"post_id":"ckjp1wxme002cmsvi2rnm4e4q","category_id":"ckjp1wxnb004zmsvi6ltucqhq","_id":"ckjp1wxni005umsvidktke8cs"},{"post_id":"ckjp1wxmj002lmsvi0gfz5ubt","category_id":"ckjp1wxlc000bmsvi3p5c3026","_id":"ckjp1wxni005wmsviejt9frx4"},{"post_id":"ckjp1wxmj002lmsvi0gfz5ubt","category_id":"ckjp1wxnf005kmsvif28vczun","_id":"ckjp1wxnk0060msvieahi0bkp"},{"post_id":"ckjp1wxml002qmsvifvok5u3y","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxnk0061msvi150zak2d"},{"post_id":"ckjp1wxml002qmsvifvok5u3y","category_id":"ckjp1wxng005qmsvi6z6k2vgu","_id":"ckjp1wxnl0064msvi1t2ab4p0"},{"post_id":"ckjp1wxmo002xmsvi45sxf4i4","category_id":"ckjp1wxnk0062msvifhgrbqx8","_id":"ckjp1wxnn0069msvi8pr8fvok"},{"post_id":"ckjp1wxmr0036msviaq6i0pou","category_id":"ckjp1wxnl0067msvibaqc4389","_id":"ckjp1wxnp006emsvi7xtugzap"},{"post_id":"ckjp1wxn10043msvigq6n85cc","category_id":"ckjp1wxlp000ymsvigft56yz5","_id":"ckjp1wxnt006lmsvibbja1xvt"},{"post_id":"ckjp1wxn10043msvigq6n85cc","category_id":"ckjp1wxnp006fmsvi34qjbecg","_id":"ckjp1wxnu006omsvi2fdt4ps4"},{"post_id":"ckjp1wxm90021msvi98qt9yzn","category_id":"ckjp1wxn4004bmsvif2xs1rxi","_id":"ckjp1wxnw006ymsvi6qqj9jru"},{"post_id":"ckjp1wxm90021msvi98qt9yzn","category_id":"ckjp1wxnu006qmsvih03mdm51","_id":"ckjp1wxnx0071msvi3rckhbun"},{"post_id":"ckjp1wxmb0024msviedjxfh9y","category_id":"ckjp1wxn6004jmsvi2klv9mw4","_id":"ckjp1wxny0076msvidmtthfc9"},{"post_id":"ckjp1wxmb0024msviedjxfh9y","category_id":"ckjp1wxnw006zmsvi09rmekeh","_id":"ckjp1wxny0079msvi7n1we5t1"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","category_id":"ckjp1wxm90020msviby1ngso2","_id":"ckjp1wxnz007fmsvi57u88fqy"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","category_id":"ckjp1wxn9004rmsvi2uv58fqj","_id":"ckjp1wxo0007imsvi6aaj8xji"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","category_id":"ckjp1wxny0077msvi58643418","_id":"ckjp1wxo0007kmsvi9br664ki"},{"post_id":"ckjp1wxnb0051msvicom42ydb","category_id":"ckjp1wxlk000mmsvigeb39pjq","_id":"ckjp1wxo1007omsvi3vpwaef8"},{"post_id":"ckjp1wxnb0051msvicom42ydb","category_id":"ckjp1wxny007cmsvi42wzgwkh","_id":"ckjp1wxo1007qmsvi89de25nb"},{"post_id":"ckjp1wxmh002emsviazhg1tmc","category_id":"ckjp1wxnd0057msvi5vq92v5e","_id":"ckjp1wxo2007umsvi4cnoftih"},{"post_id":"ckjp1wxmh002emsviazhg1tmc","category_id":"ckjp1wxnz007gmsviawom5vbl","_id":"ckjp1wxo2007wmsvi2bykd115"},{"post_id":"ckjp1wxmj002imsvi0b4d4utl","category_id":"ckjp1wxne005emsvi8v7x4wm3","_id":"ckjp1wxo3007ymsvic0f25wud"},{"post_id":"ckjp1wxmj002imsvi0b4d4utl","category_id":"ckjp1wxo0007mmsvi4fzu1ioh","_id":"ckjp1wxo30080msvih68ca7m0"},{"post_id":"ckjp1wxmm002rmsvi54jrfjal","category_id":"ckjp1wxnj005xmsvi8pkr3rdv","_id":"ckjp1wxo30081msvicqig1vwk"},{"post_id":"ckjp1wxmm002rmsvi54jrfjal","category_id":"ckjp1wxo2007smsvi8j54ahg0","_id":"ckjp1wxo40084msvi00244p7g"},{"post_id":"ckjp1wxmu003hmsvi4ka40yhr","category_id":"ckjp1wxno006amsvi3lmy2rc7","_id":"ckjp1wxo40087msvi4ejf5bij"},{"post_id":"ckjp1wxmu003hmsvi4ka40yhr","category_id":"ckjp1wxo3007xmsvi9oxmcbb7","_id":"ckjp1wxo5008amsvi9rvm97lq"},{"post_id":"ckjp1wxn3004amsvi1xm6aqgy","category_id":"ckjp1wxnr006imsvigoxg8b7a","_id":"ckjp1wxo5008bmsvi6zw6ep60"},{"post_id":"ckjp1wxn3004amsvi1xm6aqgy","category_id":"ckjp1wxo30082msvi8ftg61sg","_id":"ckjp1wxo6008emsvihco15v3a"},{"post_id":"ckjp1wxn4004emsvibm7y0bzq","category_id":"ckjp1wxnt006mmsvi7cywdgt3","_id":"ckjp1wxo6008hmsvifb7s5a6n"},{"post_id":"ckjp1wxn4004emsvibm7y0bzq","category_id":"ckjp1wxo40088msviavbi5ib0","_id":"ckjp1wxo7008lmsvi6amqhpq7"},{"post_id":"ckjp1wxn7004mmsviaqqeby3q","category_id":"ckjp1wxnv006umsvi4qibdqij","_id":"ckjp1wxo7008nmsvid2ui8iai"},{"post_id":"ckjp1wxn7004mmsviaqqeby3q","category_id":"ckjp1wxo5008cmsvi8yhr0n4d","_id":"ckjp1wxo8008qmsvi7xtsdal2"},{"post_id":"ckjp1wxna004xmsvi3pgrbdmf","category_id":"ckjp1wxnx0072msvib876b5rg","_id":"ckjp1wxo8008smsvibiyj9a7s"},{"post_id":"ckjp1wxna004xmsvi3pgrbdmf","category_id":"ckjp1wxo6008jmsvi09v84ymd","_id":"ckjp1wxo8008vmsvi2xjwfywq"}],"PostTag":[{"post_id":"ckjp1wxl10001msvicms9hgxu","tag_id":"ckjp1wxl80005msvifa0c2iw6","_id":"ckjp1wxld000dmsvihsjafyk9"},{"post_id":"ckjp1wxl60003msvi7sdhgumt","tag_id":"ckjp1wxlc000cmsvih7lu0lsf","_id":"ckjp1wxli000kmsvi5er72eo6"},{"post_id":"ckjp1wxl90007msvihniy8med","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxll000qmsviata2flsm"},{"post_id":"ckjp1wxla0009msvigdmvh36o","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxlo000wmsvihwvo0l7y"},{"post_id":"ckjp1wxlb000amsvi9hoi7npg","tag_id":"ckjp1wxln000umsvi8lgbc4be","_id":"ckjp1wxlu0017msvi3s4c8qew"},{"post_id":"ckjp1wxlb000amsvi9hoi7npg","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxlw001bmsviamju79ta"},{"post_id":"ckjp1wxls0015msvieyksay1z","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxly001fmsvifexbe3b9"},{"post_id":"ckjp1wxld000emsvi7ds1hdyv","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxlz001jmsvi2toxazo6"},{"post_id":"ckjp1wxly001gmsvihzbphsto","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxm0001nmsvih84s6lk6"},{"post_id":"ckjp1wxle000fmsvib55lfn69","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxm4001qmsvi9luo60ls"},{"post_id":"ckjp1wxlh000jmsvi3tfpd8u4","tag_id":"ckjp1wxm0001lmsvi88yxf27e","_id":"ckjp1wxm8001zmsvi9pkd2owm"},{"post_id":"ckjp1wxlh000jmsvi3tfpd8u4","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxma0022msvi9d1z9tz0"},{"post_id":"ckjp1wxm7001wmsvi36m535nk","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxmc0026msviak796oi5"},{"post_id":"ckjp1wxli000lmsvid2xu8lgl","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxme002amsvi6i8i6o1q"},{"post_id":"ckjp1wxme002cmsvi2rnm4e4q","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxmi002hmsvi7qgxgxir"},{"post_id":"ckjp1wxll000pmsvi11hla26d","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxmj002kmsvidru0dr27"},{"post_id":"ckjp1wxll000pmsvi11hla26d","tag_id":"ckjp1wxm0001lmsvi88yxf27e","_id":"ckjp1wxml002pmsvi584wdnnm"},{"post_id":"ckjp1wxlm000rmsvi7khv6qyj","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxmn002wmsvi9f1jfzn9"},{"post_id":"ckjp1wxlm000rmsvi7khv6qyj","tag_id":"ckjp1wxm0001lmsvi88yxf27e","_id":"ckjp1wxmp002ymsvi4aeihqnv"},{"post_id":"ckjp1wxms003amsvi0h9t2v6v","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxmu003fmsvidv7w49z3"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","tag_id":"ckjp1wxmm002tmsvig901631a","_id":"ckjp1wxmv003imsvifklidknw"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","tag_id":"ckjp1wxmp0030msvi43dt54et","_id":"ckjp1wxmw003mmsvid4k0fw7w"},{"post_id":"ckjp1wxlo000xmsvigzp2bd79","tag_id":"ckjp1wxms0037msvi787u20uk","_id":"ckjp1wxmx003qmsvi2v5m79mh"},{"post_id":"ckjp1wxlq0010msvi69oi5t7p","tag_id":"ckjp1wxmu003dmsvidquee5mf","_id":"ckjp1wxmy003tmsvi23h91u1n"},{"post_id":"ckjp1wxmw003pmsvi4c289qlb","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxn0003ymsvi3ifc6j88"},{"post_id":"ckjp1wxlr0012msvi5k2ba17a","tag_id":"ckjp1wxmw003lmsvicmt12dlm","_id":"ckjp1wxn20046msvia9ni4dvu"},{"post_id":"ckjp1wxlr0012msvi5k2ba17a","tag_id":"ckjp1wxmy003wmsvi16hg6dii","_id":"ckjp1wxn30049msvi2rfe1qeg"},{"post_id":"ckjp1wxlu0018msvi4e7velbz","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxn5004fmsvigexceztv"},{"post_id":"ckjp1wxlu0018msvi4e7velbz","tag_id":"ckjp1wxn20044msvigt1aahga","_id":"ckjp1wxn6004imsvidy3p56ih"},{"post_id":"ckjp1wxn3004amsvi1xm6aqgy","tag_id":"ckjp1wxmm002tmsvig901631a","_id":"ckjp1wxn7004nmsvicsen1a3f"},{"post_id":"ckjp1wxlw001cmsvi5b24angs","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxn8004qmsvidc4s6a21"},{"post_id":"ckjp1wxlw001cmsvi5b24angs","tag_id":"ckjp1wxn4004cmsvicwupcqrn","_id":"ckjp1wxna004vmsvi1bd70e3y"},{"post_id":"ckjp1wxlz001kmsvi94rn16yy","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxnb004ymsvicjr5cy47"},{"post_id":"ckjp1wxlz001kmsvi94rn16yy","tag_id":"ckjp1wxn7004kmsvi126b11wa","_id":"ckjp1wxnc0053msvi9qglb5ni"},{"post_id":"ckjp1wxn8004pmsvidn9wbele","tag_id":"ckjp1wxln000umsvi8lgbc4be","_id":"ckjp1wxnd0055msvi1zlz3heq"},{"post_id":"ckjp1wxn8004pmsvidn9wbele","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxne0059msviffe63gri"},{"post_id":"ckjp1wxn9004umsviguvd2wei","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxne005bmsvic6707ya0"},{"post_id":"ckjp1wxm0001omsvi643gacss","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxne005dmsvib2b9ftt0"},{"post_id":"ckjp1wxm0001omsvi643gacss","tag_id":"ckjp1wxn9004tmsvi9ll84i5y","_id":"ckjp1wxnf005hmsvi221090mf"},{"post_id":"ckjp1wxm4001rmsviardcbs8v","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxnf005jmsvibgfq5c9r"},{"post_id":"ckjp1wxm4001rmsviardcbs8v","tag_id":"ckjp1wxn7004kmsvi126b11wa","_id":"ckjp1wxng005nmsvi0z1v7acf"},{"post_id":"ckjp1wxm5001tmsvihpdg1hqr","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxng005pmsvi1raohpqn"},{"post_id":"ckjp1wxm5001tmsvihpdg1hqr","tag_id":"ckjp1wxnd0058msvieb1zccfj","_id":"ckjp1wxni005tmsvi5d3907qz"},{"post_id":"ckjp1wxm8001ymsvi6aj7bdo1","tag_id":"ckjp1wxnf005fmsvibkxlh694","_id":"ckjp1wxni005vmsvifp59hr77"},{"post_id":"ckjp1wxm8001ymsvi6aj7bdo1","tag_id":"ckjp1wxnf005lmsvidsr1fozt","_id":"ckjp1wxnj005zmsvi7o0i64yu"},{"post_id":"ckjp1wxm90021msvi98qt9yzn","tag_id":"ckjp1wxng005smsvi3u5eg7xd","_id":"ckjp1wxnl0065msvih1lv1p6g"},{"post_id":"ckjp1wxm90021msvi98qt9yzn","tag_id":"ckjp1wxnj005ymsvicc1j3hvv","_id":"ckjp1wxnl0066msviab8qg6of"},{"post_id":"ckjp1wxmb0024msviedjxfh9y","tag_id":"ckjp1wxnk0063msviagto2u9i","_id":"ckjp1wxnp006cmsvi9tn9auos"},{"post_id":"ckjp1wxmb0024msviedjxfh9y","tag_id":"ckjp1wxnn0068msvi4o5c1w9r","_id":"ckjp1wxnp006dmsvi7exq7x4m"},{"post_id":"ckjp1wxmd0027msvi7ldth5rh","tag_id":"ckjp1wxno006bmsviebbq9q6o","_id":"ckjp1wxnr006hmsvi5oke1nbi"},{"post_id":"ckjp1wxmh002emsviazhg1tmc","tag_id":"ckjp1wxnq006gmsvi6jila832","_id":"ckjp1wxns006kmsvi9wbibvk3"},{"post_id":"ckjp1wxmj002imsvi0b4d4utl","tag_id":"ckjp1wxnr006jmsvi5xeo4sk6","_id":"ckjp1wxnu006pmsvi5u845mbb"},{"post_id":"ckjp1wxmj002lmsvi0gfz5ubt","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxnv006smsvi9q7q0oke"},{"post_id":"ckjp1wxmj002lmsvi0gfz5ubt","tag_id":"ckjp1wxnt006nmsvih0blckxb","_id":"ckjp1wxnv006tmsvib1gsaorw"},{"post_id":"ckjp1wxml002qmsvifvok5u3y","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxnv006wmsvi3zz61s6f"},{"post_id":"ckjp1wxml002qmsvifvok5u3y","tag_id":"ckjp1wxnu006rmsvidewl09t2","_id":"ckjp1wxnw006xmsvi3wn766o9"},{"post_id":"ckjp1wxmm002rmsvi54jrfjal","tag_id":"ckjp1wxnv006vmsvibeg9eo5l","_id":"ckjp1wxnx0074msvibxvhexb1"},{"post_id":"ckjp1wxmm002rmsvi54jrfjal","tag_id":"ckjp1wxnw0070msvi3af81zl8","_id":"ckjp1wxny0075msvid1kg81oz"},{"post_id":"ckjp1wxmn002vmsvi0kuedod3","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxny007amsvi8j1m567o"},{"post_id":"ckjp1wxmn002vmsvi0kuedod3","tag_id":"ckjp1wxnx0073msvi7kjl5fj3","_id":"ckjp1wxny007bmsvicigf3zjp"},{"post_id":"ckjp1wxmo002xmsvi45sxf4i4","tag_id":"ckjp1wxny0078msvi2gg5c0ur","_id":"ckjp1wxnz007emsvifcmq4xpl"},{"post_id":"ckjp1wxmp0031msvi4ou1hsqw","tag_id":"ckjp1wxnz007dmsvi223uhlcq","_id":"ckjp1wxo0007jmsviaemp7tko"},{"post_id":"ckjp1wxmp0031msvi4ou1hsqw","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxo0007lmsvi65wnfbc1"},{"post_id":"ckjp1wxmr0034msvi180zagrh","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxo1007pmsviacdu8na2"},{"post_id":"ckjp1wxmr0034msvi180zagrh","tag_id":"ckjp1wxo0007hmsvi407oeaww","_id":"ckjp1wxo1007rmsvifldmfzsf"},{"post_id":"ckjp1wxmr0036msviaq6i0pou","tag_id":"ckjp1wxo0007nmsvicmjp4845","_id":"ckjp1wxo2007vmsvieywt2kpc"},{"post_id":"ckjp1wxmt003cmsvi1sjiaojj","tag_id":"ckjp1wxo2007tmsvi9ivw8qr5","_id":"ckjp1wxo40085msvibdch8lj8"},{"post_id":"ckjp1wxmt003cmsvi1sjiaojj","tag_id":"ckjp1wxo3007zmsvi60mb1eu0","_id":"ckjp1wxo40086msvibxfsaf76"},{"post_id":"ckjp1wxmu003hmsvi4ka40yhr","tag_id":"ckjp1wxo40083msvi0zk95713","_id":"ckjp1wxo6008fmsvifkxgdupb"},{"post_id":"ckjp1wxmu003hmsvi4ka40yhr","tag_id":"ckjp1wxo40089msvi2l932jhr","_id":"ckjp1wxo6008gmsvidsgm1pzg"},{"post_id":"ckjp1wxmv003kmsvi58lr7l5l","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxo6008kmsvicbh092mk"},{"post_id":"ckjp1wxmv003kmsvi58lr7l5l","tag_id":"ckjp1wxn20044msvigt1aahga","_id":"ckjp1wxo7008mmsvi180obb92"},{"post_id":"ckjp1wxmx003smsvif1m4hrwn","tag_id":"ckjp1wxlf000imsvi37ol06zm","_id":"ckjp1wxo8008pmsvic0o961ab"},{"post_id":"ckjp1wxmx003smsvif1m4hrwn","tag_id":"ckjp1wxo6008imsvi3hb57tbj","_id":"ckjp1wxo8008rmsvih9e70kwa"},{"post_id":"ckjp1wxmz003xmsviaxi96q0f","tag_id":"ckjp1wxo8008omsvi317r4dgy","_id":"ckjp1wxo8008umsvibo2t3oph"},{"post_id":"ckjp1wxn00040msvi81qoeqym","tag_id":"ckjp1wxlc000cmsvih7lu0lsf","_id":"ckjp1wxo9008xmsvi27qsb7jh"},{"post_id":"ckjp1wxn00040msvi81qoeqym","tag_id":"ckjp1wxo8008tmsvidy1t8049","_id":"ckjp1wxo9008ymsvi8xpib4sy"},{"post_id":"ckjp1wxn10043msvigq6n85cc","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxo90090msvi74m11jf5"},{"post_id":"ckjp1wxn10043msvigq6n85cc","tag_id":"ckjp1wxo9008wmsvidefub1y6","_id":"ckjp1wxo90091msvi4ad9aheb"},{"post_id":"ckjp1wxn20047msvif3vlczaa","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxoa0093msvi6ns4b6xo"},{"post_id":"ckjp1wxn20047msvif3vlczaa","tag_id":"ckjp1wxn4004cmsvicwupcqrn","_id":"ckjp1wxoa0094msvicny461pm"},{"post_id":"ckjp1wxn4004emsvibm7y0bzq","tag_id":"ckjp1wxo6008imsvi3hb57tbj","_id":"ckjp1wxoa0096msvi8muw68fi"},{"post_id":"ckjp1wxn4004emsvibm7y0bzq","tag_id":"ckjp1wxlt0016msviez5hf1it","_id":"ckjp1wxoa0097msvi4279gf9l"},{"post_id":"ckjp1wxn7004mmsviaqqeby3q","tag_id":"ckjp1wxoa0095msvi0p4x9857","_id":"ckjp1wxob009amsvi5x9wag5p"},{"post_id":"ckjp1wxn7004mmsviaqqeby3q","tag_id":"ckjp1wxob0098msvi8xfkbj53","_id":"ckjp1wxob009bmsviehqh9fn2"},{"post_id":"ckjp1wxna004xmsvi3pgrbdmf","tag_id":"ckjp1wxob0099msvi7gdb22x2","_id":"ckjp1wxob009emsvi35ocg7wo"},{"post_id":"ckjp1wxna004xmsvi3pgrbdmf","tag_id":"ckjp1wxob009cmsvi8g9j4005","_id":"ckjp1wxoc009fmsvi1zy50me6"},{"post_id":"ckjp1wxnb0051msvicom42ydb","tag_id":"ckjp1wxlk000omsvicvgx8olx","_id":"ckjp1wxoc009gmsvi17chc6jt"},{"post_id":"ckjp1wxnb0051msvicom42ydb","tag_id":"ckjp1wxob009dmsvibv0n1d6z","_id":"ckjp1wxoc009hmsviaga07tkg"}],"Tag":[{"name":"Android Studio","_id":"ckjp1wxl80005msvifa0c2iw6"},{"name":"原生js","_id":"ckjp1wxlc000cmsvih7lu0lsf"},{"name":"js","_id":"ckjp1wxlf000imsvi37ol06zm"},{"name":"vue","_id":"ckjp1wxlk000omsvicvgx8olx"},{"name":"better-scroll","_id":"ckjp1wxln000umsvi8lgbc4be"},{"name":"css","_id":"ckjp1wxlt0016msviez5hf1it"},{"name":"flex","_id":"ckjp1wxm0001lmsvi88yxf27e"},{"name":"html","_id":"ckjp1wxmm002tmsvig901631a"},{"name":"data-","_id":"ckjp1wxmp0030msvi43dt54et"},{"name":"jq","_id":"ckjp1wxms0037msvi787u20uk"},{"name":"静态资源","_id":"ckjp1wxmu003dmsvidquee5mf"},{"name":"移动端页面","_id":"ckjp1wxmw003lmsvicmt12dlm"},{"name":"css3","_id":"ckjp1wxmy003wmsvi16hg6dii"},{"name":"百度地图API","_id":"ckjp1wxn20044msvigt1aahga"},{"name":"vue-awesome-swiper","_id":"ckjp1wxn4004cmsvicwupcqrn"},{"name":"vue-router","_id":"ckjp1wxn7004kmsvi126b11wa"},{"name":"vue-validate","_id":"ckjp1wxn9004tmsvi9ll84i5y"},{"name":"vuejs-paginate","_id":"ckjp1wxnd0058msvieb1zccfj"},{"name":"input","_id":"ckjp1wxnf005fmsvibkxlh694"},{"name":"bug","_id":"ckjp1wxnf005lmsvidsr1fozt"},{"name":"krpano.js","_id":"ckjp1wxng005smsvi3u5eg7xd"},{"name":"全景漫游","_id":"ckjp1wxnj005ymsvicc1j3hvv"},{"name":"IntersectionObserver","_id":"ckjp1wxnk0063msviagto2u9i"},{"name":"浏览器API","_id":"ckjp1wxnn0068msvi4o5c1w9r"},{"name":"js基础","_id":"ckjp1wxno006bmsviebbq9q6o"},{"name":"交互  手势缩放","_id":"ckjp1wxnq006gmsvi6jila832"},{"name":"微信小程序 iconfont","_id":"ckjp1wxnr006jmsvi5xeo4sk6"},{"name":"deepCopy","_id":"ckjp1wxnt006nmsvih0blckxb"},{"name":"components","_id":"ckjp1wxnu006rmsvidewl09t2"},{"name":"uni-app","_id":"ckjp1wxnv006vmsvibeg9eo5l"},{"name":"微信小程序","_id":"ckjp1wxnw0070msvi3af81zl8"},{"name":"DOM","_id":"ckjp1wxnx0073msvi7kjl5fj3"},{"name":"问题解决","_id":"ckjp1wxny0078msvi2gg5c0ur"},{"name":"swiper","_id":"ckjp1wxnz007dmsvi223uhlcq"},{"name":"页面优化","_id":"ckjp1wxo0007hmsvi407oeaww"},{"name":"browser","_id":"ckjp1wxo0007nmsvicmjp4845"},{"name":"closure","_id":"ckjp1wxo2007tmsvi9ivw8qr5"},{"name":"js特性","_id":"ckjp1wxo3007zmsvi60mb1eu0"},{"name":"chrome","_id":"ckjp1wxo40083msvi0zk95713"},{"name":"navigator","_id":"ckjp1wxo40089msvi2l932jhr"},{"name":"百度地图","_id":"ckjp1wxo6008imsvi3hb57tbj"},{"name":"移动端","_id":"ckjp1wxo8008omsvi317r4dgy"},{"name":"事件绑定","_id":"ckjp1wxo8008tmsvidy1t8049"},{"name":"transition","_id":"ckjp1wxo9008wmsvidefub1y6"},{"name":"elementUI","_id":"ckjp1wxoa0095msvi0p4x9857"},{"name":"scroll","_id":"ckjp1wxob0098msvi8xfkbj53"},{"name":"Vue","_id":"ckjp1wxob0099msvi7gdb22x2"},{"name":"前端技术栈","_id":"ckjp1wxob009cmsvi8g9j4005"},{"name":"h5 audio","_id":"ckjp1wxob009dmsvibv0n1d6z"}]}}